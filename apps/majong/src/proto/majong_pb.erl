%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.8
-module(majong_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("majong_pb.hrl").
-include("gpb.hrl").



-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #req_join{} -> e_msg_req_join(Msg, TrUserData);
      #req_login{} -> e_msg_req_login(Msg, TrUserData);
      #rsp_create_room{} ->
	  e_msg_rsp_create_room(Msg, TrUserData);
      #pb_rank_player{} ->
	  e_msg_pb_rank_player(Msg, TrUserData);
      #rsp_coins_rank{} ->
	  e_msg_rsp_coins_rank(Msg, TrUserData);
      #rsp_pay{} -> e_msg_rsp_pay(Msg, TrUserData);
      #req_pay{} -> e_msg_req_pay(Msg, TrUserData);
      #req_ready{} -> e_msg_req_ready(Msg, TrUserData);
      #rsp_show{} -> e_msg_rsp_show(Msg, TrUserData);
      #req_zhuang{} -> e_msg_req_zhuang(Msg, TrUserData);
      #pb_unit{} -> e_msg_pb_unit(Msg, TrUserData);
      #rsp_game_start{} ->
	  e_msg_rsp_game_start(Msg, TrUserData);
      #rsp_start{} -> e_msg_rsp_start(Msg, TrUserData);
      #rsp_heart{} -> e_msg_rsp_heart(Msg, TrUserData);
      #rsp_dismiss{} -> e_msg_rsp_dismiss(Msg, TrUserData);
      #req_dismiss{} -> e_msg_req_dismiss(Msg, TrUserData);
      #rsp_get_data{} -> e_msg_rsp_get_data(Msg, TrUserData);
      #req_get_data{} -> e_msg_req_get_data(Msg, TrUserData);
      #pb_room_info{} -> e_msg_pb_room_info(Msg, TrUserData);
      #pb_player{} -> e_msg_pb_player(Msg, TrUserData);
      #rsp_join{} -> e_msg_rsp_join(Msg, TrUserData);
      #rsp_buy_gem{} -> e_msg_rsp_buy_gem(Msg, TrUserData);
      #req_buy_gem{} -> e_msg_req_buy_gem(Msg, TrUserData);
      #rsp_task_claim{} ->
	  e_msg_rsp_task_claim(Msg, TrUserData);
      #pb_task{} -> e_msg_pb_task(Msg, TrUserData);
      #req_show{} -> e_msg_req_show(Msg, TrUserData);
      #rsp_player_zhuang{} ->
	  e_msg_rsp_player_zhuang(Msg, TrUserData);
      #rsp_zhuang{} -> e_msg_rsp_zhuang(Msg, TrUserData);
      #rsp_player_leave{} ->
	  e_msg_rsp_player_leave(Msg, TrUserData);
      #rsp_leave{} -> e_msg_rsp_leave(Msg, TrUserData);
      #rsp_player_score{} ->
	  e_msg_rsp_player_score(Msg, TrUserData);
      #rsp_score{} -> e_msg_rsp_score(Msg, TrUserData);
      #rsp_zhuang_end{} ->
	  e_msg_rsp_zhuang_end(Msg, TrUserData);
      #notify_dismiss{} ->
	  e_msg_notify_dismiss(Msg, TrUserData);
      #rsp_new_player{} ->
	  e_msg_rsp_new_player(Msg, TrUserData);
      #rsp_login{} -> e_msg_rsp_login(Msg, TrUserData);
      #req_task_claim{} ->
	  e_msg_req_task_claim(Msg, TrUserData);
      #req_create_room{} ->
	  e_msg_req_create_room(Msg, TrUserData);
      #rsp_gem_rank{} -> e_msg_rsp_gem_rank(Msg, TrUserData);
      #req_gem_rank{} -> e_msg_req_gem_rank(Msg, TrUserData);
      #req_task{} -> e_msg_req_task(Msg, TrUserData);
      #rsp_check_pay{} ->
	  e_msg_rsp_check_pay(Msg, TrUserData);
      #res_check_pay{} ->
	  e_msg_res_check_pay(Msg, TrUserData);
      #rsp_player_ready{} ->
	  e_msg_rsp_player_ready(Msg, TrUserData);
      #rsp_ready{} -> e_msg_rsp_ready(Msg, TrUserData);
      #notify_show{} -> e_msg_notify_show(Msg, TrUserData);
      #rsp_player_chat{} ->
	  e_msg_rsp_player_chat(Msg, TrUserData);
      #rsp_result{} -> e_msg_rsp_result(Msg, TrUserData);
      #req_start{} -> e_msg_req_start(Msg, TrUserData);
      #req_heart{} -> e_msg_req_heart(Msg, TrUserData);
      #rsp_chat{} -> e_msg_rsp_chat(Msg, TrUserData);
      #rsp_save_data{} ->
	  e_msg_rsp_save_data(Msg, TrUserData);
      #req_save_data{} ->
	  e_msg_req_save_data(Msg, TrUserData);
      #req_coins_rank{} ->
	  e_msg_req_coins_rank(Msg, TrUserData);
      #rsp_task{} -> e_msg_rsp_task(Msg, TrUserData);
      #notify_all_show{} ->
	  e_msg_notify_all_show(Msg, TrUserData);
      #req_score{} -> e_msg_req_score(Msg, TrUserData);
      #req_leave{} -> e_msg_req_leave(Msg, TrUserData);
      #rsp_content{} -> e_msg_rsp_content(Msg, TrUserData);
      #req_content{} -> e_msg_req_content(Msg, TrUserData);
      #req_chat{} -> e_msg_req_chat(Msg, TrUserData);
      #rsp_pub{} -> e_msg_rsp_pub(Msg, TrUserData);
      #req_pub{} -> e_msg_req_pub(Msg, TrUserData)
    end.



e_msg_req_join(Msg, TrUserData) ->
    e_msg_req_join(Msg, <<>>, TrUserData).


e_msg_req_join(#req_join{id = F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_req_login(Msg, TrUserData) ->
    e_msg_req_login(Msg, <<>>, TrUserData).


e_msg_req_login(#req_login{code = F1, channel = F2,
			   user_id = F3},
		Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_int32(TrF2, <<B1/binary, 16>>)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_int32(TrF3, <<B2/binary, 24>>)
	   end
    end.

e_msg_rsp_create_room(Msg, TrUserData) ->
    e_msg_rsp_create_room(Msg, <<>>, TrUserData).


e_msg_rsp_create_room(#rsp_create_room{status = F1,
				       room_id = F2, coins = F3},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_sint(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_int32(TrF2, <<B1/binary, 16>>)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_int32(TrF3, <<B2/binary, 24>>)
	   end
    end.

e_msg_pb_rank_player(Msg, TrUserData) ->
    e_msg_pb_rank_player(Msg, <<>>, TrUserData).


e_msg_pb_rank_player(#pb_rank_player{name = F1,
				     logo = F2, num = F3},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int32(TrF3, <<B2/binary, 24>>)
    end.

e_msg_rsp_coins_rank(Msg, TrUserData) ->
    e_msg_rsp_coins_rank(Msg, <<>>, TrUserData).


e_msg_rsp_coins_rank(#rsp_coins_rank{players = F1}, Bin,
		     TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_rsp_coins_rank_players(TrF1, Bin, TrUserData)
      end
    end.

e_msg_rsp_pay(Msg, TrUserData) ->
    e_msg_rsp_pay(Msg, <<>>, TrUserData).


e_msg_rsp_pay(#rsp_pay{status = F1, coins = F2,
		       nonce_str = F3, sign = F4, err_code_des = F5,
		       trade_type = F6, prepay_id = F7, order_id = F8},
	      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_int32(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 26>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_string(TrF4, <<B3/binary, 34>>)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_string(TrF5, <<B4/binary, 42>>)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_type_string(TrF6, <<B5/binary, 50>>)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_type_string(TrF7, <<B6/binary, 58>>)
		end
	 end,
    if F8 == undefined -> B7;
       true ->
	   begin
	     TrF8 = id(F8, TrUserData),
	     e_type_string(TrF8, <<B7/binary, 66>>)
	   end
    end.

e_msg_req_pay(Msg, TrUserData) ->
    e_msg_req_pay(Msg, <<>>, TrUserData).


e_msg_req_pay(#req_pay{rmb = F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_req_ready(Msg, TrUserData) ->
    e_msg_req_ready(Msg, <<>>, TrUserData).


e_msg_req_ready(#req_ready{type = F1}, Bin,
		TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_rsp_show(Msg, TrUserData) ->
    e_msg_rsp_show(Msg, <<>>, TrUserData).


e_msg_rsp_show(#rsp_show{status = F1}, Bin,
	       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_req_zhuang(Msg, TrUserData) ->
    e_msg_req_zhuang(Msg, <<>>, TrUserData).


e_msg_req_zhuang(#req_zhuang{base = F1}, Bin,
		 TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_sint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_pb_unit(Msg, TrUserData) ->
    e_msg_pb_unit(Msg, <<>>, TrUserData).


e_msg_pb_unit(#pb_unit{type = F1, num = F2}, Bin,
	      TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>)
    end.

e_msg_rsp_game_start(Msg, TrUserData) ->
    e_msg_rsp_game_start(Msg, <<>>, TrUserData).


e_msg_rsp_game_start(#rsp_game_start{uid = F1,
				     round = F2},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_int32(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>)
    end.

e_msg_rsp_start(Msg, TrUserData) ->
    e_msg_rsp_start(Msg, <<>>, TrUserData).


e_msg_rsp_start(#rsp_start{status = F1}, Bin,
		TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_sint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_rsp_heart(Msg, TrUserData) ->
    e_msg_rsp_heart(Msg, <<>>, TrUserData).


e_msg_rsp_heart(#rsp_heart{time = F1}, Bin,
		TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_rsp_dismiss(Msg, TrUserData) ->
    e_msg_rsp_dismiss(Msg, <<>>, TrUserData).


e_msg_rsp_dismiss(#rsp_dismiss{status = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_req_dismiss(_Msg, _TrUserData) -> <<>>.

e_msg_rsp_get_data(Msg, TrUserData) ->
    e_msg_rsp_get_data(Msg, <<>>, TrUserData).


e_msg_rsp_get_data(#rsp_get_data{data = F1}, Bin,
		   TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_req_get_data(_Msg, _TrUserData) -> <<>>.

e_msg_pb_room_info(Msg, TrUserData) ->
    e_msg_pb_room_info(Msg, <<>>, TrUserData).


e_msg_pb_room_info(#pb_room_info{room_id = F1,
				 owner = F2, round = F3, pay = F4, banker = F5,
				 special = F6, type = F7},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_int32(TrF5, <<B4/binary, 40>>)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_int32(TrF6, <<B5/binary, 48>>)
	 end,
    begin
      TrF7 = id(F7, TrUserData),
      e_type_int32(TrF7, <<B6/binary, 56>>)
    end.

e_msg_pb_player(Msg, TrUserData) ->
    e_msg_pb_player(Msg, <<>>, TrUserData).


e_msg_pb_player(#pb_player{name = F1, uid = F2,
			   coins = F3, logo = F4, owner = F5, index = F6,
			   pai = F7, delta = F8},
		Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_int32(TrF3, <<B2/binary, 24>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_string(TrF4, <<B3/binary, 34>>)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_int32(TrF5, <<B4/binary, 40>>)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_type_int32(TrF6, <<B5/binary, 48>>)
		end
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   if TrF7 == [] -> B6;
	      true -> e_field_pb_player_pai(TrF7, B6, TrUserData)
	   end
	 end,
    if F8 == undefined -> B7;
       true ->
	   begin
	     TrF8 = id(F8, TrUserData),
	     e_type_int32(TrF8, <<B7/binary, 64>>)
	   end
    end.

e_msg_rsp_join(Msg, TrUserData) ->
    e_msg_rsp_join(Msg, <<>>, TrUserData).


e_msg_rsp_join(#rsp_join{status = F1, players = F2,
			 room_info = F3},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_sint(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true -> e_field_rsp_join_players(TrF2, B1, TrUserData)
	   end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_mfield_rsp_join_room_info(TrF3, <<B2/binary, 26>>,
					 TrUserData)
	   end
    end.

e_msg_rsp_buy_gem(Msg, TrUserData) ->
    e_msg_rsp_buy_gem(Msg, <<>>, TrUserData).


e_msg_rsp_buy_gem(#rsp_buy_gem{status = F1, gems = F2},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_int32(TrF2, <<B1/binary, 16>>)
	   end
    end.

e_msg_req_buy_gem(Msg, TrUserData) ->
    e_msg_req_buy_gem(Msg, <<>>, TrUserData).


e_msg_req_buy_gem(#req_buy_gem{coins = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_rsp_task_claim(Msg, TrUserData) ->
    e_msg_rsp_task_claim(Msg, <<>>, TrUserData).


e_msg_rsp_task_claim(#rsp_task_claim{status = F1}, Bin,
		     TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_pb_task(Msg, TrUserData) ->
    e_msg_pb_task(Msg, <<>>, TrUserData).


e_msg_pb_task(#pb_task{id = F1, num = F2, recive = F3},
	      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int32(TrF3, <<B2/binary, 24>>)
    end.

e_msg_req_show(_Msg, _TrUserData) -> <<>>.

e_msg_rsp_player_zhuang(Msg, TrUserData) ->
    e_msg_rsp_player_zhuang(Msg, <<>>, TrUserData).


e_msg_rsp_player_zhuang(#rsp_player_zhuang{uid = F1,
					   base = F2},
			Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_sint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_rsp_zhuang(Msg, TrUserData) ->
    e_msg_rsp_zhuang(Msg, <<>>, TrUserData).


e_msg_rsp_zhuang(#rsp_zhuang{status = F1}, Bin,
		 TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_sint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_rsp_player_leave(Msg, TrUserData) ->
    e_msg_rsp_player_leave(Msg, <<>>, TrUserData).


e_msg_rsp_player_leave(#rsp_player_leave{uid = F1}, Bin,
		       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_rsp_leave(Msg, TrUserData) ->
    e_msg_rsp_leave(Msg, <<>>, TrUserData).


e_msg_rsp_leave(#rsp_leave{status = F1}, Bin,
		TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_sint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_rsp_player_score(Msg, TrUserData) ->
    e_msg_rsp_player_score(Msg, <<>>, TrUserData).


e_msg_rsp_player_score(#rsp_player_score{uid = F1,
					 score = F2, delta = F3},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int32(TrF3, <<B2/binary, 24>>)
    end.

e_msg_rsp_score(Msg, TrUserData) ->
    e_msg_rsp_score(Msg, <<>>, TrUserData).


e_msg_rsp_score(#rsp_score{status = F1}, Bin,
		TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_rsp_zhuang_end(Msg, TrUserData) ->
    e_msg_rsp_zhuang_end(Msg, <<>>, TrUserData).


e_msg_rsp_zhuang_end(#rsp_zhuang_end{uid = F1,
				     base = F2},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_sint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_notify_dismiss(_Msg, _TrUserData) -> <<>>.

e_msg_rsp_new_player(Msg, TrUserData) ->
    e_msg_rsp_new_player(Msg, <<>>, TrUserData).


e_msg_rsp_new_player(#rsp_new_player{player = F1}, Bin,
		     TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_mfield_rsp_new_player_player(TrF1, <<Bin/binary, 10>>,
				     TrUserData)
    end.

e_msg_rsp_login(Msg, TrUserData) ->
    e_msg_rsp_login(Msg, <<>>, TrUserData).


e_msg_rsp_login(#rsp_login{status = F1, coins = F2,
			   gems = F3, uid = F4, name = F5, logo = F6},
		Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_sint(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_int32(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_int32(TrF3, <<B2/binary, 24>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_int32(TrF4, <<B3/binary, 32>>)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_string(TrF5, <<B4/binary, 42>>)
		end
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     e_type_string(TrF6, <<B5/binary, 50>>)
	   end
    end.

e_msg_req_task_claim(Msg, TrUserData) ->
    e_msg_req_task_claim(Msg, <<>>, TrUserData).


e_msg_req_task_claim(#req_task_claim{id = F1}, Bin,
		     TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_req_create_room(Msg, TrUserData) ->
    e_msg_req_create_room(Msg, <<>>, TrUserData).


e_msg_req_create_room(#req_create_room{round = F1,
				       pay = F2, banker = F3, special = F4,
				       type = F5},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_int32(TrF5, <<B4/binary, 40>>)
    end.

e_msg_rsp_gem_rank(Msg, TrUserData) ->
    e_msg_rsp_gem_rank(Msg, <<>>, TrUserData).


e_msg_rsp_gem_rank(#rsp_gem_rank{players = F1}, Bin,
		   TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_rsp_gem_rank_players(TrF1, Bin, TrUserData)
      end
    end.

e_msg_req_gem_rank(_Msg, _TrUserData) -> <<>>.

e_msg_req_task(_Msg, _TrUserData) -> <<>>.

e_msg_rsp_check_pay(Msg, TrUserData) ->
    e_msg_rsp_check_pay(Msg, <<>>, TrUserData).


e_msg_rsp_check_pay(#rsp_check_pay{status = F1,
				   order_id = F2, coins = F3},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_int32(TrF3, <<B2/binary, 24>>)
	   end
    end.

e_msg_res_check_pay(Msg, TrUserData) ->
    e_msg_res_check_pay(Msg, <<>>, TrUserData).


e_msg_res_check_pay(#res_check_pay{order_id = F1}, Bin,
		    TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_rsp_player_ready(Msg, TrUserData) ->
    e_msg_rsp_player_ready(Msg, <<>>, TrUserData).


e_msg_rsp_player_ready(#rsp_player_ready{uid = F1,
					 type = F2},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>)
    end.

e_msg_rsp_ready(Msg, TrUserData) ->
    e_msg_rsp_ready(Msg, <<>>, TrUserData).


e_msg_rsp_ready(#rsp_ready{status = F1}, Bin,
		TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_sint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_notify_show(Msg, TrUserData) ->
    e_msg_notify_show(Msg, <<>>, TrUserData).


e_msg_notify_show(#notify_show{uid = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_rsp_player_chat(Msg, TrUserData) ->
    e_msg_rsp_player_chat(Msg, <<>>, TrUserData).


e_msg_rsp_player_chat(#rsp_player_chat{msg = F1,
				       url = F2, uid = F3},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 18>>)
		end
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int32(TrF3, <<B2/binary, 24>>)
    end.

e_msg_rsp_result(Msg, TrUserData) ->
    e_msg_rsp_result(Msg, <<>>, TrUserData).


e_msg_rsp_result(#rsp_result{players = F1}, Bin,
		 TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_rsp_result_players(TrF1, Bin, TrUserData)
      end
    end.

e_msg_req_start(_Msg, _TrUserData) -> <<>>.

e_msg_req_heart(_Msg, _TrUserData) -> <<>>.

e_msg_rsp_chat(Msg, TrUserData) ->
    e_msg_rsp_chat(Msg, <<>>, TrUserData).


e_msg_rsp_chat(#rsp_chat{status = F1}, Bin,
	       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_rsp_save_data(Msg, TrUserData) ->
    e_msg_rsp_save_data(Msg, <<>>, TrUserData).


e_msg_rsp_save_data(#rsp_save_data{status = F1}, Bin,
		    TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_req_save_data(Msg, TrUserData) ->
    e_msg_req_save_data(Msg, <<>>, TrUserData).


e_msg_req_save_data(#req_save_data{data = F1}, Bin,
		    TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_req_coins_rank(_Msg, _TrUserData) -> <<>>.

e_msg_rsp_task(Msg, TrUserData) ->
    e_msg_rsp_task(Msg, <<>>, TrUserData).


e_msg_rsp_task(#rsp_task{tasks = F1}, Bin,
	       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true -> e_field_rsp_task_tasks(TrF1, Bin, TrUserData)
      end
    end.

e_msg_notify_all_show(_Msg, _TrUserData) -> <<>>.

e_msg_req_score(Msg, TrUserData) ->
    e_msg_req_score(Msg, <<>>, TrUserData).


e_msg_req_score(#req_score{score = F1}, Bin,
		TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_req_leave(Msg, TrUserData) ->
    e_msg_req_leave(Msg, <<>>, TrUserData).


e_msg_req_leave(#req_leave{uid = F1}, Bin,
		TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_rsp_content(Msg, TrUserData) ->
    e_msg_rsp_content(Msg, <<>>, TrUserData).


e_msg_rsp_content(#rsp_content{status = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_req_content(Msg, TrUserData) ->
    e_msg_req_content(Msg, <<>>, TrUserData).


e_msg_req_content(#req_content{weixin = F1, text = F2},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>)
    end.

e_msg_req_chat(Msg, TrUserData) ->
    e_msg_req_chat(Msg, <<>>, TrUserData).


e_msg_req_chat(#req_chat{msg = F1, voice = F2}, Bin,
	       TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true -> e_field_req_chat_voice(TrF2, B1, TrUserData)
      end
    end.

e_msg_rsp_pub(Msg, TrUserData) ->
    e_msg_rsp_pub(Msg, <<>>, TrUserData).


e_msg_rsp_pub(#rsp_pub{status = F1, pub = F2}, Bin,
	      TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_sint(TrF1, <<Bin/binary, 8>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_string(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_req_pub(_Msg, _TrUserData) -> <<>>.

e_mfield_rsp_coins_rank_players(Msg, Bin, TrUserData) ->
    SubBin = e_msg_pb_rank_player(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rsp_coins_rank_players([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_rsp_coins_rank_players(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_rsp_coins_rank_players(Rest, Bin3, TrUserData);
e_field_rsp_coins_rank_players([], Bin, _TrUserData) ->
    Bin.

e_mfield_pb_player_pai(Msg, Bin, TrUserData) ->
    SubBin = e_msg_pb_unit(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_pb_player_pai([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_mfield_pb_player_pai(id(Elem, TrUserData),
				  Bin2, TrUserData),
    e_field_pb_player_pai(Rest, Bin3, TrUserData);
e_field_pb_player_pai([], Bin, _TrUserData) -> Bin.

e_mfield_rsp_join_players(Msg, Bin, TrUserData) ->
    SubBin = e_msg_pb_player(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rsp_join_players([Elem | Rest], Bin,
			 TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_rsp_join_players(id(Elem, TrUserData),
				     Bin2, TrUserData),
    e_field_rsp_join_players(Rest, Bin3, TrUserData);
e_field_rsp_join_players([], Bin, _TrUserData) -> Bin.

e_mfield_rsp_join_room_info(Msg, Bin, TrUserData) ->
    SubBin = e_msg_pb_room_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rsp_new_player_player(Msg, Bin, TrUserData) ->
    SubBin = e_msg_pb_player(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rsp_gem_rank_players(Msg, Bin, TrUserData) ->
    SubBin = e_msg_pb_rank_player(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rsp_gem_rank_players([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_rsp_gem_rank_players(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_rsp_gem_rank_players(Rest, Bin3, TrUserData);
e_field_rsp_gem_rank_players([], Bin, _TrUserData) ->
    Bin.

e_mfield_rsp_result_players(Msg, Bin, TrUserData) ->
    SubBin = e_msg_pb_player(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rsp_result_players([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_rsp_result_players(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_rsp_result_players(Rest, Bin3, TrUserData);
e_field_rsp_result_players([], Bin, _TrUserData) -> Bin.

e_mfield_rsp_task_tasks(Msg, Bin, TrUserData) ->
    SubBin = e_msg_pb_task(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rsp_task_tasks([Elem | Rest], Bin,
		       TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_rsp_task_tasks(id(Elem, TrUserData),
				   Bin2, TrUserData),
    e_field_rsp_task_tasks(Rest, Bin3, TrUserData);
e_field_rsp_task_tasks([], Bin, _TrUserData) -> Bin.

e_field_req_chat_voice([Elem | Rest], Bin,
		       TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_req_chat_voice(Rest, Bin3, TrUserData);
e_field_req_chat_voice([], Bin, _TrUserData) -> Bin.



e_type_sint(Value, Bin) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin) ->
    e_varint(Value * -2 - 1, Bin).

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      req_join -> d_msg_req_join(Bin, TrUserData);
      req_login -> d_msg_req_login(Bin, TrUserData);
      rsp_create_room ->
	  d_msg_rsp_create_room(Bin, TrUserData);
      pb_rank_player -> d_msg_pb_rank_player(Bin, TrUserData);
      rsp_coins_rank -> d_msg_rsp_coins_rank(Bin, TrUserData);
      rsp_pay -> d_msg_rsp_pay(Bin, TrUserData);
      req_pay -> d_msg_req_pay(Bin, TrUserData);
      req_ready -> d_msg_req_ready(Bin, TrUserData);
      rsp_show -> d_msg_rsp_show(Bin, TrUserData);
      req_zhuang -> d_msg_req_zhuang(Bin, TrUserData);
      pb_unit -> d_msg_pb_unit(Bin, TrUserData);
      rsp_game_start -> d_msg_rsp_game_start(Bin, TrUserData);
      rsp_start -> d_msg_rsp_start(Bin, TrUserData);
      rsp_heart -> d_msg_rsp_heart(Bin, TrUserData);
      rsp_dismiss -> d_msg_rsp_dismiss(Bin, TrUserData);
      req_dismiss -> d_msg_req_dismiss(Bin, TrUserData);
      rsp_get_data -> d_msg_rsp_get_data(Bin, TrUserData);
      req_get_data -> d_msg_req_get_data(Bin, TrUserData);
      pb_room_info -> d_msg_pb_room_info(Bin, TrUserData);
      pb_player -> d_msg_pb_player(Bin, TrUserData);
      rsp_join -> d_msg_rsp_join(Bin, TrUserData);
      rsp_buy_gem -> d_msg_rsp_buy_gem(Bin, TrUserData);
      req_buy_gem -> d_msg_req_buy_gem(Bin, TrUserData);
      rsp_task_claim -> d_msg_rsp_task_claim(Bin, TrUserData);
      pb_task -> d_msg_pb_task(Bin, TrUserData);
      req_show -> d_msg_req_show(Bin, TrUserData);
      rsp_player_zhuang ->
	  d_msg_rsp_player_zhuang(Bin, TrUserData);
      rsp_zhuang -> d_msg_rsp_zhuang(Bin, TrUserData);
      rsp_player_leave ->
	  d_msg_rsp_player_leave(Bin, TrUserData);
      rsp_leave -> d_msg_rsp_leave(Bin, TrUserData);
      rsp_player_score ->
	  d_msg_rsp_player_score(Bin, TrUserData);
      rsp_score -> d_msg_rsp_score(Bin, TrUserData);
      rsp_zhuang_end -> d_msg_rsp_zhuang_end(Bin, TrUserData);
      notify_dismiss -> d_msg_notify_dismiss(Bin, TrUserData);
      rsp_new_player -> d_msg_rsp_new_player(Bin, TrUserData);
      rsp_login -> d_msg_rsp_login(Bin, TrUserData);
      req_task_claim -> d_msg_req_task_claim(Bin, TrUserData);
      req_create_room ->
	  d_msg_req_create_room(Bin, TrUserData);
      rsp_gem_rank -> d_msg_rsp_gem_rank(Bin, TrUserData);
      req_gem_rank -> d_msg_req_gem_rank(Bin, TrUserData);
      req_task -> d_msg_req_task(Bin, TrUserData);
      rsp_check_pay -> d_msg_rsp_check_pay(Bin, TrUserData);
      res_check_pay -> d_msg_res_check_pay(Bin, TrUserData);
      rsp_player_ready ->
	  d_msg_rsp_player_ready(Bin, TrUserData);
      rsp_ready -> d_msg_rsp_ready(Bin, TrUserData);
      notify_show -> d_msg_notify_show(Bin, TrUserData);
      rsp_player_chat ->
	  d_msg_rsp_player_chat(Bin, TrUserData);
      rsp_result -> d_msg_rsp_result(Bin, TrUserData);
      req_start -> d_msg_req_start(Bin, TrUserData);
      req_heart -> d_msg_req_heart(Bin, TrUserData);
      rsp_chat -> d_msg_rsp_chat(Bin, TrUserData);
      rsp_save_data -> d_msg_rsp_save_data(Bin, TrUserData);
      req_save_data -> d_msg_req_save_data(Bin, TrUserData);
      req_coins_rank -> d_msg_req_coins_rank(Bin, TrUserData);
      rsp_task -> d_msg_rsp_task(Bin, TrUserData);
      notify_all_show ->
	  d_msg_notify_all_show(Bin, TrUserData);
      req_score -> d_msg_req_score(Bin, TrUserData);
      req_leave -> d_msg_req_leave(Bin, TrUserData);
      rsp_content -> d_msg_rsp_content(Bin, TrUserData);
      req_content -> d_msg_req_content(Bin, TrUserData);
      req_chat -> d_msg_req_chat(Bin, TrUserData);
      rsp_pub -> d_msg_rsp_pub(Bin, TrUserData);
      req_pub -> d_msg_req_pub(Bin, TrUserData)
    end.



d_msg_req_join(Bin, TrUserData) ->
    dfp_read_field_def_req_join(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_req_join(<<8, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_req_join_id(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_req_join(<<>>, 0, 0, F1, _) ->
    #req_join{id = F1};
dfp_read_field_def_req_join(Other, Z1, Z2, F1,
			    TrUserData) ->
    dg_read_field_def_req_join(Other, Z1, Z2, F1,
			       TrUserData).

dg_read_field_def_req_join(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_join(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
dg_read_field_def_req_join(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_req_join_id(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_req_join(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_req_join(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_req_join(Rest, 0, 0, F1,
					       TrUserData);
	    5 -> skip_32_req_join(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_req_join(<<>>, 0, 0, F1, _) ->
    #req_join{id = F1}.

d_field_req_join_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, TrUserData)
    when N < 57 ->
    d_field_req_join_id(Rest, N + 7, X bsl N + Acc, F1,
			TrUserData);
d_field_req_join_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_req_join(Rest, 0, 0, NewFValue,
				TrUserData).


skip_varint_req_join(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    skip_varint_req_join(Rest, Z1, Z2, F1, TrUserData);
skip_varint_req_join(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    dfp_read_field_def_req_join(Rest, Z1, Z2, F1,
				TrUserData).


skip_length_delimited_req_join(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_join(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_req_join(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_join(Rest2, 0, 0, F1,
				TrUserData).


skip_32_req_join(<<_:32, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_req_join(Rest, Z1, Z2, F1,
				TrUserData).


skip_64_req_join(<<_:64, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_req_join(Rest, Z1, Z2, F1,
				TrUserData).


d_msg_req_login(Bin, TrUserData) ->
    dfp_read_field_def_req_login(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_req_login(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, TrUserData) ->
    d_field_req_login_code(Rest, Z1, Z2, F1, F2, F3,
			   TrUserData);
dfp_read_field_def_req_login(<<16, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, TrUserData) ->
    d_field_req_login_channel(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData);
dfp_read_field_def_req_login(<<24, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, TrUserData) ->
    d_field_req_login_user_id(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData);
dfp_read_field_def_req_login(<<>>, 0, 0, F1, F2, F3,
			     _) ->
    #req_login{code = F1, channel = F2, user_id = F3};
dfp_read_field_def_req_login(Other, Z1, Z2, F1, F2, F3,
			     TrUserData) ->
    dg_read_field_def_req_login(Other, Z1, Z2, F1, F2, F3,
				TrUserData).

dg_read_field_def_req_login(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_login(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
dg_read_field_def_req_login(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_req_login_code(Rest, 0, 0, F1, F2, F3,
				 TrUserData);
      16 ->
	  d_field_req_login_channel(Rest, 0, 0, F1, F2, F3,
				    TrUserData);
      24 ->
	  d_field_req_login_user_id(Rest, 0, 0, F1, F2, F3,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_req_login(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
	    1 ->
		skip_64_req_login(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_req_login(Rest, 0, 0, F1, F2, F3,
						TrUserData);
	    5 ->
		skip_32_req_login(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_req_login(<<>>, 0, 0, F1, F2, F3,
			    _) ->
    #req_login{code = F1, channel = F2, user_id = F3}.

d_field_req_login_code(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_req_login_code(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, TrUserData);
d_field_req_login_code(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_req_login(Rest2, 0, 0, NewFValue, F2,
				 F3, TrUserData).


d_field_req_login_channel(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_req_login_channel(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, TrUserData);
d_field_req_login_channel(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, _, F3, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_req_login(Rest, 0, 0, F1, NewFValue,
				 F3, TrUserData).


d_field_req_login_user_id(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_req_login_user_id(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, TrUserData);
d_field_req_login_user_id(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_req_login(Rest, 0, 0, F1, F2,
				 NewFValue, TrUserData).


skip_varint_req_login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, TrUserData) ->
    skip_varint_req_login(Rest, Z1, Z2, F1, F2, F3,
			  TrUserData);
skip_varint_req_login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, TrUserData) ->
    dfp_read_field_def_req_login(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData).


skip_length_delimited_req_login(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_login(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_req_login(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_login(Rest2, 0, 0, F1, F2, F3,
				 TrUserData).


skip_32_req_login(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, TrUserData) ->
    dfp_read_field_def_req_login(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData).


skip_64_req_login(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, TrUserData) ->
    dfp_read_field_def_req_login(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData).


d_msg_rsp_create_room(Bin, TrUserData) ->
    dfp_read_field_def_rsp_create_room(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_create_room(<<8, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rsp_create_room_status(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
dfp_read_field_def_rsp_create_room(<<16, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rsp_create_room_room_id(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData);
dfp_read_field_def_rsp_create_room(<<24, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rsp_create_room_coins(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData);
dfp_read_field_def_rsp_create_room(<<>>, 0, 0, F1, F2,
				   F3, _) ->
    #rsp_create_room{status = F1, room_id = F2, coins = F3};
dfp_read_field_def_rsp_create_room(Other, Z1, Z2, F1,
				   F2, F3, TrUserData) ->
    dg_read_field_def_rsp_create_room(Other, Z1, Z2, F1, F2,
				      F3, TrUserData).

dg_read_field_def_rsp_create_room(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_create_room(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_rsp_create_room(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_create_room_status(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
      16 ->
	  d_field_rsp_create_room_room_id(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
      24 ->
	  d_field_rsp_create_room_coins(Rest, 0, 0, F1, F2, F3,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_create_room(Rest, 0, 0, F1, F2, F3,
					    TrUserData);
	    1 ->
		skip_64_rsp_create_room(Rest, 0, 0, F1, F2, F3,
					TrUserData);
	    2 ->
		skip_length_delimited_rsp_create_room(Rest, 0, 0, F1,
						      F2, F3, TrUserData);
	    5 ->
		skip_32_rsp_create_room(Rest, 0, 0, F1, F2, F3,
					TrUserData)
	  end
    end;
dg_read_field_def_rsp_create_room(<<>>, 0, 0, F1, F2,
				  F3, _) ->
    #rsp_create_room{status = F1, room_id = F2, coins = F3}.

d_field_rsp_create_room_status(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rsp_create_room_status(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rsp_create_room_status(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, F3, TrUserData) ->
    ZValue = X bsl N + Acc,
    NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
		   true -> -(ZValue + 1 bsr 1)
		end,
    dfp_read_field_def_rsp_create_room(Rest, 0, 0,
				       NewFValue, F2, F3, TrUserData).


d_field_rsp_create_room_room_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rsp_create_room_room_id(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rsp_create_room_room_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, _, F3, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_create_room(Rest, 0, 0, F1,
				       NewFValue, F3, TrUserData).


d_field_rsp_create_room_coins(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rsp_create_room_coins(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rsp_create_room_coins(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_create_room(Rest, 0, 0, F1, F2,
				       NewFValue, TrUserData).


skip_varint_rsp_create_room(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_rsp_create_room(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
skip_varint_rsp_create_room(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rsp_create_room(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


skip_length_delimited_rsp_create_room(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_create_room(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3,
					  TrUserData);
skip_length_delimited_rsp_create_room(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_create_room(Rest2, 0, 0, F1, F2,
				       F3, TrUserData).


skip_32_rsp_create_room(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rsp_create_room(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


skip_64_rsp_create_room(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rsp_create_room(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


d_msg_pb_rank_player(Bin, TrUserData) ->
    dfp_read_field_def_pb_rank_player(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_pb_rank_player(<<10, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_pb_rank_player_name(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_pb_rank_player(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_pb_rank_player_logo(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_pb_rank_player(<<24, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_pb_rank_player_num(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
dfp_read_field_def_pb_rank_player(<<>>, 0, 0, F1, F2,
				  F3, _) ->
    #pb_rank_player{name = F1, logo = F2, num = F3};
dfp_read_field_def_pb_rank_player(Other, Z1, Z2, F1, F2,
				  F3, TrUserData) ->
    dg_read_field_def_pb_rank_player(Other, Z1, Z2, F1, F2,
				     F3, TrUserData).

dg_read_field_def_pb_rank_player(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_pb_rank_player(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_pb_rank_player(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_pb_rank_player_name(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      18 ->
	  d_field_pb_rank_player_logo(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      24 ->
	  d_field_pb_rank_player_num(Rest, 0, 0, F1, F2, F3,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_pb_rank_player(Rest, 0, 0, F1, F2, F3,
					   TrUserData);
	    1 ->
		skip_64_pb_rank_player(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
	    2 ->
		skip_length_delimited_pb_rank_player(Rest, 0, 0, F1, F2,
						     F3, TrUserData);
	    5 ->
		skip_32_pb_rank_player(Rest, 0, 0, F1, F2, F3,
				       TrUserData)
	  end
    end;
dg_read_field_def_pb_rank_player(<<>>, 0, 0, F1, F2, F3,
				 _) ->
    #pb_rank_player{name = F1, logo = F2, num = F3}.

d_field_pb_rank_player_name(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_pb_rank_player_name(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_pb_rank_player_name(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_pb_rank_player(Rest2, 0, 0,
				      NewFValue, F2, F3, TrUserData).


d_field_pb_rank_player_logo(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_pb_rank_player_logo(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_pb_rank_player_logo(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_pb_rank_player(Rest2, 0, 0, F1,
				      NewFValue, F3, TrUserData).


d_field_pb_rank_player_num(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_pb_rank_player_num(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, TrUserData);
d_field_pb_rank_player_num(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_pb_rank_player(Rest, 0, 0, F1, F2,
				      NewFValue, TrUserData).


skip_varint_pb_rank_player(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_pb_rank_player(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
skip_varint_pb_rank_player(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_pb_rank_player(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


skip_length_delimited_pb_rank_player(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_pb_rank_player(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_pb_rank_player(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_pb_rank_player(Rest2, 0, 0, F1, F2,
				      F3, TrUserData).


skip_32_pb_rank_player(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, TrUserData) ->
    dfp_read_field_def_pb_rank_player(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


skip_64_pb_rank_player(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, TrUserData) ->
    dfp_read_field_def_pb_rank_player(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


d_msg_rsp_coins_rank(Bin, TrUserData) ->
    dfp_read_field_def_rsp_coins_rank(Bin, 0, 0,
				      id([], TrUserData), TrUserData).

dfp_read_field_def_rsp_coins_rank(<<10, Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    d_field_rsp_coins_rank_players(Rest, Z1, Z2, F1,
				   TrUserData);
dfp_read_field_def_rsp_coins_rank(<<>>, 0, 0, F1,
				  TrUserData) ->
    #rsp_coins_rank{players =
			lists_reverse(F1, TrUserData)};
dfp_read_field_def_rsp_coins_rank(Other, Z1, Z2, F1,
				  TrUserData) ->
    dg_read_field_def_rsp_coins_rank(Other, Z1, Z2, F1,
				     TrUserData).

dg_read_field_def_rsp_coins_rank(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_coins_rank(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
dg_read_field_def_rsp_coins_rank(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rsp_coins_rank_players(Rest, 0, 0, F1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_coins_rank(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_rsp_coins_rank(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rsp_coins_rank(Rest, 0, 0, F1,
						     TrUserData);
	    5 -> skip_32_rsp_coins_rank(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rsp_coins_rank(<<>>, 0, 0, F1,
				 TrUserData) ->
    #rsp_coins_rank{players =
			lists_reverse(F1, TrUserData)}.

d_field_rsp_coins_rank_players(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rsp_coins_rank_players(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
d_field_rsp_coins_rank_players(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_pb_rank_player(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rsp_coins_rank(Rest2, 0, 0,
				      cons(NewFValue, F1, TrUserData),
				      TrUserData).


skip_varint_rsp_coins_rank(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    skip_varint_rsp_coins_rank(Rest, Z1, Z2, F1,
			       TrUserData);
skip_varint_rsp_coins_rank(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_rsp_coins_rank(Rest, Z1, Z2, F1,
				      TrUserData).


skip_length_delimited_rsp_coins_rank(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_coins_rank(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rsp_coins_rank(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_coins_rank(Rest2, 0, 0, F1,
				      TrUserData).


skip_32_rsp_coins_rank(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_rsp_coins_rank(Rest, Z1, Z2, F1,
				      TrUserData).


skip_64_rsp_coins_rank(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_rsp_coins_rank(Rest, Z1, Z2, F1,
				      TrUserData).


d_msg_rsp_pay(Bin, TrUserData) ->
    dfp_read_field_def_rsp_pay(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_pay(<<8, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_rsp_pay_status(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, TrUserData);
dfp_read_field_def_rsp_pay(<<16, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_rsp_pay_coins(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, TrUserData);
dfp_read_field_def_rsp_pay(<<26, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_rsp_pay_nonce_str(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, TrUserData);
dfp_read_field_def_rsp_pay(<<34, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_rsp_pay_sign(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8, TrUserData);
dfp_read_field_def_rsp_pay(<<42, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_rsp_pay_err_code_des(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_rsp_pay(<<50, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_rsp_pay_trade_type(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, TrUserData);
dfp_read_field_def_rsp_pay(<<58, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_rsp_pay_prepay_id(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, TrUserData);
dfp_read_field_def_rsp_pay(<<66, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_rsp_pay_order_id(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, TrUserData);
dfp_read_field_def_rsp_pay(<<>>, 0, 0, F1, F2, F3, F4,
			   F5, F6, F7, F8, _) ->
    #rsp_pay{status = F1, coins = F2, nonce_str = F3,
	     sign = F4, err_code_des = F5, trade_type = F6,
	     prepay_id = F7, order_id = F8};
dfp_read_field_def_rsp_pay(Other, Z1, Z2, F1, F2, F3,
			   F4, F5, F6, F7, F8, TrUserData) ->
    dg_read_field_def_rsp_pay(Other, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, TrUserData).

dg_read_field_def_rsp_pay(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_pay(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
dg_read_field_def_rsp_pay(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_pay_status(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, TrUserData);
      16 ->
	  d_field_rsp_pay_coins(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, TrUserData);
      26 ->
	  d_field_rsp_pay_nonce_str(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, TrUserData);
      34 ->
	  d_field_rsp_pay_sign(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       F7, F8, TrUserData);
      42 ->
	  d_field_rsp_pay_err_code_des(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, TrUserData);
      50 ->
	  d_field_rsp_pay_trade_type(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, TrUserData);
      58 ->
	  d_field_rsp_pay_prepay_id(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, TrUserData);
      66 ->
	  d_field_rsp_pay_order_id(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_pay(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7, F8, TrUserData);
	    1 ->
		skip_64_rsp_pay(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				F8, TrUserData);
	    2 ->
		skip_length_delimited_rsp_pay(Rest, 0, 0, F1, F2, F3,
					      F4, F5, F6, F7, F8, TrUserData);
	    5 ->
		skip_32_rsp_pay(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				F8, TrUserData)
	  end
    end;
dg_read_field_def_rsp_pay(<<>>, 0, 0, F1, F2, F3, F4,
			  F5, F6, F7, F8, _) ->
    #rsp_pay{status = F1, coins = F2, nonce_str = F3,
	     sign = F4, err_code_des = F5, trade_type = F6,
	     prepay_id = F7, order_id = F8}.

d_field_rsp_pay_status(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_rsp_pay_status(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_rsp_pay_status(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_pay(Rest, 0, 0, NewFValue, F2,
			       F3, F4, F5, F6, F7, F8, TrUserData).


d_field_rsp_pay_coins(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_rsp_pay_coins(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_rsp_pay_coins(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _, F3, F4, F5, F6, F7, F8, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_pay(Rest, 0, 0, F1, NewFValue,
			       F3, F4, F5, F6, F7, F8, TrUserData).


d_field_rsp_pay_nonce_str(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_rsp_pay_nonce_str(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_rsp_pay_nonce_str(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, _, F4, F5, F6, F7, F8, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_rsp_pay(Rest2, 0, 0, F1, F2,
			       NewFValue, F4, F5, F6, F7, F8, TrUserData).


d_field_rsp_pay_sign(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_rsp_pay_sign(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, F7, F8, TrUserData);
d_field_rsp_pay_sign(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, _, F5, F6, F7, F8, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_rsp_pay(Rest2, 0, 0, F1, F2, F3,
			       NewFValue, F5, F6, F7, F8, TrUserData).


d_field_rsp_pay_err_code_des(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_rsp_pay_err_code_des(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_rsp_pay_err_code_des(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, _, F6, F7, F8,
			     TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_rsp_pay(Rest2, 0, 0, F1, F2, F3, F4,
			       NewFValue, F6, F7, F8, TrUserData).


d_field_rsp_pay_trade_type(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_rsp_pay_trade_type(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_rsp_pay_trade_type(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, _, F7, F8, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_rsp_pay(Rest2, 0, 0, F1, F2, F3, F4,
			       F5, NewFValue, F7, F8, TrUserData).


d_field_rsp_pay_prepay_id(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_rsp_pay_prepay_id(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_rsp_pay_prepay_id(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, _, F8, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_rsp_pay(Rest2, 0, 0, F1, F2, F3, F4,
			       F5, F6, NewFValue, F8, TrUserData).


d_field_rsp_pay_order_id(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_rsp_pay_order_id(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_rsp_pay_order_id(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_rsp_pay(Rest2, 0, 0, F1, F2, F3, F4,
			       F5, F6, F7, NewFValue, TrUserData).


skip_varint_rsp_pay(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    skip_varint_rsp_pay(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, F7, F8, TrUserData);
skip_varint_rsp_pay(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    dfp_read_field_def_rsp_pay(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, TrUserData).


skip_length_delimited_rsp_pay(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
			      TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_pay(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  TrUserData);
skip_length_delimited_rsp_pay(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_pay(Rest2, 0, 0, F1, F2, F3, F4,
			       F5, F6, F7, F8, TrUserData).


skip_32_rsp_pay(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		F3, F4, F5, F6, F7, F8, TrUserData) ->
    dfp_read_field_def_rsp_pay(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, TrUserData).


skip_64_rsp_pay(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		F3, F4, F5, F6, F7, F8, TrUserData) ->
    dfp_read_field_def_rsp_pay(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, TrUserData).


d_msg_req_pay(Bin, TrUserData) ->
    dfp_read_field_def_req_pay(Bin, 0, 0,
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_req_pay(<<8, Rest/binary>>, Z1, Z2,
			   F1, TrUserData) ->
    d_field_req_pay_rmb(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_req_pay(<<>>, 0, 0, F1, _) ->
    #req_pay{rmb = F1};
dfp_read_field_def_req_pay(Other, Z1, Z2, F1,
			   TrUserData) ->
    dg_read_field_def_req_pay(Other, Z1, Z2, F1,
			      TrUserData).

dg_read_field_def_req_pay(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_pay(Rest, N + 7, X bsl N + Acc,
			      F1, TrUserData);
dg_read_field_def_req_pay(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_req_pay_rmb(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_req_pay(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_req_pay(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_req_pay(Rest, 0, 0, F1,
					      TrUserData);
	    5 -> skip_32_req_pay(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_req_pay(<<>>, 0, 0, F1, _) ->
    #req_pay{rmb = F1}.

d_field_req_pay_rmb(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, TrUserData)
    when N < 57 ->
    d_field_req_pay_rmb(Rest, N + 7, X bsl N + Acc, F1,
			TrUserData);
d_field_req_pay_rmb(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_req_pay(Rest, 0, 0, NewFValue,
			       TrUserData).


skip_varint_req_pay(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, TrUserData) ->
    skip_varint_req_pay(Rest, Z1, Z2, F1, TrUserData);
skip_varint_req_pay(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, TrUserData) ->
    dfp_read_field_def_req_pay(Rest, Z1, Z2, F1,
			       TrUserData).


skip_length_delimited_req_pay(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_pay(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
skip_length_delimited_req_pay(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_pay(Rest2, 0, 0, F1, TrUserData).


skip_32_req_pay(<<_:32, Rest/binary>>, Z1, Z2, F1,
		TrUserData) ->
    dfp_read_field_def_req_pay(Rest, Z1, Z2, F1,
			       TrUserData).


skip_64_req_pay(<<_:64, Rest/binary>>, Z1, Z2, F1,
		TrUserData) ->
    dfp_read_field_def_req_pay(Rest, Z1, Z2, F1,
			       TrUserData).


d_msg_req_ready(Bin, TrUserData) ->
    dfp_read_field_def_req_ready(Bin, 0, 0,
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_req_ready(<<8, Rest/binary>>, Z1, Z2,
			     F1, TrUserData) ->
    d_field_req_ready_type(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_req_ready(<<>>, 0, 0, F1, _) ->
    #req_ready{type = F1};
dfp_read_field_def_req_ready(Other, Z1, Z2, F1,
			     TrUserData) ->
    dg_read_field_def_req_ready(Other, Z1, Z2, F1,
				TrUserData).

dg_read_field_def_req_ready(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_ready(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
dg_read_field_def_req_ready(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_req_ready_type(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_req_ready(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_req_ready(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_req_ready(Rest, 0, 0, F1,
						TrUserData);
	    5 -> skip_32_req_ready(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_req_ready(<<>>, 0, 0, F1, _) ->
    #req_ready{type = F1}.

d_field_req_ready_type(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, TrUserData)
    when N < 57 ->
    d_field_req_ready_type(Rest, N + 7, X bsl N + Acc, F1,
			   TrUserData);
d_field_req_ready_type(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_req_ready(Rest, 0, 0, NewFValue,
				 TrUserData).


skip_varint_req_ready(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    skip_varint_req_ready(Rest, Z1, Z2, F1, TrUserData);
skip_varint_req_ready(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    dfp_read_field_def_req_ready(Rest, Z1, Z2, F1,
				 TrUserData).


skip_length_delimited_req_ready(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_ready(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_req_ready(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_ready(Rest2, 0, 0, F1,
				 TrUserData).


skip_32_req_ready(<<_:32, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_req_ready(Rest, Z1, Z2, F1,
				 TrUserData).


skip_64_req_ready(<<_:64, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_req_ready(Rest, Z1, Z2, F1,
				 TrUserData).


d_msg_rsp_show(Bin, TrUserData) ->
    dfp_read_field_def_rsp_show(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_show(<<8, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_rsp_show_status(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_rsp_show(<<>>, 0, 0, F1, _) ->
    #rsp_show{status = F1};
dfp_read_field_def_rsp_show(Other, Z1, Z2, F1,
			    TrUserData) ->
    dg_read_field_def_rsp_show(Other, Z1, Z2, F1,
			       TrUserData).

dg_read_field_def_rsp_show(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_show(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
dg_read_field_def_rsp_show(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_show_status(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rsp_show(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_rsp_show(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rsp_show(Rest, 0, 0, F1,
					       TrUserData);
	    5 -> skip_32_rsp_show(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rsp_show(<<>>, 0, 0, F1, _) ->
    #rsp_show{status = F1}.

d_field_rsp_show_status(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rsp_show_status(Rest, N + 7, X bsl N + Acc, F1,
			    TrUserData);
d_field_rsp_show_status(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_show(Rest, 0, 0, NewFValue,
				TrUserData).


skip_varint_rsp_show(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    skip_varint_rsp_show(Rest, Z1, Z2, F1, TrUserData);
skip_varint_rsp_show(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    dfp_read_field_def_rsp_show(Rest, Z1, Z2, F1,
				TrUserData).


skip_length_delimited_rsp_show(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_show(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rsp_show(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_show(Rest2, 0, 0, F1,
				TrUserData).


skip_32_rsp_show(<<_:32, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_rsp_show(Rest, Z1, Z2, F1,
				TrUserData).


skip_64_rsp_show(<<_:64, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_rsp_show(Rest, Z1, Z2, F1,
				TrUserData).


d_msg_req_zhuang(Bin, TrUserData) ->
    dfp_read_field_def_req_zhuang(Bin, 0, 0,
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_req_zhuang(<<8, Rest/binary>>, Z1,
			      Z2, F1, TrUserData) ->
    d_field_req_zhuang_base(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_req_zhuang(<<>>, 0, 0, F1, _) ->
    #req_zhuang{base = F1};
dfp_read_field_def_req_zhuang(Other, Z1, Z2, F1,
			      TrUserData) ->
    dg_read_field_def_req_zhuang(Other, Z1, Z2, F1,
				 TrUserData).

dg_read_field_def_req_zhuang(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_zhuang(Rest, N + 7, X bsl N + Acc,
				 F1, TrUserData);
dg_read_field_def_req_zhuang(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_req_zhuang_base(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_req_zhuang(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_req_zhuang(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_req_zhuang(Rest, 0, 0, F1,
						 TrUserData);
	    5 -> skip_32_req_zhuang(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_req_zhuang(<<>>, 0, 0, F1, _) ->
    #req_zhuang{base = F1}.

d_field_req_zhuang_base(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, TrUserData)
    when N < 57 ->
    d_field_req_zhuang_base(Rest, N + 7, X bsl N + Acc, F1,
			    TrUserData);
d_field_req_zhuang_base(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, TrUserData) ->
    ZValue = X bsl N + Acc,
    NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
		   true -> -(ZValue + 1 bsr 1)
		end,
    dfp_read_field_def_req_zhuang(Rest, 0, 0, NewFValue,
				  TrUserData).


skip_varint_req_zhuang(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, TrUserData) ->
    skip_varint_req_zhuang(Rest, Z1, Z2, F1, TrUserData);
skip_varint_req_zhuang(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, TrUserData) ->
    dfp_read_field_def_req_zhuang(Rest, Z1, Z2, F1,
				  TrUserData).


skip_length_delimited_req_zhuang(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_zhuang(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
skip_length_delimited_req_zhuang(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_zhuang(Rest2, 0, 0, F1,
				  TrUserData).


skip_32_req_zhuang(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   TrUserData) ->
    dfp_read_field_def_req_zhuang(Rest, Z1, Z2, F1,
				  TrUserData).


skip_64_req_zhuang(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   TrUserData) ->
    dfp_read_field_def_req_zhuang(Rest, Z1, Z2, F1,
				  TrUserData).


d_msg_pb_unit(Bin, TrUserData) ->
    dfp_read_field_def_pb_unit(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_pb_unit(<<8, Rest/binary>>, Z1, Z2,
			   F1, F2, TrUserData) ->
    d_field_pb_unit_type(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_pb_unit(<<16, Rest/binary>>, Z1, Z2,
			   F1, F2, TrUserData) ->
    d_field_pb_unit_num(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_pb_unit(<<>>, 0, 0, F1, F2, _) ->
    #pb_unit{type = F1, num = F2};
dfp_read_field_def_pb_unit(Other, Z1, Z2, F1, F2,
			   TrUserData) ->
    dg_read_field_def_pb_unit(Other, Z1, Z2, F1, F2,
			      TrUserData).

dg_read_field_def_pb_unit(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_pb_unit(Rest, N + 7, X bsl N + Acc,
			      F1, F2, TrUserData);
dg_read_field_def_pb_unit(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_pb_unit_type(Rest, 0, 0, F1, F2, TrUserData);
      16 ->
	  d_field_pb_unit_num(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_pb_unit(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_pb_unit(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_pb_unit(Rest, 0, 0, F1, F2,
					      TrUserData);
	    5 -> skip_32_pb_unit(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_pb_unit(<<>>, 0, 0, F1, F2, _) ->
    #pb_unit{type = F1, num = F2}.

d_field_pb_unit_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, TrUserData)
    when N < 57 ->
    d_field_pb_unit_type(Rest, N + 7, X bsl N + Acc, F1, F2,
			 TrUserData);
d_field_pb_unit_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_pb_unit(Rest, 0, 0, NewFValue, F2,
			       TrUserData).


d_field_pb_unit_num(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, TrUserData)
    when N < 57 ->
    d_field_pb_unit_num(Rest, N + 7, X bsl N + Acc, F1, F2,
			TrUserData);
d_field_pb_unit_num(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_pb_unit(Rest, 0, 0, F1, NewFValue,
			       TrUserData).


skip_varint_pb_unit(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, TrUserData) ->
    skip_varint_pb_unit(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_pb_unit(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, TrUserData) ->
    dfp_read_field_def_pb_unit(Rest, Z1, Z2, F1, F2,
			       TrUserData).


skip_length_delimited_pb_unit(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_pb_unit(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_pb_unit(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_pb_unit(Rest2, 0, 0, F1, F2,
			       TrUserData).


skip_32_pb_unit(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		TrUserData) ->
    dfp_read_field_def_pb_unit(Rest, Z1, Z2, F1, F2,
			       TrUserData).


skip_64_pb_unit(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		TrUserData) ->
    dfp_read_field_def_pb_unit(Rest, Z1, Z2, F1, F2,
			       TrUserData).


d_msg_rsp_game_start(Bin, TrUserData) ->
    dfp_read_field_def_rsp_game_start(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_game_start(<<8, Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_rsp_game_start_uid(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_rsp_game_start(<<16, Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_rsp_game_start_round(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_rsp_game_start(<<>>, 0, 0, F1, F2,
				  _) ->
    #rsp_game_start{uid = F1, round = F2};
dfp_read_field_def_rsp_game_start(Other, Z1, Z2, F1, F2,
				  TrUserData) ->
    dg_read_field_def_rsp_game_start(Other, Z1, Z2, F1, F2,
				     TrUserData).

dg_read_field_def_rsp_game_start(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_game_start(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rsp_game_start(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_game_start_uid(Rest, 0, 0, F1, F2,
				     TrUserData);
      16 ->
	  d_field_rsp_game_start_round(Rest, 0, 0, F1, F2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_game_start(Rest, 0, 0, F1, F2,
					   TrUserData);
	    1 ->
		skip_64_rsp_game_start(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_rsp_game_start(Rest, 0, 0, F1, F2,
						     TrUserData);
	    5 ->
		skip_32_rsp_game_start(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rsp_game_start(<<>>, 0, 0, F1, F2,
				 _) ->
    #rsp_game_start{uid = F1, round = F2}.

d_field_rsp_game_start_uid(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rsp_game_start_uid(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_rsp_game_start_uid(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_game_start(Rest, 0, 0, NewFValue,
				      F2, TrUserData).


d_field_rsp_game_start_round(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rsp_game_start_round(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_rsp_game_start_round(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_game_start(Rest, 0, 0, F1,
				      NewFValue, TrUserData).


skip_varint_rsp_game_start(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_rsp_game_start(Rest, Z1, Z2, F1, F2,
			       TrUserData);
skip_varint_rsp_game_start(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rsp_game_start(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_length_delimited_rsp_game_start(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_game_start(Rest, N + 7,
					 X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rsp_game_start(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_game_start(Rest2, 0, 0, F1, F2,
				      TrUserData).


skip_32_rsp_game_start(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_rsp_game_start(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_64_rsp_game_start(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_rsp_game_start(Rest, Z1, Z2, F1, F2,
				      TrUserData).


d_msg_rsp_start(Bin, TrUserData) ->
    dfp_read_field_def_rsp_start(Bin, 0, 0,
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_start(<<8, Rest/binary>>, Z1, Z2,
			     F1, TrUserData) ->
    d_field_rsp_start_status(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_rsp_start(<<>>, 0, 0, F1, _) ->
    #rsp_start{status = F1};
dfp_read_field_def_rsp_start(Other, Z1, Z2, F1,
			     TrUserData) ->
    dg_read_field_def_rsp_start(Other, Z1, Z2, F1,
				TrUserData).

dg_read_field_def_rsp_start(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_start(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
dg_read_field_def_rsp_start(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_start_status(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rsp_start(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_rsp_start(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rsp_start(Rest, 0, 0, F1,
						TrUserData);
	    5 -> skip_32_rsp_start(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rsp_start(<<>>, 0, 0, F1, _) ->
    #rsp_start{status = F1}.

d_field_rsp_start_status(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rsp_start_status(Rest, N + 7, X bsl N + Acc, F1,
			     TrUserData);
d_field_rsp_start_status(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, TrUserData) ->
    ZValue = X bsl N + Acc,
    NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
		   true -> -(ZValue + 1 bsr 1)
		end,
    dfp_read_field_def_rsp_start(Rest, 0, 0, NewFValue,
				 TrUserData).


skip_varint_rsp_start(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    skip_varint_rsp_start(Rest, Z1, Z2, F1, TrUserData);
skip_varint_rsp_start(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    dfp_read_field_def_rsp_start(Rest, Z1, Z2, F1,
				 TrUserData).


skip_length_delimited_rsp_start(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_start(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rsp_start(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_start(Rest2, 0, 0, F1,
				 TrUserData).


skip_32_rsp_start(<<_:32, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_rsp_start(Rest, Z1, Z2, F1,
				 TrUserData).


skip_64_rsp_start(<<_:64, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_rsp_start(Rest, Z1, Z2, F1,
				 TrUserData).


d_msg_rsp_heart(Bin, TrUserData) ->
    dfp_read_field_def_rsp_heart(Bin, 0, 0,
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_heart(<<8, Rest/binary>>, Z1, Z2,
			     F1, TrUserData) ->
    d_field_rsp_heart_time(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_rsp_heart(<<>>, 0, 0, F1, _) ->
    #rsp_heart{time = F1};
dfp_read_field_def_rsp_heart(Other, Z1, Z2, F1,
			     TrUserData) ->
    dg_read_field_def_rsp_heart(Other, Z1, Z2, F1,
				TrUserData).

dg_read_field_def_rsp_heart(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_heart(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
dg_read_field_def_rsp_heart(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_rsp_heart_time(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rsp_heart(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_rsp_heart(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rsp_heart(Rest, 0, 0, F1,
						TrUserData);
	    5 -> skip_32_rsp_heart(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rsp_heart(<<>>, 0, 0, F1, _) ->
    #rsp_heart{time = F1}.

d_field_rsp_heart_time(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rsp_heart_time(Rest, N + 7, X bsl N + Acc, F1,
			   TrUserData);
d_field_rsp_heart_time(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_heart(Rest, 0, 0, NewFValue,
				 TrUserData).


skip_varint_rsp_heart(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    skip_varint_rsp_heart(Rest, Z1, Z2, F1, TrUserData);
skip_varint_rsp_heart(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    dfp_read_field_def_rsp_heart(Rest, Z1, Z2, F1,
				 TrUserData).


skip_length_delimited_rsp_heart(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_heart(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rsp_heart(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_heart(Rest2, 0, 0, F1,
				 TrUserData).


skip_32_rsp_heart(<<_:32, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_rsp_heart(Rest, Z1, Z2, F1,
				 TrUserData).


skip_64_rsp_heart(<<_:64, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_rsp_heart(Rest, Z1, Z2, F1,
				 TrUserData).


d_msg_rsp_dismiss(Bin, TrUserData) ->
    dfp_read_field_def_rsp_dismiss(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_dismiss(<<8, Rest/binary>>, Z1,
			       Z2, F1, TrUserData) ->
    d_field_rsp_dismiss_status(Rest, Z1, Z2, F1,
			       TrUserData);
dfp_read_field_def_rsp_dismiss(<<>>, 0, 0, F1, _) ->
    #rsp_dismiss{status = F1};
dfp_read_field_def_rsp_dismiss(Other, Z1, Z2, F1,
			       TrUserData) ->
    dg_read_field_def_rsp_dismiss(Other, Z1, Z2, F1,
				  TrUserData).

dg_read_field_def_rsp_dismiss(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_dismiss(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_rsp_dismiss(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_dismiss_status(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_dismiss(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_rsp_dismiss(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rsp_dismiss(Rest, 0, 0, F1,
						  TrUserData);
	    5 -> skip_32_rsp_dismiss(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rsp_dismiss(<<>>, 0, 0, F1, _) ->
    #rsp_dismiss{status = F1}.

d_field_rsp_dismiss_status(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rsp_dismiss_status(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
d_field_rsp_dismiss_status(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_dismiss(Rest, 0, 0, NewFValue,
				   TrUserData).


skip_varint_rsp_dismiss(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    skip_varint_rsp_dismiss(Rest, Z1, Z2, F1, TrUserData);
skip_varint_rsp_dismiss(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    dfp_read_field_def_rsp_dismiss(Rest, Z1, Z2, F1,
				   TrUserData).


skip_length_delimited_rsp_dismiss(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_dismiss(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rsp_dismiss(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_dismiss(Rest2, 0, 0, F1,
				   TrUserData).


skip_32_rsp_dismiss(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_rsp_dismiss(Rest, Z1, Z2, F1,
				   TrUserData).


skip_64_rsp_dismiss(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_rsp_dismiss(Rest, Z1, Z2, F1,
				   TrUserData).


d_msg_req_dismiss(Bin, TrUserData) ->
    dfp_read_field_def_req_dismiss(Bin, 0, 0, TrUserData).

dfp_read_field_def_req_dismiss(<<>>, 0, 0, _) ->
    #req_dismiss{};
dfp_read_field_def_req_dismiss(Other, Z1, Z2,
			       TrUserData) ->
    dg_read_field_def_req_dismiss(Other, Z1, Z2,
				  TrUserData).

dg_read_field_def_req_dismiss(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_dismiss(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
dg_read_field_def_req_dismiss(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_req_dismiss(Rest, 0, 0, TrUserData);
      1 -> skip_64_req_dismiss(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_req_dismiss(Rest, 0, 0,
					    TrUserData);
      5 -> skip_32_req_dismiss(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_req_dismiss(<<>>, 0, 0, _) ->
    #req_dismiss{}.

skip_varint_req_dismiss(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    skip_varint_req_dismiss(Rest, Z1, Z2, TrUserData);
skip_varint_req_dismiss(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    dfp_read_field_def_req_dismiss(Rest, Z1, Z2,
				   TrUserData).


skip_length_delimited_req_dismiss(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_dismiss(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
skip_length_delimited_req_dismiss(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_dismiss(Rest2, 0, 0, TrUserData).


skip_32_req_dismiss(<<_:32, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_req_dismiss(Rest, Z1, Z2,
				   TrUserData).


skip_64_req_dismiss(<<_:64, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_req_dismiss(Rest, Z1, Z2,
				   TrUserData).


d_msg_rsp_get_data(Bin, TrUserData) ->
    dfp_read_field_def_rsp_get_data(Bin, 0, 0,
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_get_data(<<10, Rest/binary>>, Z1,
				Z2, F1, TrUserData) ->
    d_field_rsp_get_data_data(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_rsp_get_data(<<>>, 0, 0, F1, _) ->
    #rsp_get_data{data = F1};
dfp_read_field_def_rsp_get_data(Other, Z1, Z2, F1,
				TrUserData) ->
    dg_read_field_def_rsp_get_data(Other, Z1, Z2, F1,
				   TrUserData).

dg_read_field_def_rsp_get_data(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_get_data(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
dg_read_field_def_rsp_get_data(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rsp_get_data_data(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_get_data(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_rsp_get_data(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rsp_get_data(Rest, 0, 0, F1,
						   TrUserData);
	    5 -> skip_32_rsp_get_data(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rsp_get_data(<<>>, 0, 0, F1, _) ->
    #rsp_get_data{data = F1}.

d_field_rsp_get_data_data(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rsp_get_data_data(Rest, N + 7, X bsl N + Acc,
			      F1, TrUserData);
d_field_rsp_get_data_data(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_rsp_get_data(Rest2, 0, 0, NewFValue,
				    TrUserData).


skip_varint_rsp_get_data(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, TrUserData) ->
    skip_varint_rsp_get_data(Rest, Z1, Z2, F1, TrUserData);
skip_varint_rsp_get_data(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, TrUserData) ->
    dfp_read_field_def_rsp_get_data(Rest, Z1, Z2, F1,
				    TrUserData).


skip_length_delimited_rsp_get_data(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_get_data(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rsp_get_data(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_get_data(Rest2, 0, 0, F1,
				    TrUserData).


skip_32_rsp_get_data(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     TrUserData) ->
    dfp_read_field_def_rsp_get_data(Rest, Z1, Z2, F1,
				    TrUserData).


skip_64_rsp_get_data(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     TrUserData) ->
    dfp_read_field_def_rsp_get_data(Rest, Z1, Z2, F1,
				    TrUserData).


d_msg_req_get_data(Bin, TrUserData) ->
    dfp_read_field_def_req_get_data(Bin, 0, 0, TrUserData).

dfp_read_field_def_req_get_data(<<>>, 0, 0, _) ->
    #req_get_data{};
dfp_read_field_def_req_get_data(Other, Z1, Z2,
				TrUserData) ->
    dg_read_field_def_req_get_data(Other, Z1, Z2,
				   TrUserData).

dg_read_field_def_req_get_data(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_get_data(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
dg_read_field_def_req_get_data(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_req_get_data(Rest, 0, 0, TrUserData);
      1 -> skip_64_req_get_data(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_req_get_data(Rest, 0, 0,
					     TrUserData);
      5 -> skip_32_req_get_data(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_req_get_data(<<>>, 0, 0, _) ->
    #req_get_data{}.

skip_varint_req_get_data(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    skip_varint_req_get_data(Rest, Z1, Z2, TrUserData);
skip_varint_req_get_data(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    dfp_read_field_def_req_get_data(Rest, Z1, Z2,
				    TrUserData).


skip_length_delimited_req_get_data(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_get_data(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
skip_length_delimited_req_get_data(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_get_data(Rest2, 0, 0,
				    TrUserData).


skip_32_req_get_data(<<_:32, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_req_get_data(Rest, Z1, Z2,
				    TrUserData).


skip_64_req_get_data(<<_:64, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_req_get_data(Rest, Z1, Z2,
				    TrUserData).


d_msg_pb_room_info(Bin, TrUserData) ->
    dfp_read_field_def_pb_room_info(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_pb_room_info(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_pb_room_info_room_id(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, TrUserData);
dfp_read_field_def_pb_room_info(<<16, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_pb_room_info_owner(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, TrUserData);
dfp_read_field_def_pb_room_info(<<24, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_pb_room_info_round(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, TrUserData);
dfp_read_field_def_pb_room_info(<<32, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_pb_room_info_pay(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, TrUserData);
dfp_read_field_def_pb_room_info(<<40, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_pb_room_info_banker(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, TrUserData);
dfp_read_field_def_pb_room_info(<<48, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_pb_room_info_special(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, TrUserData);
dfp_read_field_def_pb_room_info(<<56, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_pb_room_info_type(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, TrUserData);
dfp_read_field_def_pb_room_info(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6, F7, _) ->
    #pb_room_info{room_id = F1, owner = F2, round = F3,
		  pay = F4, banker = F5, special = F6, type = F7};
dfp_read_field_def_pb_room_info(Other, Z1, Z2, F1, F2,
				F3, F4, F5, F6, F7, TrUserData) ->
    dg_read_field_def_pb_room_info(Other, Z1, Z2, F1, F2,
				   F3, F4, F5, F6, F7, TrUserData).

dg_read_field_def_pb_room_info(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_pb_room_info(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData);
dg_read_field_def_pb_room_info(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7,
			       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_pb_room_info_room_id(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, TrUserData);
      16 ->
	  d_field_pb_room_info_owner(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, TrUserData);
      24 ->
	  d_field_pb_room_info_round(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, TrUserData);
      32 ->
	  d_field_pb_room_info_pay(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, TrUserData);
      40 ->
	  d_field_pb_room_info_banker(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, TrUserData);
      48 ->
	  d_field_pb_room_info_special(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, TrUserData);
      56 ->
	  d_field_pb_room_info_type(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_pb_room_info(Rest, 0, 0, F1, F2, F3, F4, F5,
					 F6, F7, TrUserData);
	    1 ->
		skip_64_pb_room_info(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7, TrUserData);
	    2 ->
		skip_length_delimited_pb_room_info(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6, F7,
						   TrUserData);
	    5 ->
		skip_32_pb_room_info(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7, TrUserData)
	  end
    end;
dg_read_field_def_pb_room_info(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6, F7, _) ->
    #pb_room_info{room_id = F1, owner = F2, round = F3,
		  pay = F4, banker = F5, special = F6, type = F7}.

d_field_pb_room_info_room_id(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_pb_room_info_room_id(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_pb_room_info_room_id(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, F3, F4, F5, F6, F7, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_pb_room_info(Rest, 0, 0, NewFValue,
				    F2, F3, F4, F5, F6, F7, TrUserData).


d_field_pb_room_info_owner(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_pb_room_info_owner(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_pb_room_info_owner(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, F3, F4, F5, F6, F7, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_pb_room_info(Rest, 0, 0, F1,
				    NewFValue, F3, F4, F5, F6, F7, TrUserData).


d_field_pb_room_info_round(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_pb_room_info_round(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_pb_room_info_round(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, _, F4, F5, F6, F7, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_pb_room_info(Rest, 0, 0, F1, F2,
				    NewFValue, F4, F5, F6, F7, TrUserData).


d_field_pb_room_info_pay(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_pb_room_info_pay(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, TrUserData);
d_field_pb_room_info_pay(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, _, F5, F6, F7, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_pb_room_info(Rest, 0, 0, F1, F2, F3,
				    NewFValue, F5, F6, F7, TrUserData).


d_field_pb_room_info_banker(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_pb_room_info_banker(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_pb_room_info_banker(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, _, F6, F7, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_pb_room_info(Rest, 0, 0, F1, F2, F3,
				    F4, NewFValue, F6, F7, TrUserData).


d_field_pb_room_info_special(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_pb_room_info_special(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_pb_room_info_special(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, _, F7, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_pb_room_info(Rest, 0, 0, F1, F2, F3,
				    F4, F5, NewFValue, F7, TrUserData).


d_field_pb_room_info_type(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_pb_room_info_type(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_pb_room_info_type(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_pb_room_info(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, NewFValue, TrUserData).


skip_varint_pb_room_info(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    skip_varint_pb_room_info(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, TrUserData);
skip_varint_pb_room_info(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_pb_room_info(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, TrUserData).


skip_length_delimited_pb_room_info(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData)
    when N < 57 ->
    skip_length_delimited_pb_room_info(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, TrUserData);
skip_length_delimited_pb_room_info(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_pb_room_info(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, TrUserData).


skip_32_pb_room_info(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_pb_room_info(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, TrUserData).


skip_64_pb_room_info(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_pb_room_info(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, TrUserData).


d_msg_pb_player(Bin, TrUserData) ->
    dfp_read_field_def_pb_player(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), id([], TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_pb_player(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_pb_player_name(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, TrUserData);
dfp_read_field_def_pb_player(<<16, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_pb_player_uid(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, TrUserData);
dfp_read_field_def_pb_player(<<24, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_pb_player_coins(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, TrUserData);
dfp_read_field_def_pb_player(<<34, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_pb_player_logo(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, TrUserData);
dfp_read_field_def_pb_player(<<40, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_pb_player_owner(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, TrUserData);
dfp_read_field_def_pb_player(<<48, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_pb_player_index(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, TrUserData);
dfp_read_field_def_pb_player(<<58, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_pb_player_pai(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, TrUserData);
dfp_read_field_def_pb_player(<<64, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    d_field_pb_player_delta(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, TrUserData);
dfp_read_field_def_pb_player(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7, F8, TrUserData) ->
    #pb_player{name = F1, uid = F2, coins = F3, logo = F4,
	       owner = F5, index = F6,
	       pai = lists_reverse(F7, TrUserData), delta = F8};
dfp_read_field_def_pb_player(Other, Z1, Z2, F1, F2, F3,
			     F4, F5, F6, F7, F8, TrUserData) ->
    dg_read_field_def_pb_player(Other, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, TrUserData).

dg_read_field_def_pb_player(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_pb_player(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
dg_read_field_def_pb_player(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
			    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_pb_player_name(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, TrUserData);
      16 ->
	  d_field_pb_player_uid(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, TrUserData);
      24 ->
	  d_field_pb_player_coins(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, TrUserData);
      34 ->
	  d_field_pb_player_logo(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, TrUserData);
      40 ->
	  d_field_pb_player_owner(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, TrUserData);
      48 ->
	  d_field_pb_player_index(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, TrUserData);
      58 ->
	  d_field_pb_player_pai(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, TrUserData);
      64 ->
	  d_field_pb_player_delta(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_pb_player(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, F8, TrUserData);
	    1 ->
		skip_64_pb_player(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7, F8, TrUserData);
	    2 ->
		skip_length_delimited_pb_player(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7, F8, TrUserData);
	    5 ->
		skip_32_pb_player(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7, F8, TrUserData)
	  end
    end;
dg_read_field_def_pb_player(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, F7, F8, TrUserData) ->
    #pb_player{name = F1, uid = F2, coins = F3, logo = F4,
	       owner = F5, index = F6,
	       pai = lists_reverse(F7, TrUserData), delta = F8}.

d_field_pb_player_name(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_pb_player_name(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_pb_player_name(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_pb_player(Rest2, 0, 0, NewFValue, F2,
				 F3, F4, F5, F6, F7, F8, TrUserData).


d_field_pb_player_uid(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_pb_player_uid(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_pb_player_uid(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _, F3, F4, F5, F6, F7, F8, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_pb_player(Rest, 0, 0, F1, NewFValue,
				 F3, F4, F5, F6, F7, F8, TrUserData).


d_field_pb_player_coins(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_pb_player_coins(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_pb_player_coins(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, _, F4, F5, F6, F7, F8, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_pb_player(Rest, 0, 0, F1, F2,
				 NewFValue, F4, F5, F6, F7, F8, TrUserData).


d_field_pb_player_logo(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_pb_player_logo(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_pb_player_logo(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, _, F5, F6, F7, F8, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_pb_player(Rest2, 0, 0, F1, F2, F3,
				 NewFValue, F5, F6, F7, F8, TrUserData).


d_field_pb_player_owner(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_pb_player_owner(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_pb_player_owner(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, _, F6, F7, F8, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_pb_player(Rest, 0, 0, F1, F2, F3, F4,
				 NewFValue, F6, F7, F8, TrUserData).


d_field_pb_player_index(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_pb_player_index(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_pb_player_index(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, _, F7, F8, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_pb_player(Rest, 0, 0, F1, F2, F3, F4,
				 F5, NewFValue, F7, F8, TrUserData).


d_field_pb_player_pai(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_pb_player_pai(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_pb_player_pai(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_pb_unit(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_pb_player(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, cons(NewFValue, F7, TrUserData),
				 F8, TrUserData).


d_field_pb_player_delta(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_pb_player_delta(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_pb_player_delta(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_pb_player(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, NewFValue, TrUserData).


skip_varint_pb_player(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    skip_varint_pb_player(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, TrUserData);
skip_varint_pb_player(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    dfp_read_field_def_pb_player(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, TrUserData).


skip_length_delimited_pb_player(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				TrUserData)
    when N < 57 ->
    skip_length_delimited_pb_player(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, TrUserData);
skip_length_delimited_pb_player(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_pb_player(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, TrUserData).


skip_32_pb_player(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, F7, F8, TrUserData) ->
    dfp_read_field_def_pb_player(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, TrUserData).


skip_64_pb_player(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, F7, F8, TrUserData) ->
    dfp_read_field_def_pb_player(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, TrUserData).


d_msg_rsp_join(Bin, TrUserData) ->
    dfp_read_field_def_rsp_join(Bin, 0, 0,
				id(undefined, TrUserData), id([], TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_join(<<8, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, TrUserData) ->
    d_field_rsp_join_status(Rest, Z1, Z2, F1, F2, F3,
			    TrUserData);
dfp_read_field_def_rsp_join(<<18, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, TrUserData) ->
    d_field_rsp_join_players(Rest, Z1, Z2, F1, F2, F3,
			     TrUserData);
dfp_read_field_def_rsp_join(<<26, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, TrUserData) ->
    d_field_rsp_join_room_info(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
dfp_read_field_def_rsp_join(<<>>, 0, 0, F1, F2, F3,
			    TrUserData) ->
    #rsp_join{status = F1,
	      players = lists_reverse(F2, TrUserData),
	      room_info = F3};
dfp_read_field_def_rsp_join(Other, Z1, Z2, F1, F2, F3,
			    TrUserData) ->
    dg_read_field_def_rsp_join(Other, Z1, Z2, F1, F2, F3,
			       TrUserData).

dg_read_field_def_rsp_join(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_join(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, TrUserData);
dg_read_field_def_rsp_join(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_join_status(Rest, 0, 0, F1, F2, F3,
				  TrUserData);
      18 ->
	  d_field_rsp_join_players(Rest, 0, 0, F1, F2, F3,
				   TrUserData);
      26 ->
	  d_field_rsp_join_room_info(Rest, 0, 0, F1, F2, F3,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_join(Rest, 0, 0, F1, F2, F3,
				     TrUserData);
	    1 ->
		skip_64_rsp_join(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_rsp_join(Rest, 0, 0, F1, F2, F3,
					       TrUserData);
	    5 ->
		skip_32_rsp_join(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_rsp_join(<<>>, 0, 0, F1, F2, F3,
			   TrUserData) ->
    #rsp_join{status = F1,
	      players = lists_reverse(F2, TrUserData),
	      room_info = F3}.

d_field_rsp_join_status(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rsp_join_status(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, TrUserData);
d_field_rsp_join_status(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F2, F3, TrUserData) ->
    ZValue = X bsl N + Acc,
    NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
		   true -> -(ZValue + 1 bsr 1)
		end,
    dfp_read_field_def_rsp_join(Rest, 0, 0, NewFValue, F2,
				F3, TrUserData).


d_field_rsp_join_players(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rsp_join_players(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, TrUserData);
d_field_rsp_join_players(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_pb_player(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rsp_join(Rest2, 0, 0, F1,
				cons(NewFValue, F2, TrUserData), F3,
				TrUserData).


d_field_rsp_join_room_info(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rsp_join_room_info(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, TrUserData);
d_field_rsp_join_room_info(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_pb_room_info(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rsp_join(Rest2, 0, 0, F1, F2,
				if F3 == undefined -> NewFValue;
				   true ->
				       merge_msg_pb_room_info(F3, NewFValue,
							      TrUserData)
				end,
				TrUserData).


skip_varint_rsp_join(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, TrUserData) ->
    skip_varint_rsp_join(Rest, Z1, Z2, F1, F2, F3,
			 TrUserData);
skip_varint_rsp_join(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rsp_join(Rest, Z1, Z2, F1, F2, F3,
				TrUserData).


skip_length_delimited_rsp_join(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_join(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_rsp_join(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_join(Rest2, 0, 0, F1, F2, F3,
				TrUserData).


skip_32_rsp_join(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, TrUserData) ->
    dfp_read_field_def_rsp_join(Rest, Z1, Z2, F1, F2, F3,
				TrUserData).


skip_64_rsp_join(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, TrUserData) ->
    dfp_read_field_def_rsp_join(Rest, Z1, Z2, F1, F2, F3,
				TrUserData).


d_msg_rsp_buy_gem(Bin, TrUserData) ->
    dfp_read_field_def_rsp_buy_gem(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_buy_gem(<<8, Rest/binary>>, Z1,
			       Z2, F1, F2, TrUserData) ->
    d_field_rsp_buy_gem_status(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_rsp_buy_gem(<<16, Rest/binary>>, Z1,
			       Z2, F1, F2, TrUserData) ->
    d_field_rsp_buy_gem_gems(Rest, Z1, Z2, F1, F2,
			     TrUserData);
dfp_read_field_def_rsp_buy_gem(<<>>, 0, 0, F1, F2, _) ->
    #rsp_buy_gem{status = F1, gems = F2};
dfp_read_field_def_rsp_buy_gem(Other, Z1, Z2, F1, F2,
			       TrUserData) ->
    dg_read_field_def_rsp_buy_gem(Other, Z1, Z2, F1, F2,
				  TrUserData).

dg_read_field_def_rsp_buy_gem(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_buy_gem(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rsp_buy_gem(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_buy_gem_status(Rest, 0, 0, F1, F2,
				     TrUserData);
      16 ->
	  d_field_rsp_buy_gem_gems(Rest, 0, 0, F1, F2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_buy_gem(Rest, 0, 0, F1, F2, TrUserData);
	    1 ->
		skip_64_rsp_buy_gem(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_rsp_buy_gem(Rest, 0, 0, F1, F2,
						  TrUserData);
	    5 -> skip_32_rsp_buy_gem(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rsp_buy_gem(<<>>, 0, 0, F1, F2, _) ->
    #rsp_buy_gem{status = F1, gems = F2}.

d_field_rsp_buy_gem_status(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rsp_buy_gem_status(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_rsp_buy_gem_status(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_buy_gem(Rest, 0, 0, NewFValue,
				   F2, TrUserData).


d_field_rsp_buy_gem_gems(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rsp_buy_gem_gems(Rest, N + 7, X bsl N + Acc, F1,
			     F2, TrUserData);
d_field_rsp_buy_gem_gems(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_buy_gem(Rest, 0, 0, F1,
				   NewFValue, TrUserData).


skip_varint_rsp_buy_gem(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, TrUserData) ->
    skip_varint_rsp_buy_gem(Rest, Z1, Z2, F1, F2,
			    TrUserData);
skip_varint_rsp_buy_gem(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rsp_buy_gem(Rest, Z1, Z2, F1, F2,
				   TrUserData).


skip_length_delimited_rsp_buy_gem(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_buy_gem(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rsp_buy_gem(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_buy_gem(Rest2, 0, 0, F1, F2,
				   TrUserData).


skip_32_rsp_buy_gem(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, TrUserData) ->
    dfp_read_field_def_rsp_buy_gem(Rest, Z1, Z2, F1, F2,
				   TrUserData).


skip_64_rsp_buy_gem(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, TrUserData) ->
    dfp_read_field_def_rsp_buy_gem(Rest, Z1, Z2, F1, F2,
				   TrUserData).


d_msg_req_buy_gem(Bin, TrUserData) ->
    dfp_read_field_def_req_buy_gem(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_req_buy_gem(<<8, Rest/binary>>, Z1,
			       Z2, F1, TrUserData) ->
    d_field_req_buy_gem_coins(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_req_buy_gem(<<>>, 0, 0, F1, _) ->
    #req_buy_gem{coins = F1};
dfp_read_field_def_req_buy_gem(Other, Z1, Z2, F1,
			       TrUserData) ->
    dg_read_field_def_req_buy_gem(Other, Z1, Z2, F1,
				  TrUserData).

dg_read_field_def_req_buy_gem(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_buy_gem(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_req_buy_gem(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_req_buy_gem_coins(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_req_buy_gem(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_req_buy_gem(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_req_buy_gem(Rest, 0, 0, F1,
						  TrUserData);
	    5 -> skip_32_req_buy_gem(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_req_buy_gem(<<>>, 0, 0, F1, _) ->
    #req_buy_gem{coins = F1}.

d_field_req_buy_gem_coins(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData)
    when N < 57 ->
    d_field_req_buy_gem_coins(Rest, N + 7, X bsl N + Acc,
			      F1, TrUserData);
d_field_req_buy_gem_coins(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_req_buy_gem(Rest, 0, 0, NewFValue,
				   TrUserData).


skip_varint_req_buy_gem(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    skip_varint_req_buy_gem(Rest, Z1, Z2, F1, TrUserData);
skip_varint_req_buy_gem(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    dfp_read_field_def_req_buy_gem(Rest, Z1, Z2, F1,
				   TrUserData).


skip_length_delimited_req_buy_gem(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_buy_gem(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_req_buy_gem(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_buy_gem(Rest2, 0, 0, F1,
				   TrUserData).


skip_32_req_buy_gem(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_req_buy_gem(Rest, Z1, Z2, F1,
				   TrUserData).


skip_64_req_buy_gem(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_req_buy_gem(Rest, Z1, Z2, F1,
				   TrUserData).


d_msg_rsp_task_claim(Bin, TrUserData) ->
    dfp_read_field_def_rsp_task_claim(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_task_claim(<<8, Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    d_field_rsp_task_claim_status(Rest, Z1, Z2, F1,
				  TrUserData);
dfp_read_field_def_rsp_task_claim(<<>>, 0, 0, F1, _) ->
    #rsp_task_claim{status = F1};
dfp_read_field_def_rsp_task_claim(Other, Z1, Z2, F1,
				  TrUserData) ->
    dg_read_field_def_rsp_task_claim(Other, Z1, Z2, F1,
				     TrUserData).

dg_read_field_def_rsp_task_claim(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_task_claim(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
dg_read_field_def_rsp_task_claim(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_task_claim_status(Rest, 0, 0, F1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_task_claim(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_rsp_task_claim(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rsp_task_claim(Rest, 0, 0, F1,
						     TrUserData);
	    5 -> skip_32_rsp_task_claim(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rsp_task_claim(<<>>, 0, 0, F1, _) ->
    #rsp_task_claim{status = F1}.

d_field_rsp_task_claim_status(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rsp_task_claim_status(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
d_field_rsp_task_claim_status(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_task_claim(Rest, 0, 0, NewFValue,
				      TrUserData).


skip_varint_rsp_task_claim(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    skip_varint_rsp_task_claim(Rest, Z1, Z2, F1,
			       TrUserData);
skip_varint_rsp_task_claim(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_rsp_task_claim(Rest, Z1, Z2, F1,
				      TrUserData).


skip_length_delimited_rsp_task_claim(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_task_claim(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rsp_task_claim(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_task_claim(Rest2, 0, 0, F1,
				      TrUserData).


skip_32_rsp_task_claim(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_rsp_task_claim(Rest, Z1, Z2, F1,
				      TrUserData).


skip_64_rsp_task_claim(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_rsp_task_claim(Rest, Z1, Z2, F1,
				      TrUserData).


d_msg_pb_task(Bin, TrUserData) ->
    dfp_read_field_def_pb_task(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_pb_task(<<8, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, TrUserData) ->
    d_field_pb_task_id(Rest, Z1, Z2, F1, F2, F3,
		       TrUserData);
dfp_read_field_def_pb_task(<<16, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, TrUserData) ->
    d_field_pb_task_num(Rest, Z1, Z2, F1, F2, F3,
			TrUserData);
dfp_read_field_def_pb_task(<<24, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, TrUserData) ->
    d_field_pb_task_recive(Rest, Z1, Z2, F1, F2, F3,
			   TrUserData);
dfp_read_field_def_pb_task(<<>>, 0, 0, F1, F2, F3, _) ->
    #pb_task{id = F1, num = F2, recive = F3};
dfp_read_field_def_pb_task(Other, Z1, Z2, F1, F2, F3,
			   TrUserData) ->
    dg_read_field_def_pb_task(Other, Z1, Z2, F1, F2, F3,
			      TrUserData).

dg_read_field_def_pb_task(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_pb_task(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, TrUserData);
dg_read_field_def_pb_task(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_pb_task_id(Rest, 0, 0, F1, F2, F3, TrUserData);
      16 ->
	  d_field_pb_task_num(Rest, 0, 0, F1, F2, F3, TrUserData);
      24 ->
	  d_field_pb_task_recive(Rest, 0, 0, F1, F2, F3,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_pb_task(Rest, 0, 0, F1, F2, F3, TrUserData);
	    1 ->
		skip_64_pb_task(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_pb_task(Rest, 0, 0, F1, F2, F3,
					      TrUserData);
	    5 -> skip_32_pb_task(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_pb_task(<<>>, 0, 0, F1, F2, F3, _) ->
    #pb_task{id = F1, num = F2, recive = F3}.

d_field_pb_task_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_pb_task_id(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, TrUserData);
d_field_pb_task_id(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F2, F3, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_pb_task(Rest, 0, 0, NewFValue, F2,
			       F3, TrUserData).


d_field_pb_task_num(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_pb_task_num(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, TrUserData);
d_field_pb_task_num(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, _, F3, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_pb_task(Rest, 0, 0, F1, NewFValue,
			       F3, TrUserData).


d_field_pb_task_recive(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_pb_task_recive(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, TrUserData);
d_field_pb_task_recive(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_pb_task(Rest, 0, 0, F1, F2,
			       NewFValue, TrUserData).


skip_varint_pb_task(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, TrUserData) ->
    skip_varint_pb_task(Rest, Z1, Z2, F1, F2, F3,
			TrUserData);
skip_varint_pb_task(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, TrUserData) ->
    dfp_read_field_def_pb_task(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData).


skip_length_delimited_pb_task(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_pb_task(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_pb_task(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_pb_task(Rest2, 0, 0, F1, F2, F3,
			       TrUserData).


skip_32_pb_task(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		F3, TrUserData) ->
    dfp_read_field_def_pb_task(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData).


skip_64_pb_task(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		F3, TrUserData) ->
    dfp_read_field_def_pb_task(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData).


d_msg_req_show(Bin, TrUserData) ->
    dfp_read_field_def_req_show(Bin, 0, 0, TrUserData).

dfp_read_field_def_req_show(<<>>, 0, 0, _) ->
    #req_show{};
dfp_read_field_def_req_show(Other, Z1, Z2,
			    TrUserData) ->
    dg_read_field_def_req_show(Other, Z1, Z2, TrUserData).

dg_read_field_def_req_show(<<1:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_show(Rest, N + 7, X bsl N + Acc,
			       TrUserData);
dg_read_field_def_req_show(<<0:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_req_show(Rest, 0, 0, TrUserData);
      1 -> skip_64_req_show(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_req_show(Rest, 0, 0, TrUserData);
      5 -> skip_32_req_show(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_req_show(<<>>, 0, 0, _) ->
    #req_show{}.

skip_varint_req_show(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    skip_varint_req_show(Rest, Z1, Z2, TrUserData);
skip_varint_req_show(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_req_show(Rest, Z1, Z2, TrUserData).


skip_length_delimited_req_show(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_show(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
skip_length_delimited_req_show(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_show(Rest2, 0, 0, TrUserData).


skip_32_req_show(<<_:32, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_req_show(Rest, Z1, Z2, TrUserData).


skip_64_req_show(<<_:64, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_req_show(Rest, Z1, Z2, TrUserData).


d_msg_rsp_player_zhuang(Bin, TrUserData) ->
    dfp_read_field_def_rsp_player_zhuang(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_player_zhuang(<<8, Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_rsp_player_zhuang_uid(Rest, Z1, Z2, F1, F2,
				  TrUserData);
dfp_read_field_def_rsp_player_zhuang(<<16,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_rsp_player_zhuang_base(Rest, Z1, Z2, F1, F2,
				   TrUserData);
dfp_read_field_def_rsp_player_zhuang(<<>>, 0, 0, F1, F2,
				     _) ->
    #rsp_player_zhuang{uid = F1, base = F2};
dfp_read_field_def_rsp_player_zhuang(Other, Z1, Z2, F1,
				     F2, TrUserData) ->
    dg_read_field_def_rsp_player_zhuang(Other, Z1, Z2, F1,
					F2, TrUserData).

dg_read_field_def_rsp_player_zhuang(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_player_zhuang(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rsp_player_zhuang(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_player_zhuang_uid(Rest, 0, 0, F1, F2,
					TrUserData);
      16 ->
	  d_field_rsp_player_zhuang_base(Rest, 0, 0, F1, F2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_player_zhuang(Rest, 0, 0, F1, F2,
					      TrUserData);
	    1 ->
		skip_64_rsp_player_zhuang(Rest, 0, 0, F1, F2,
					  TrUserData);
	    2 ->
		skip_length_delimited_rsp_player_zhuang(Rest, 0, 0, F1,
							F2, TrUserData);
	    5 ->
		skip_32_rsp_player_zhuang(Rest, 0, 0, F1, F2,
					  TrUserData)
	  end
    end;
dg_read_field_def_rsp_player_zhuang(<<>>, 0, 0, F1, F2,
				    _) ->
    #rsp_player_zhuang{uid = F1, base = F2}.

d_field_rsp_player_zhuang_uid(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rsp_player_zhuang_uid(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
d_field_rsp_player_zhuang_uid(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_player_zhuang(Rest, 0, 0,
					 NewFValue, F2, TrUserData).


d_field_rsp_player_zhuang_base(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rsp_player_zhuang_base(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
d_field_rsp_player_zhuang_base(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, TrUserData) ->
    ZValue = X bsl N + Acc,
    NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
		   true -> -(ZValue + 1 bsr 1)
		end,
    dfp_read_field_def_rsp_player_zhuang(Rest, 0, 0, F1,
					 NewFValue, TrUserData).


skip_varint_rsp_player_zhuang(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_rsp_player_zhuang(Rest, Z1, Z2, F1, F2,
				  TrUserData);
skip_varint_rsp_player_zhuang(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rsp_player_zhuang(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_length_delimited_rsp_player_zhuang(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_player_zhuang(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rsp_player_zhuang(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_player_zhuang(Rest2, 0, 0, F1,
					 F2, TrUserData).


skip_32_rsp_player_zhuang(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_rsp_player_zhuang(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_64_rsp_player_zhuang(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_rsp_player_zhuang(Rest, Z1, Z2, F1,
					 F2, TrUserData).


d_msg_rsp_zhuang(Bin, TrUserData) ->
    dfp_read_field_def_rsp_zhuang(Bin, 0, 0,
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_zhuang(<<8, Rest/binary>>, Z1,
			      Z2, F1, TrUserData) ->
    d_field_rsp_zhuang_status(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_rsp_zhuang(<<>>, 0, 0, F1, _) ->
    #rsp_zhuang{status = F1};
dfp_read_field_def_rsp_zhuang(Other, Z1, Z2, F1,
			      TrUserData) ->
    dg_read_field_def_rsp_zhuang(Other, Z1, Z2, F1,
				 TrUserData).

dg_read_field_def_rsp_zhuang(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_zhuang(Rest, N + 7, X bsl N + Acc,
				 F1, TrUserData);
dg_read_field_def_rsp_zhuang(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_zhuang_status(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rsp_zhuang(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_rsp_zhuang(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rsp_zhuang(Rest, 0, 0, F1,
						 TrUserData);
	    5 -> skip_32_rsp_zhuang(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rsp_zhuang(<<>>, 0, 0, F1, _) ->
    #rsp_zhuang{status = F1}.

d_field_rsp_zhuang_status(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rsp_zhuang_status(Rest, N + 7, X bsl N + Acc,
			      F1, TrUserData);
d_field_rsp_zhuang_status(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    ZValue = X bsl N + Acc,
    NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
		   true -> -(ZValue + 1 bsr 1)
		end,
    dfp_read_field_def_rsp_zhuang(Rest, 0, 0, NewFValue,
				  TrUserData).


skip_varint_rsp_zhuang(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, TrUserData) ->
    skip_varint_rsp_zhuang(Rest, Z1, Z2, F1, TrUserData);
skip_varint_rsp_zhuang(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, TrUserData) ->
    dfp_read_field_def_rsp_zhuang(Rest, Z1, Z2, F1,
				  TrUserData).


skip_length_delimited_rsp_zhuang(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_zhuang(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rsp_zhuang(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_zhuang(Rest2, 0, 0, F1,
				  TrUserData).


skip_32_rsp_zhuang(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   TrUserData) ->
    dfp_read_field_def_rsp_zhuang(Rest, Z1, Z2, F1,
				  TrUserData).


skip_64_rsp_zhuang(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   TrUserData) ->
    dfp_read_field_def_rsp_zhuang(Rest, Z1, Z2, F1,
				  TrUserData).


d_msg_rsp_player_leave(Bin, TrUserData) ->
    dfp_read_field_def_rsp_player_leave(Bin, 0, 0,
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_player_leave(<<8, Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    d_field_rsp_player_leave_uid(Rest, Z1, Z2, F1,
				 TrUserData);
dfp_read_field_def_rsp_player_leave(<<>>, 0, 0, F1,
				    _) ->
    #rsp_player_leave{uid = F1};
dfp_read_field_def_rsp_player_leave(Other, Z1, Z2, F1,
				    TrUserData) ->
    dg_read_field_def_rsp_player_leave(Other, Z1, Z2, F1,
				       TrUserData).

dg_read_field_def_rsp_player_leave(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_player_leave(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
dg_read_field_def_rsp_player_leave(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_player_leave_uid(Rest, 0, 0, F1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_player_leave(Rest, 0, 0, F1,
					     TrUserData);
	    1 ->
		skip_64_rsp_player_leave(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rsp_player_leave(Rest, 0, 0, F1,
						       TrUserData);
	    5 ->
		skip_32_rsp_player_leave(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rsp_player_leave(<<>>, 0, 0, F1, _) ->
    #rsp_player_leave{uid = F1}.

d_field_rsp_player_leave_uid(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rsp_player_leave_uid(Rest, N + 7, X bsl N + Acc,
				 F1, TrUserData);
d_field_rsp_player_leave_uid(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_player_leave(Rest, 0, 0,
					NewFValue, TrUserData).


skip_varint_rsp_player_leave(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    skip_varint_rsp_player_leave(Rest, Z1, Z2, F1,
				 TrUserData);
skip_varint_rsp_player_leave(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_rsp_player_leave(Rest, Z1, Z2, F1,
					TrUserData).


skip_length_delimited_rsp_player_leave(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_player_leave(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rsp_player_leave(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_player_leave(Rest2, 0, 0, F1,
					TrUserData).


skip_32_rsp_player_leave(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_rsp_player_leave(Rest, Z1, Z2, F1,
					TrUserData).


skip_64_rsp_player_leave(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_rsp_player_leave(Rest, Z1, Z2, F1,
					TrUserData).


d_msg_rsp_leave(Bin, TrUserData) ->
    dfp_read_field_def_rsp_leave(Bin, 0, 0,
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_leave(<<8, Rest/binary>>, Z1, Z2,
			     F1, TrUserData) ->
    d_field_rsp_leave_status(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_rsp_leave(<<>>, 0, 0, F1, _) ->
    #rsp_leave{status = F1};
dfp_read_field_def_rsp_leave(Other, Z1, Z2, F1,
			     TrUserData) ->
    dg_read_field_def_rsp_leave(Other, Z1, Z2, F1,
				TrUserData).

dg_read_field_def_rsp_leave(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_leave(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
dg_read_field_def_rsp_leave(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_leave_status(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rsp_leave(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_rsp_leave(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rsp_leave(Rest, 0, 0, F1,
						TrUserData);
	    5 -> skip_32_rsp_leave(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rsp_leave(<<>>, 0, 0, F1, _) ->
    #rsp_leave{status = F1}.

d_field_rsp_leave_status(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rsp_leave_status(Rest, N + 7, X bsl N + Acc, F1,
			     TrUserData);
d_field_rsp_leave_status(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, TrUserData) ->
    ZValue = X bsl N + Acc,
    NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
		   true -> -(ZValue + 1 bsr 1)
		end,
    dfp_read_field_def_rsp_leave(Rest, 0, 0, NewFValue,
				 TrUserData).


skip_varint_rsp_leave(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    skip_varint_rsp_leave(Rest, Z1, Z2, F1, TrUserData);
skip_varint_rsp_leave(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    dfp_read_field_def_rsp_leave(Rest, Z1, Z2, F1,
				 TrUserData).


skip_length_delimited_rsp_leave(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_leave(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rsp_leave(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_leave(Rest2, 0, 0, F1,
				 TrUserData).


skip_32_rsp_leave(<<_:32, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_rsp_leave(Rest, Z1, Z2, F1,
				 TrUserData).


skip_64_rsp_leave(<<_:64, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_rsp_leave(Rest, Z1, Z2, F1,
				 TrUserData).


d_msg_rsp_player_score(Bin, TrUserData) ->
    dfp_read_field_def_rsp_player_score(Bin, 0, 0,
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_player_score(<<8, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rsp_player_score_uid(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
dfp_read_field_def_rsp_player_score(<<16, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rsp_player_score_score(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
dfp_read_field_def_rsp_player_score(<<24, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rsp_player_score_delta(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
dfp_read_field_def_rsp_player_score(<<>>, 0, 0, F1, F2,
				    F3, _) ->
    #rsp_player_score{uid = F1, score = F2, delta = F3};
dfp_read_field_def_rsp_player_score(Other, Z1, Z2, F1,
				    F2, F3, TrUserData) ->
    dg_read_field_def_rsp_player_score(Other, Z1, Z2, F1,
				       F2, F3, TrUserData).

dg_read_field_def_rsp_player_score(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_player_score(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_rsp_player_score(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_player_score_uid(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
      16 ->
	  d_field_rsp_player_score_score(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
      24 ->
	  d_field_rsp_player_score_delta(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_player_score(Rest, 0, 0, F1, F2, F3,
					     TrUserData);
	    1 ->
		skip_64_rsp_player_score(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
	    2 ->
		skip_length_delimited_rsp_player_score(Rest, 0, 0, F1,
						       F2, F3, TrUserData);
	    5 ->
		skip_32_rsp_player_score(Rest, 0, 0, F1, F2, F3,
					 TrUserData)
	  end
    end;
dg_read_field_def_rsp_player_score(<<>>, 0, 0, F1, F2,
				   F3, _) ->
    #rsp_player_score{uid = F1, score = F2, delta = F3}.

d_field_rsp_player_score_uid(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rsp_player_score_uid(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, TrUserData);
d_field_rsp_player_score_uid(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, F3, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_player_score(Rest, 0, 0,
					NewFValue, F2, F3, TrUserData).


d_field_rsp_player_score_score(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rsp_player_score_score(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rsp_player_score_score(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, F3, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_player_score(Rest, 0, 0, F1,
					NewFValue, F3, TrUserData).


d_field_rsp_player_score_delta(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rsp_player_score_delta(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rsp_player_score_delta(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_player_score(Rest, 0, 0, F1, F2,
					NewFValue, TrUserData).


skip_varint_rsp_player_score(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_rsp_player_score(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
skip_varint_rsp_player_score(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rsp_player_score(Rest, Z1, Z2, F1,
					F2, F3, TrUserData).


skip_length_delimited_rsp_player_score(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_player_score(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3,
					   TrUserData);
skip_length_delimited_rsp_player_score(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_player_score(Rest2, 0, 0, F1, F2,
					F3, TrUserData).


skip_32_rsp_player_score(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rsp_player_score(Rest, Z1, Z2, F1,
					F2, F3, TrUserData).


skip_64_rsp_player_score(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rsp_player_score(Rest, Z1, Z2, F1,
					F2, F3, TrUserData).


d_msg_rsp_score(Bin, TrUserData) ->
    dfp_read_field_def_rsp_score(Bin, 0, 0,
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_score(<<8, Rest/binary>>, Z1, Z2,
			     F1, TrUserData) ->
    d_field_rsp_score_status(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_rsp_score(<<>>, 0, 0, F1, _) ->
    #rsp_score{status = F1};
dfp_read_field_def_rsp_score(Other, Z1, Z2, F1,
			     TrUserData) ->
    dg_read_field_def_rsp_score(Other, Z1, Z2, F1,
				TrUserData).

dg_read_field_def_rsp_score(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_score(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
dg_read_field_def_rsp_score(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_score_status(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rsp_score(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_rsp_score(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rsp_score(Rest, 0, 0, F1,
						TrUserData);
	    5 -> skip_32_rsp_score(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rsp_score(<<>>, 0, 0, F1, _) ->
    #rsp_score{status = F1}.

d_field_rsp_score_status(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rsp_score_status(Rest, N + 7, X bsl N + Acc, F1,
			     TrUserData);
d_field_rsp_score_status(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_score(Rest, 0, 0, NewFValue,
				 TrUserData).


skip_varint_rsp_score(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    skip_varint_rsp_score(Rest, Z1, Z2, F1, TrUserData);
skip_varint_rsp_score(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    dfp_read_field_def_rsp_score(Rest, Z1, Z2, F1,
				 TrUserData).


skip_length_delimited_rsp_score(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_score(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rsp_score(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_score(Rest2, 0, 0, F1,
				 TrUserData).


skip_32_rsp_score(<<_:32, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_rsp_score(Rest, Z1, Z2, F1,
				 TrUserData).


skip_64_rsp_score(<<_:64, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_rsp_score(Rest, Z1, Z2, F1,
				 TrUserData).


d_msg_rsp_zhuang_end(Bin, TrUserData) ->
    dfp_read_field_def_rsp_zhuang_end(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_zhuang_end(<<8, Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_rsp_zhuang_end_uid(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_rsp_zhuang_end(<<16, Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_rsp_zhuang_end_base(Rest, Z1, Z2, F1, F2,
				TrUserData);
dfp_read_field_def_rsp_zhuang_end(<<>>, 0, 0, F1, F2,
				  _) ->
    #rsp_zhuang_end{uid = F1, base = F2};
dfp_read_field_def_rsp_zhuang_end(Other, Z1, Z2, F1, F2,
				  TrUserData) ->
    dg_read_field_def_rsp_zhuang_end(Other, Z1, Z2, F1, F2,
				     TrUserData).

dg_read_field_def_rsp_zhuang_end(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_zhuang_end(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rsp_zhuang_end(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_zhuang_end_uid(Rest, 0, 0, F1, F2,
				     TrUserData);
      16 ->
	  d_field_rsp_zhuang_end_base(Rest, 0, 0, F1, F2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_zhuang_end(Rest, 0, 0, F1, F2,
					   TrUserData);
	    1 ->
		skip_64_rsp_zhuang_end(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_rsp_zhuang_end(Rest, 0, 0, F1, F2,
						     TrUserData);
	    5 ->
		skip_32_rsp_zhuang_end(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rsp_zhuang_end(<<>>, 0, 0, F1, F2,
				 _) ->
    #rsp_zhuang_end{uid = F1, base = F2}.

d_field_rsp_zhuang_end_uid(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rsp_zhuang_end_uid(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_rsp_zhuang_end_uid(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_zhuang_end(Rest, 0, 0, NewFValue,
				      F2, TrUserData).


d_field_rsp_zhuang_end_base(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rsp_zhuang_end_base(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
d_field_rsp_zhuang_end_base(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, TrUserData) ->
    ZValue = X bsl N + Acc,
    NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
		   true -> -(ZValue + 1 bsr 1)
		end,
    dfp_read_field_def_rsp_zhuang_end(Rest, 0, 0, F1,
				      NewFValue, TrUserData).


skip_varint_rsp_zhuang_end(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_rsp_zhuang_end(Rest, Z1, Z2, F1, F2,
			       TrUserData);
skip_varint_rsp_zhuang_end(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rsp_zhuang_end(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_length_delimited_rsp_zhuang_end(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_zhuang_end(Rest, N + 7,
					 X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rsp_zhuang_end(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_zhuang_end(Rest2, 0, 0, F1, F2,
				      TrUserData).


skip_32_rsp_zhuang_end(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_rsp_zhuang_end(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_64_rsp_zhuang_end(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_rsp_zhuang_end(Rest, Z1, Z2, F1, F2,
				      TrUserData).


d_msg_notify_dismiss(Bin, TrUserData) ->
    dfp_read_field_def_notify_dismiss(Bin, 0, 0,
				      TrUserData).

dfp_read_field_def_notify_dismiss(<<>>, 0, 0, _) ->
    #notify_dismiss{};
dfp_read_field_def_notify_dismiss(Other, Z1, Z2,
				  TrUserData) ->
    dg_read_field_def_notify_dismiss(Other, Z1, Z2,
				     TrUserData).

dg_read_field_def_notify_dismiss(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_notify_dismiss(Rest, N + 7,
				     X bsl N + Acc, TrUserData);
dg_read_field_def_notify_dismiss(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_notify_dismiss(Rest, 0, 0, TrUserData);
      1 -> skip_64_notify_dismiss(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_notify_dismiss(Rest, 0, 0,
					       TrUserData);
      5 -> skip_32_notify_dismiss(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_notify_dismiss(<<>>, 0, 0, _) ->
    #notify_dismiss{}.

skip_varint_notify_dismiss(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, TrUserData) ->
    skip_varint_notify_dismiss(Rest, Z1, Z2, TrUserData);
skip_varint_notify_dismiss(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, TrUserData) ->
    dfp_read_field_def_notify_dismiss(Rest, Z1, Z2,
				      TrUserData).


skip_length_delimited_notify_dismiss(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_notify_dismiss(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
skip_length_delimited_notify_dismiss(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_notify_dismiss(Rest2, 0, 0,
				      TrUserData).


skip_32_notify_dismiss(<<_:32, Rest/binary>>, Z1, Z2,
		       TrUserData) ->
    dfp_read_field_def_notify_dismiss(Rest, Z1, Z2,
				      TrUserData).


skip_64_notify_dismiss(<<_:64, Rest/binary>>, Z1, Z2,
		       TrUserData) ->
    dfp_read_field_def_notify_dismiss(Rest, Z1, Z2,
				      TrUserData).


d_msg_rsp_new_player(Bin, TrUserData) ->
    dfp_read_field_def_rsp_new_player(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_new_player(<<10, Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    d_field_rsp_new_player_player(Rest, Z1, Z2, F1,
				  TrUserData);
dfp_read_field_def_rsp_new_player(<<>>, 0, 0, F1, _) ->
    #rsp_new_player{player = F1};
dfp_read_field_def_rsp_new_player(Other, Z1, Z2, F1,
				  TrUserData) ->
    dg_read_field_def_rsp_new_player(Other, Z1, Z2, F1,
				     TrUserData).

dg_read_field_def_rsp_new_player(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_new_player(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
dg_read_field_def_rsp_new_player(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rsp_new_player_player(Rest, 0, 0, F1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_new_player(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_rsp_new_player(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rsp_new_player(Rest, 0, 0, F1,
						     TrUserData);
	    5 -> skip_32_rsp_new_player(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rsp_new_player(<<>>, 0, 0, F1, _) ->
    #rsp_new_player{player = F1}.

d_field_rsp_new_player_player(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rsp_new_player_player(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
d_field_rsp_new_player_player(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_pb_player(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rsp_new_player(Rest2, 0, 0,
				      if F1 == undefined -> NewFValue;
					 true ->
					     merge_msg_pb_player(F1, NewFValue,
								 TrUserData)
				      end,
				      TrUserData).


skip_varint_rsp_new_player(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    skip_varint_rsp_new_player(Rest, Z1, Z2, F1,
			       TrUserData);
skip_varint_rsp_new_player(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_rsp_new_player(Rest, Z1, Z2, F1,
				      TrUserData).


skip_length_delimited_rsp_new_player(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_new_player(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rsp_new_player(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_new_player(Rest2, 0, 0, F1,
				      TrUserData).


skip_32_rsp_new_player(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_rsp_new_player(Rest, Z1, Z2, F1,
				      TrUserData).


skip_64_rsp_new_player(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_rsp_new_player(Rest, Z1, Z2, F1,
				      TrUserData).


d_msg_rsp_login(Bin, TrUserData) ->
    dfp_read_field_def_rsp_login(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_login(<<8, Rest/binary>>, Z1, Z2,
			     F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_rsp_login_status(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, TrUserData);
dfp_read_field_def_rsp_login(<<16, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_rsp_login_coins(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, TrUserData);
dfp_read_field_def_rsp_login(<<24, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_rsp_login_gems(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, TrUserData);
dfp_read_field_def_rsp_login(<<32, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_rsp_login_uid(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, TrUserData);
dfp_read_field_def_rsp_login(<<42, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_rsp_login_name(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, TrUserData);
dfp_read_field_def_rsp_login(<<50, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_rsp_login_logo(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, TrUserData);
dfp_read_field_def_rsp_login(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, _) ->
    #rsp_login{status = F1, coins = F2, gems = F3, uid = F4,
	       name = F5, logo = F6};
dfp_read_field_def_rsp_login(Other, Z1, Z2, F1, F2, F3,
			     F4, F5, F6, TrUserData) ->
    dg_read_field_def_rsp_login(Other, Z1, Z2, F1, F2, F3,
				F4, F5, F6, TrUserData).

dg_read_field_def_rsp_login(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_login(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, TrUserData);
dg_read_field_def_rsp_login(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_login_status(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, TrUserData);
      16 ->
	  d_field_rsp_login_coins(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, TrUserData);
      24 ->
	  d_field_rsp_login_gems(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, TrUserData);
      32 ->
	  d_field_rsp_login_uid(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, TrUserData);
      42 ->
	  d_field_rsp_login_name(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, TrUserData);
      50 ->
	  d_field_rsp_login_logo(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_login(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, TrUserData);
	    1 ->
		skip_64_rsp_login(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  TrUserData);
	    2 ->
		skip_length_delimited_rsp_login(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, TrUserData);
	    5 ->
		skip_32_rsp_login(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  TrUserData)
	  end
    end;
dg_read_field_def_rsp_login(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, _) ->
    #rsp_login{status = F1, coins = F2, gems = F3, uid = F4,
	       name = F5, logo = F6}.

d_field_rsp_login_status(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_rsp_login_status(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, TrUserData);
d_field_rsp_login_status(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2, F3, F4, F5, F6, TrUserData) ->
    ZValue = X bsl N + Acc,
    NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
		   true -> -(ZValue + 1 bsr 1)
		end,
    dfp_read_field_def_rsp_login(Rest, 0, 0, NewFValue, F2,
				 F3, F4, F5, F6, TrUserData).


d_field_rsp_login_coins(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_rsp_login_coins(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, TrUserData);
d_field_rsp_login_coins(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, _, F3, F4, F5, F6, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_login(Rest, 0, 0, F1, NewFValue,
				 F3, F4, F5, F6, TrUserData).


d_field_rsp_login_gems(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_rsp_login_gems(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, TrUserData);
d_field_rsp_login_gems(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, _, F4, F5, F6, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_login(Rest, 0, 0, F1, F2,
				 NewFValue, F4, F5, F6, TrUserData).


d_field_rsp_login_uid(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_rsp_login_uid(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, TrUserData);
d_field_rsp_login_uid(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, _, F5, F6, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_login(Rest, 0, 0, F1, F2, F3,
				 NewFValue, F5, F6, TrUserData).


d_field_rsp_login_name(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_rsp_login_name(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, TrUserData);
d_field_rsp_login_name(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, _, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_rsp_login(Rest2, 0, 0, F1, F2, F3,
				 F4, NewFValue, F6, TrUserData).


d_field_rsp_login_logo(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_rsp_login_logo(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, TrUserData);
d_field_rsp_login_logo(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_rsp_login(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, NewFValue, TrUserData).


skip_varint_rsp_login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, TrUserData) ->
    skip_varint_rsp_login(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, TrUserData);
skip_varint_rsp_login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_rsp_login(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, TrUserData).


skip_length_delimited_rsp_login(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_login(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				    TrUserData);
skip_length_delimited_rsp_login(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_login(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, TrUserData).


skip_32_rsp_login(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_rsp_login(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, TrUserData).


skip_64_rsp_login(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_rsp_login(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, TrUserData).


d_msg_req_task_claim(Bin, TrUserData) ->
    dfp_read_field_def_req_task_claim(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_req_task_claim(<<8, Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    d_field_req_task_claim_id(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_req_task_claim(<<>>, 0, 0, F1, _) ->
    #req_task_claim{id = F1};
dfp_read_field_def_req_task_claim(Other, Z1, Z2, F1,
				  TrUserData) ->
    dg_read_field_def_req_task_claim(Other, Z1, Z2, F1,
				     TrUserData).

dg_read_field_def_req_task_claim(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_task_claim(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
dg_read_field_def_req_task_claim(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_req_task_claim_id(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_req_task_claim(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_req_task_claim(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_req_task_claim(Rest, 0, 0, F1,
						     TrUserData);
	    5 -> skip_32_req_task_claim(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_req_task_claim(<<>>, 0, 0, F1, _) ->
    #req_task_claim{id = F1}.

d_field_req_task_claim_id(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData)
    when N < 57 ->
    d_field_req_task_claim_id(Rest, N + 7, X bsl N + Acc,
			      F1, TrUserData);
d_field_req_task_claim_id(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_req_task_claim(Rest, 0, 0, NewFValue,
				      TrUserData).


skip_varint_req_task_claim(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    skip_varint_req_task_claim(Rest, Z1, Z2, F1,
			       TrUserData);
skip_varint_req_task_claim(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_req_task_claim(Rest, Z1, Z2, F1,
				      TrUserData).


skip_length_delimited_req_task_claim(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_task_claim(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
skip_length_delimited_req_task_claim(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_task_claim(Rest2, 0, 0, F1,
				      TrUserData).


skip_32_req_task_claim(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_req_task_claim(Rest, Z1, Z2, F1,
				      TrUserData).


skip_64_req_task_claim(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_req_task_claim(Rest, Z1, Z2, F1,
				      TrUserData).


d_msg_req_create_room(Bin, TrUserData) ->
    dfp_read_field_def_req_create_room(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_req_create_room(<<8, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_req_create_room_round(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, TrUserData);
dfp_read_field_def_req_create_room(<<16, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_req_create_room_pay(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, TrUserData);
dfp_read_field_def_req_create_room(<<24, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_req_create_room_banker(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, TrUserData);
dfp_read_field_def_req_create_room(<<32, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_req_create_room_special(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, TrUserData);
dfp_read_field_def_req_create_room(<<40, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_req_create_room_type(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, TrUserData);
dfp_read_field_def_req_create_room(<<>>, 0, 0, F1, F2,
				   F3, F4, F5, _) ->
    #req_create_room{round = F1, pay = F2, banker = F3,
		     special = F4, type = F5};
dfp_read_field_def_req_create_room(Other, Z1, Z2, F1,
				   F2, F3, F4, F5, TrUserData) ->
    dg_read_field_def_req_create_room(Other, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData).

dg_read_field_def_req_create_room(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_create_room(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5,
				      TrUserData);
dg_read_field_def_req_create_room(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_req_create_room_round(Rest, 0, 0, F1, F2, F3,
					F4, F5, TrUserData);
      16 ->
	  d_field_req_create_room_pay(Rest, 0, 0, F1, F2, F3, F4,
				      F5, TrUserData);
      24 ->
	  d_field_req_create_room_banker(Rest, 0, 0, F1, F2, F3,
					 F4, F5, TrUserData);
      32 ->
	  d_field_req_create_room_special(Rest, 0, 0, F1, F2, F3,
					  F4, F5, TrUserData);
      40 ->
	  d_field_req_create_room_type(Rest, 0, 0, F1, F2, F3, F4,
				       F5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_req_create_room(Rest, 0, 0, F1, F2, F3, F4,
					    F5, TrUserData);
	    1 ->
		skip_64_req_create_room(Rest, 0, 0, F1, F2, F3, F4, F5,
					TrUserData);
	    2 ->
		skip_length_delimited_req_create_room(Rest, 0, 0, F1,
						      F2, F3, F4, F5,
						      TrUserData);
	    5 ->
		skip_32_req_create_room(Rest, 0, 0, F1, F2, F3, F4, F5,
					TrUserData)
	  end
    end;
dg_read_field_def_req_create_room(<<>>, 0, 0, F1, F2,
				  F3, F4, F5, _) ->
    #req_create_room{round = F1, pay = F2, banker = F3,
		     special = F4, type = F5}.

d_field_req_create_room_round(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_req_create_room_round(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5,
				  TrUserData);
d_field_req_create_room_round(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, F3, F4, F5, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_req_create_room(Rest, 0, 0,
				       NewFValue, F2, F3, F4, F5, TrUserData).


d_field_req_create_room_pay(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_req_create_room_pay(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, TrUserData);
d_field_req_create_room_pay(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, F3, F4, F5, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_req_create_room(Rest, 0, 0, F1,
				       NewFValue, F3, F4, F5, TrUserData).


d_field_req_create_room_banker(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_req_create_room_banker(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5,
				   TrUserData);
d_field_req_create_room_banker(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, _, F4, F5, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_req_create_room(Rest, 0, 0, F1, F2,
				       NewFValue, F4, F5, TrUserData).


d_field_req_create_room_special(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_req_create_room_special(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5,
				    TrUserData);
d_field_req_create_room_special(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, _, F5, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_req_create_room(Rest, 0, 0, F1, F2,
				       F3, NewFValue, F5, TrUserData).


d_field_req_create_room_type(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_req_create_room_type(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, TrUserData);
d_field_req_create_room_type(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_req_create_room(Rest, 0, 0, F1, F2,
				       F3, F4, NewFValue, TrUserData).


skip_varint_req_create_room(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_req_create_room(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, TrUserData);
skip_varint_req_create_room(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_req_create_room(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, TrUserData).


skip_length_delimited_req_create_room(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_create_room(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5,
					  TrUserData);
skip_length_delimited_req_create_room(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_create_room(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, TrUserData).


skip_32_req_create_room(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_req_create_room(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, TrUserData).


skip_64_req_create_room(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_req_create_room(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, TrUserData).


d_msg_rsp_gem_rank(Bin, TrUserData) ->
    dfp_read_field_def_rsp_gem_rank(Bin, 0, 0,
				    id([], TrUserData), TrUserData).

dfp_read_field_def_rsp_gem_rank(<<10, Rest/binary>>, Z1,
				Z2, F1, TrUserData) ->
    d_field_rsp_gem_rank_players(Rest, Z1, Z2, F1,
				 TrUserData);
dfp_read_field_def_rsp_gem_rank(<<>>, 0, 0, F1,
				TrUserData) ->
    #rsp_gem_rank{players = lists_reverse(F1, TrUserData)};
dfp_read_field_def_rsp_gem_rank(Other, Z1, Z2, F1,
				TrUserData) ->
    dg_read_field_def_rsp_gem_rank(Other, Z1, Z2, F1,
				   TrUserData).

dg_read_field_def_rsp_gem_rank(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_gem_rank(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
dg_read_field_def_rsp_gem_rank(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rsp_gem_rank_players(Rest, 0, 0, F1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_gem_rank(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_rsp_gem_rank(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rsp_gem_rank(Rest, 0, 0, F1,
						   TrUserData);
	    5 -> skip_32_rsp_gem_rank(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rsp_gem_rank(<<>>, 0, 0, F1,
			       TrUserData) ->
    #rsp_gem_rank{players = lists_reverse(F1, TrUserData)}.

d_field_rsp_gem_rank_players(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rsp_gem_rank_players(Rest, N + 7, X bsl N + Acc,
				 F1, TrUserData);
d_field_rsp_gem_rank_players(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_pb_rank_player(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rsp_gem_rank(Rest2, 0, 0,
				    cons(NewFValue, F1, TrUserData),
				    TrUserData).


skip_varint_rsp_gem_rank(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, TrUserData) ->
    skip_varint_rsp_gem_rank(Rest, Z1, Z2, F1, TrUserData);
skip_varint_rsp_gem_rank(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, TrUserData) ->
    dfp_read_field_def_rsp_gem_rank(Rest, Z1, Z2, F1,
				    TrUserData).


skip_length_delimited_rsp_gem_rank(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_gem_rank(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rsp_gem_rank(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_gem_rank(Rest2, 0, 0, F1,
				    TrUserData).


skip_32_rsp_gem_rank(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     TrUserData) ->
    dfp_read_field_def_rsp_gem_rank(Rest, Z1, Z2, F1,
				    TrUserData).


skip_64_rsp_gem_rank(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     TrUserData) ->
    dfp_read_field_def_rsp_gem_rank(Rest, Z1, Z2, F1,
				    TrUserData).


d_msg_req_gem_rank(Bin, TrUserData) ->
    dfp_read_field_def_req_gem_rank(Bin, 0, 0, TrUserData).

dfp_read_field_def_req_gem_rank(<<>>, 0, 0, _) ->
    #req_gem_rank{};
dfp_read_field_def_req_gem_rank(Other, Z1, Z2,
				TrUserData) ->
    dg_read_field_def_req_gem_rank(Other, Z1, Z2,
				   TrUserData).

dg_read_field_def_req_gem_rank(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_gem_rank(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
dg_read_field_def_req_gem_rank(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_req_gem_rank(Rest, 0, 0, TrUserData);
      1 -> skip_64_req_gem_rank(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_req_gem_rank(Rest, 0, 0,
					     TrUserData);
      5 -> skip_32_req_gem_rank(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_req_gem_rank(<<>>, 0, 0, _) ->
    #req_gem_rank{}.

skip_varint_req_gem_rank(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    skip_varint_req_gem_rank(Rest, Z1, Z2, TrUserData);
skip_varint_req_gem_rank(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    dfp_read_field_def_req_gem_rank(Rest, Z1, Z2,
				    TrUserData).


skip_length_delimited_req_gem_rank(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_gem_rank(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
skip_length_delimited_req_gem_rank(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_gem_rank(Rest2, 0, 0,
				    TrUserData).


skip_32_req_gem_rank(<<_:32, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_req_gem_rank(Rest, Z1, Z2,
				    TrUserData).


skip_64_req_gem_rank(<<_:64, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_req_gem_rank(Rest, Z1, Z2,
				    TrUserData).


d_msg_req_task(Bin, TrUserData) ->
    dfp_read_field_def_req_task(Bin, 0, 0, TrUserData).

dfp_read_field_def_req_task(<<>>, 0, 0, _) ->
    #req_task{};
dfp_read_field_def_req_task(Other, Z1, Z2,
			    TrUserData) ->
    dg_read_field_def_req_task(Other, Z1, Z2, TrUserData).

dg_read_field_def_req_task(<<1:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_task(Rest, N + 7, X bsl N + Acc,
			       TrUserData);
dg_read_field_def_req_task(<<0:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_req_task(Rest, 0, 0, TrUserData);
      1 -> skip_64_req_task(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_req_task(Rest, 0, 0, TrUserData);
      5 -> skip_32_req_task(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_req_task(<<>>, 0, 0, _) ->
    #req_task{}.

skip_varint_req_task(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    skip_varint_req_task(Rest, Z1, Z2, TrUserData);
skip_varint_req_task(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_req_task(Rest, Z1, Z2, TrUserData).


skip_length_delimited_req_task(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_task(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
skip_length_delimited_req_task(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_task(Rest2, 0, 0, TrUserData).


skip_32_req_task(<<_:32, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_req_task(Rest, Z1, Z2, TrUserData).


skip_64_req_task(<<_:64, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_req_task(Rest, Z1, Z2, TrUserData).


d_msg_rsp_check_pay(Bin, TrUserData) ->
    dfp_read_field_def_rsp_check_pay(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_check_pay(<<8, Rest/binary>>, Z1,
				 Z2, F1, F2, F3, TrUserData) ->
    d_field_rsp_check_pay_status(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
dfp_read_field_def_rsp_check_pay(<<18, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rsp_check_pay_order_id(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
dfp_read_field_def_rsp_check_pay(<<24, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rsp_check_pay_coins(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_rsp_check_pay(<<>>, 0, 0, F1, F2, F3,
				 _) ->
    #rsp_check_pay{status = F1, order_id = F2, coins = F3};
dfp_read_field_def_rsp_check_pay(Other, Z1, Z2, F1, F2,
				 F3, TrUserData) ->
    dg_read_field_def_rsp_check_pay(Other, Z1, Z2, F1, F2,
				    F3, TrUserData).

dg_read_field_def_rsp_check_pay(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_check_pay(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_rsp_check_pay(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_check_pay_status(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
      18 ->
	  d_field_rsp_check_pay_order_id(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
      24 ->
	  d_field_rsp_check_pay_coins(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_check_pay(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
	    1 ->
		skip_64_rsp_check_pay(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
	    2 ->
		skip_length_delimited_rsp_check_pay(Rest, 0, 0, F1, F2,
						    F3, TrUserData);
	    5 ->
		skip_32_rsp_check_pay(Rest, 0, 0, F1, F2, F3,
				      TrUserData)
	  end
    end;
dg_read_field_def_rsp_check_pay(<<>>, 0, 0, F1, F2, F3,
				_) ->
    #rsp_check_pay{status = F1, order_id = F2, coins = F3}.

d_field_rsp_check_pay_status(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rsp_check_pay_status(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, TrUserData);
d_field_rsp_check_pay_status(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, F3, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_check_pay(Rest, 0, 0, NewFValue,
				     F2, F3, TrUserData).


d_field_rsp_check_pay_order_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rsp_check_pay_order_id(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rsp_check_pay_order_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_rsp_check_pay(Rest2, 0, 0, F1,
				     NewFValue, F3, TrUserData).


d_field_rsp_check_pay_coins(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rsp_check_pay_coins(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_rsp_check_pay_coins(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_check_pay(Rest, 0, 0, F1, F2,
				     NewFValue, TrUserData).


skip_varint_rsp_check_pay(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, TrUserData) ->
    skip_varint_rsp_check_pay(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData);
skip_varint_rsp_check_pay(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rsp_check_pay(Rest, Z1, Z2, F1, F2,
				     F3, TrUserData).


skip_length_delimited_rsp_check_pay(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_check_pay(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_rsp_check_pay(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_check_pay(Rest2, 0, 0, F1, F2,
				     F3, TrUserData).


skip_32_rsp_check_pay(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, TrUserData) ->
    dfp_read_field_def_rsp_check_pay(Rest, Z1, Z2, F1, F2,
				     F3, TrUserData).


skip_64_rsp_check_pay(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, TrUserData) ->
    dfp_read_field_def_rsp_check_pay(Rest, Z1, Z2, F1, F2,
				     F3, TrUserData).


d_msg_res_check_pay(Bin, TrUserData) ->
    dfp_read_field_def_res_check_pay(Bin, 0, 0,
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_res_check_pay(<<10, Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    d_field_res_check_pay_order_id(Rest, Z1, Z2, F1,
				   TrUserData);
dfp_read_field_def_res_check_pay(<<>>, 0, 0, F1, _) ->
    #res_check_pay{order_id = F1};
dfp_read_field_def_res_check_pay(Other, Z1, Z2, F1,
				 TrUserData) ->
    dg_read_field_def_res_check_pay(Other, Z1, Z2, F1,
				    TrUserData).

dg_read_field_def_res_check_pay(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_res_check_pay(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
dg_read_field_def_res_check_pay(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_res_check_pay_order_id(Rest, 0, 0, F1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_res_check_pay(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_res_check_pay(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_res_check_pay(Rest, 0, 0, F1,
						    TrUserData);
	    5 -> skip_32_res_check_pay(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_res_check_pay(<<>>, 0, 0, F1, _) ->
    #res_check_pay{order_id = F1}.

d_field_res_check_pay_order_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_res_check_pay_order_id(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
d_field_res_check_pay_order_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_res_check_pay(Rest2, 0, 0, NewFValue,
				     TrUserData).


skip_varint_res_check_pay(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, TrUserData) ->
    skip_varint_res_check_pay(Rest, Z1, Z2, F1, TrUserData);
skip_varint_res_check_pay(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, TrUserData) ->
    dfp_read_field_def_res_check_pay(Rest, Z1, Z2, F1,
				     TrUserData).


skip_length_delimited_res_check_pay(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_res_check_pay(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
skip_length_delimited_res_check_pay(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_res_check_pay(Rest2, 0, 0, F1,
				     TrUserData).


skip_32_res_check_pay(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      TrUserData) ->
    dfp_read_field_def_res_check_pay(Rest, Z1, Z2, F1,
				     TrUserData).


skip_64_res_check_pay(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      TrUserData) ->
    dfp_read_field_def_res_check_pay(Rest, Z1, Z2, F1,
				     TrUserData).


d_msg_rsp_player_ready(Bin, TrUserData) ->
    dfp_read_field_def_rsp_player_ready(Bin, 0, 0,
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_player_ready(<<8, Rest/binary>>,
				    Z1, Z2, F1, F2, TrUserData) ->
    d_field_rsp_player_ready_uid(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_rsp_player_ready(<<16, Rest/binary>>,
				    Z1, Z2, F1, F2, TrUserData) ->
    d_field_rsp_player_ready_type(Rest, Z1, Z2, F1, F2,
				  TrUserData);
dfp_read_field_def_rsp_player_ready(<<>>, 0, 0, F1, F2,
				    _) ->
    #rsp_player_ready{uid = F1, type = F2};
dfp_read_field_def_rsp_player_ready(Other, Z1, Z2, F1,
				    F2, TrUserData) ->
    dg_read_field_def_rsp_player_ready(Other, Z1, Z2, F1,
				       F2, TrUserData).

dg_read_field_def_rsp_player_ready(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_player_ready(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rsp_player_ready(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_player_ready_uid(Rest, 0, 0, F1, F2,
				       TrUserData);
      16 ->
	  d_field_rsp_player_ready_type(Rest, 0, 0, F1, F2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_player_ready(Rest, 0, 0, F1, F2,
					     TrUserData);
	    1 ->
		skip_64_rsp_player_ready(Rest, 0, 0, F1, F2,
					 TrUserData);
	    2 ->
		skip_length_delimited_rsp_player_ready(Rest, 0, 0, F1,
						       F2, TrUserData);
	    5 ->
		skip_32_rsp_player_ready(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rsp_player_ready(<<>>, 0, 0, F1, F2,
				   _) ->
    #rsp_player_ready{uid = F1, type = F2}.

d_field_rsp_player_ready_uid(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rsp_player_ready_uid(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_rsp_player_ready_uid(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_player_ready(Rest, 0, 0,
					NewFValue, F2, TrUserData).


d_field_rsp_player_ready_type(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rsp_player_ready_type(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
d_field_rsp_player_ready_type(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_player_ready(Rest, 0, 0, F1,
					NewFValue, TrUserData).


skip_varint_rsp_player_ready(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_rsp_player_ready(Rest, Z1, Z2, F1, F2,
				 TrUserData);
skip_varint_rsp_player_ready(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rsp_player_ready(Rest, Z1, Z2, F1,
					F2, TrUserData).


skip_length_delimited_rsp_player_ready(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_player_ready(Rest, N + 7,
					   X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rsp_player_ready(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_player_ready(Rest2, 0, 0, F1, F2,
					TrUserData).


skip_32_rsp_player_ready(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, TrUserData) ->
    dfp_read_field_def_rsp_player_ready(Rest, Z1, Z2, F1,
					F2, TrUserData).


skip_64_rsp_player_ready(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, TrUserData) ->
    dfp_read_field_def_rsp_player_ready(Rest, Z1, Z2, F1,
					F2, TrUserData).


d_msg_rsp_ready(Bin, TrUserData) ->
    dfp_read_field_def_rsp_ready(Bin, 0, 0,
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_ready(<<8, Rest/binary>>, Z1, Z2,
			     F1, TrUserData) ->
    d_field_rsp_ready_status(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_rsp_ready(<<>>, 0, 0, F1, _) ->
    #rsp_ready{status = F1};
dfp_read_field_def_rsp_ready(Other, Z1, Z2, F1,
			     TrUserData) ->
    dg_read_field_def_rsp_ready(Other, Z1, Z2, F1,
				TrUserData).

dg_read_field_def_rsp_ready(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_ready(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
dg_read_field_def_rsp_ready(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_ready_status(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rsp_ready(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_rsp_ready(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rsp_ready(Rest, 0, 0, F1,
						TrUserData);
	    5 -> skip_32_rsp_ready(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rsp_ready(<<>>, 0, 0, F1, _) ->
    #rsp_ready{status = F1}.

d_field_rsp_ready_status(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rsp_ready_status(Rest, N + 7, X bsl N + Acc, F1,
			     TrUserData);
d_field_rsp_ready_status(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, TrUserData) ->
    ZValue = X bsl N + Acc,
    NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
		   true -> -(ZValue + 1 bsr 1)
		end,
    dfp_read_field_def_rsp_ready(Rest, 0, 0, NewFValue,
				 TrUserData).


skip_varint_rsp_ready(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    skip_varint_rsp_ready(Rest, Z1, Z2, F1, TrUserData);
skip_varint_rsp_ready(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    dfp_read_field_def_rsp_ready(Rest, Z1, Z2, F1,
				 TrUserData).


skip_length_delimited_rsp_ready(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_ready(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rsp_ready(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_ready(Rest2, 0, 0, F1,
				 TrUserData).


skip_32_rsp_ready(<<_:32, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_rsp_ready(Rest, Z1, Z2, F1,
				 TrUserData).


skip_64_rsp_ready(<<_:64, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_rsp_ready(Rest, Z1, Z2, F1,
				 TrUserData).


d_msg_notify_show(Bin, TrUserData) ->
    dfp_read_field_def_notify_show(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_notify_show(<<8, Rest/binary>>, Z1,
			       Z2, F1, TrUserData) ->
    d_field_notify_show_uid(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_notify_show(<<>>, 0, 0, F1, _) ->
    #notify_show{uid = F1};
dfp_read_field_def_notify_show(Other, Z1, Z2, F1,
			       TrUserData) ->
    dg_read_field_def_notify_show(Other, Z1, Z2, F1,
				  TrUserData).

dg_read_field_def_notify_show(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_notify_show(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_notify_show(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_notify_show_uid(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_notify_show(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_notify_show(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_notify_show(Rest, 0, 0, F1,
						  TrUserData);
	    5 -> skip_32_notify_show(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_notify_show(<<>>, 0, 0, F1, _) ->
    #notify_show{uid = F1}.

d_field_notify_show_uid(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, TrUserData)
    when N < 57 ->
    d_field_notify_show_uid(Rest, N + 7, X bsl N + Acc, F1,
			    TrUserData);
d_field_notify_show_uid(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_notify_show(Rest, 0, 0, NewFValue,
				   TrUserData).


skip_varint_notify_show(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    skip_varint_notify_show(Rest, Z1, Z2, F1, TrUserData);
skip_varint_notify_show(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    dfp_read_field_def_notify_show(Rest, Z1, Z2, F1,
				   TrUserData).


skip_length_delimited_notify_show(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_notify_show(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_notify_show(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_notify_show(Rest2, 0, 0, F1,
				   TrUserData).


skip_32_notify_show(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_notify_show(Rest, Z1, Z2, F1,
				   TrUserData).


skip_64_notify_show(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_notify_show(Rest, Z1, Z2, F1,
				   TrUserData).


d_msg_rsp_player_chat(Bin, TrUserData) ->
    dfp_read_field_def_rsp_player_chat(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_player_chat(<<10, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rsp_player_chat_msg(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_rsp_player_chat(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rsp_player_chat_url(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_rsp_player_chat(<<24, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rsp_player_chat_uid(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_rsp_player_chat(<<>>, 0, 0, F1, F2,
				   F3, _) ->
    #rsp_player_chat{msg = F1, url = F2, uid = F3};
dfp_read_field_def_rsp_player_chat(Other, Z1, Z2, F1,
				   F2, F3, TrUserData) ->
    dg_read_field_def_rsp_player_chat(Other, Z1, Z2, F1, F2,
				      F3, TrUserData).

dg_read_field_def_rsp_player_chat(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_player_chat(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_rsp_player_chat(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rsp_player_chat_msg(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      18 ->
	  d_field_rsp_player_chat_url(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      24 ->
	  d_field_rsp_player_chat_uid(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_player_chat(Rest, 0, 0, F1, F2, F3,
					    TrUserData);
	    1 ->
		skip_64_rsp_player_chat(Rest, 0, 0, F1, F2, F3,
					TrUserData);
	    2 ->
		skip_length_delimited_rsp_player_chat(Rest, 0, 0, F1,
						      F2, F3, TrUserData);
	    5 ->
		skip_32_rsp_player_chat(Rest, 0, 0, F1, F2, F3,
					TrUserData)
	  end
    end;
dg_read_field_def_rsp_player_chat(<<>>, 0, 0, F1, F2,
				  F3, _) ->
    #rsp_player_chat{msg = F1, url = F2, uid = F3}.

d_field_rsp_player_chat_msg(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rsp_player_chat_msg(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_rsp_player_chat_msg(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_rsp_player_chat(Rest2, 0, 0,
				       NewFValue, F2, F3, TrUserData).


d_field_rsp_player_chat_url(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rsp_player_chat_url(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_rsp_player_chat_url(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_rsp_player_chat(Rest2, 0, 0, F1,
				       NewFValue, F3, TrUserData).


d_field_rsp_player_chat_uid(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rsp_player_chat_uid(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_rsp_player_chat_uid(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_player_chat(Rest, 0, 0, F1, F2,
				       NewFValue, TrUserData).


skip_varint_rsp_player_chat(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_rsp_player_chat(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
skip_varint_rsp_player_chat(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rsp_player_chat(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


skip_length_delimited_rsp_player_chat(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_player_chat(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3,
					  TrUserData);
skip_length_delimited_rsp_player_chat(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_player_chat(Rest2, 0, 0, F1, F2,
				       F3, TrUserData).


skip_32_rsp_player_chat(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rsp_player_chat(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


skip_64_rsp_player_chat(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rsp_player_chat(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


d_msg_rsp_result(Bin, TrUserData) ->
    dfp_read_field_def_rsp_result(Bin, 0, 0,
				  id([], TrUserData), TrUserData).

dfp_read_field_def_rsp_result(<<10, Rest/binary>>, Z1,
			      Z2, F1, TrUserData) ->
    d_field_rsp_result_players(Rest, Z1, Z2, F1,
			       TrUserData);
dfp_read_field_def_rsp_result(<<>>, 0, 0, F1,
			      TrUserData) ->
    #rsp_result{players = lists_reverse(F1, TrUserData)};
dfp_read_field_def_rsp_result(Other, Z1, Z2, F1,
			      TrUserData) ->
    dg_read_field_def_rsp_result(Other, Z1, Z2, F1,
				 TrUserData).

dg_read_field_def_rsp_result(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_result(Rest, N + 7, X bsl N + Acc,
				 F1, TrUserData);
dg_read_field_def_rsp_result(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rsp_result_players(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rsp_result(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_rsp_result(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rsp_result(Rest, 0, 0, F1,
						 TrUserData);
	    5 -> skip_32_rsp_result(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rsp_result(<<>>, 0, 0, F1,
			     TrUserData) ->
    #rsp_result{players = lists_reverse(F1, TrUserData)}.

d_field_rsp_result_players(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rsp_result_players(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
d_field_rsp_result_players(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_pb_player(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rsp_result(Rest2, 0, 0,
				  cons(NewFValue, F1, TrUserData), TrUserData).


skip_varint_rsp_result(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, TrUserData) ->
    skip_varint_rsp_result(Rest, Z1, Z2, F1, TrUserData);
skip_varint_rsp_result(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, TrUserData) ->
    dfp_read_field_def_rsp_result(Rest, Z1, Z2, F1,
				  TrUserData).


skip_length_delimited_rsp_result(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_result(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rsp_result(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_result(Rest2, 0, 0, F1,
				  TrUserData).


skip_32_rsp_result(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   TrUserData) ->
    dfp_read_field_def_rsp_result(Rest, Z1, Z2, F1,
				  TrUserData).


skip_64_rsp_result(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   TrUserData) ->
    dfp_read_field_def_rsp_result(Rest, Z1, Z2, F1,
				  TrUserData).


d_msg_req_start(Bin, TrUserData) ->
    dfp_read_field_def_req_start(Bin, 0, 0, TrUserData).

dfp_read_field_def_req_start(<<>>, 0, 0, _) ->
    #req_start{};
dfp_read_field_def_req_start(Other, Z1, Z2,
			     TrUserData) ->
    dg_read_field_def_req_start(Other, Z1, Z2, TrUserData).

dg_read_field_def_req_start(<<1:1, X:7, Rest/binary>>,
			    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_start(Rest, N + 7, X bsl N + Acc,
				TrUserData);
dg_read_field_def_req_start(<<0:1, X:7, Rest/binary>>,
			    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_req_start(Rest, 0, 0, TrUserData);
      1 -> skip_64_req_start(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_req_start(Rest, 0, 0, TrUserData);
      5 -> skip_32_req_start(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_req_start(<<>>, 0, 0, _) ->
    #req_start{}.

skip_varint_req_start(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    skip_varint_req_start(Rest, Z1, Z2, TrUserData);
skip_varint_req_start(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_req_start(Rest, Z1, Z2, TrUserData).


skip_length_delimited_req_start(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_start(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
skip_length_delimited_req_start(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_start(Rest2, 0, 0, TrUserData).


skip_32_req_start(<<_:32, Rest/binary>>, Z1, Z2,
		  TrUserData) ->
    dfp_read_field_def_req_start(Rest, Z1, Z2, TrUserData).


skip_64_req_start(<<_:64, Rest/binary>>, Z1, Z2,
		  TrUserData) ->
    dfp_read_field_def_req_start(Rest, Z1, Z2, TrUserData).


d_msg_req_heart(Bin, TrUserData) ->
    dfp_read_field_def_req_heart(Bin, 0, 0, TrUserData).

dfp_read_field_def_req_heart(<<>>, 0, 0, _) ->
    #req_heart{};
dfp_read_field_def_req_heart(Other, Z1, Z2,
			     TrUserData) ->
    dg_read_field_def_req_heart(Other, Z1, Z2, TrUserData).

dg_read_field_def_req_heart(<<1:1, X:7, Rest/binary>>,
			    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_heart(Rest, N + 7, X bsl N + Acc,
				TrUserData);
dg_read_field_def_req_heart(<<0:1, X:7, Rest/binary>>,
			    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_req_heart(Rest, 0, 0, TrUserData);
      1 -> skip_64_req_heart(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_req_heart(Rest, 0, 0, TrUserData);
      5 -> skip_32_req_heart(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_req_heart(<<>>, 0, 0, _) ->
    #req_heart{}.

skip_varint_req_heart(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    skip_varint_req_heart(Rest, Z1, Z2, TrUserData);
skip_varint_req_heart(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_req_heart(Rest, Z1, Z2, TrUserData).


skip_length_delimited_req_heart(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_heart(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
skip_length_delimited_req_heart(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_heart(Rest2, 0, 0, TrUserData).


skip_32_req_heart(<<_:32, Rest/binary>>, Z1, Z2,
		  TrUserData) ->
    dfp_read_field_def_req_heart(Rest, Z1, Z2, TrUserData).


skip_64_req_heart(<<_:64, Rest/binary>>, Z1, Z2,
		  TrUserData) ->
    dfp_read_field_def_req_heart(Rest, Z1, Z2, TrUserData).


d_msg_rsp_chat(Bin, TrUserData) ->
    dfp_read_field_def_rsp_chat(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_chat(<<8, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_rsp_chat_status(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_rsp_chat(<<>>, 0, 0, F1, _) ->
    #rsp_chat{status = F1};
dfp_read_field_def_rsp_chat(Other, Z1, Z2, F1,
			    TrUserData) ->
    dg_read_field_def_rsp_chat(Other, Z1, Z2, F1,
			       TrUserData).

dg_read_field_def_rsp_chat(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_chat(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
dg_read_field_def_rsp_chat(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_chat_status(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rsp_chat(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_rsp_chat(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rsp_chat(Rest, 0, 0, F1,
					       TrUserData);
	    5 -> skip_32_rsp_chat(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rsp_chat(<<>>, 0, 0, F1, _) ->
    #rsp_chat{status = F1}.

d_field_rsp_chat_status(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rsp_chat_status(Rest, N + 7, X bsl N + Acc, F1,
			    TrUserData);
d_field_rsp_chat_status(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_chat(Rest, 0, 0, NewFValue,
				TrUserData).


skip_varint_rsp_chat(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    skip_varint_rsp_chat(Rest, Z1, Z2, F1, TrUserData);
skip_varint_rsp_chat(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    dfp_read_field_def_rsp_chat(Rest, Z1, Z2, F1,
				TrUserData).


skip_length_delimited_rsp_chat(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_chat(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rsp_chat(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_chat(Rest2, 0, 0, F1,
				TrUserData).


skip_32_rsp_chat(<<_:32, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_rsp_chat(Rest, Z1, Z2, F1,
				TrUserData).


skip_64_rsp_chat(<<_:64, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_rsp_chat(Rest, Z1, Z2, F1,
				TrUserData).


d_msg_rsp_save_data(Bin, TrUserData) ->
    dfp_read_field_def_rsp_save_data(Bin, 0, 0,
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_save_data(<<8, Rest/binary>>, Z1,
				 Z2, F1, TrUserData) ->
    d_field_rsp_save_data_status(Rest, Z1, Z2, F1,
				 TrUserData);
dfp_read_field_def_rsp_save_data(<<>>, 0, 0, F1, _) ->
    #rsp_save_data{status = F1};
dfp_read_field_def_rsp_save_data(Other, Z1, Z2, F1,
				 TrUserData) ->
    dg_read_field_def_rsp_save_data(Other, Z1, Z2, F1,
				    TrUserData).

dg_read_field_def_rsp_save_data(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_save_data(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
dg_read_field_def_rsp_save_data(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_save_data_status(Rest, 0, 0, F1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_save_data(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_rsp_save_data(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rsp_save_data(Rest, 0, 0, F1,
						    TrUserData);
	    5 -> skip_32_rsp_save_data(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rsp_save_data(<<>>, 0, 0, F1, _) ->
    #rsp_save_data{status = F1}.

d_field_rsp_save_data_status(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rsp_save_data_status(Rest, N + 7, X bsl N + Acc,
				 F1, TrUserData);
d_field_rsp_save_data_status(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_save_data(Rest, 0, 0, NewFValue,
				     TrUserData).


skip_varint_rsp_save_data(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, TrUserData) ->
    skip_varint_rsp_save_data(Rest, Z1, Z2, F1, TrUserData);
skip_varint_rsp_save_data(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, TrUserData) ->
    dfp_read_field_def_rsp_save_data(Rest, Z1, Z2, F1,
				     TrUserData).


skip_length_delimited_rsp_save_data(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_save_data(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rsp_save_data(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_save_data(Rest2, 0, 0, F1,
				     TrUserData).


skip_32_rsp_save_data(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      TrUserData) ->
    dfp_read_field_def_rsp_save_data(Rest, Z1, Z2, F1,
				     TrUserData).


skip_64_rsp_save_data(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      TrUserData) ->
    dfp_read_field_def_rsp_save_data(Rest, Z1, Z2, F1,
				     TrUserData).


d_msg_req_save_data(Bin, TrUserData) ->
    dfp_read_field_def_req_save_data(Bin, 0, 0,
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_req_save_data(<<10, Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    d_field_req_save_data_data(Rest, Z1, Z2, F1,
			       TrUserData);
dfp_read_field_def_req_save_data(<<>>, 0, 0, F1, _) ->
    #req_save_data{data = F1};
dfp_read_field_def_req_save_data(Other, Z1, Z2, F1,
				 TrUserData) ->
    dg_read_field_def_req_save_data(Other, Z1, Z2, F1,
				    TrUserData).

dg_read_field_def_req_save_data(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_save_data(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
dg_read_field_def_req_save_data(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_req_save_data_data(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_req_save_data(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_req_save_data(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_req_save_data(Rest, 0, 0, F1,
						    TrUserData);
	    5 -> skip_32_req_save_data(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_req_save_data(<<>>, 0, 0, F1, _) ->
    #req_save_data{data = F1}.

d_field_req_save_data_data(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 57 ->
    d_field_req_save_data_data(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
d_field_req_save_data_data(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_req_save_data(Rest2, 0, 0, NewFValue,
				     TrUserData).


skip_varint_req_save_data(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, TrUserData) ->
    skip_varint_req_save_data(Rest, Z1, Z2, F1, TrUserData);
skip_varint_req_save_data(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, TrUserData) ->
    dfp_read_field_def_req_save_data(Rest, Z1, Z2, F1,
				     TrUserData).


skip_length_delimited_req_save_data(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_save_data(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
skip_length_delimited_req_save_data(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_save_data(Rest2, 0, 0, F1,
				     TrUserData).


skip_32_req_save_data(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      TrUserData) ->
    dfp_read_field_def_req_save_data(Rest, Z1, Z2, F1,
				     TrUserData).


skip_64_req_save_data(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      TrUserData) ->
    dfp_read_field_def_req_save_data(Rest, Z1, Z2, F1,
				     TrUserData).


d_msg_req_coins_rank(Bin, TrUserData) ->
    dfp_read_field_def_req_coins_rank(Bin, 0, 0,
				      TrUserData).

dfp_read_field_def_req_coins_rank(<<>>, 0, 0, _) ->
    #req_coins_rank{};
dfp_read_field_def_req_coins_rank(Other, Z1, Z2,
				  TrUserData) ->
    dg_read_field_def_req_coins_rank(Other, Z1, Z2,
				     TrUserData).

dg_read_field_def_req_coins_rank(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_coins_rank(Rest, N + 7,
				     X bsl N + Acc, TrUserData);
dg_read_field_def_req_coins_rank(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_req_coins_rank(Rest, 0, 0, TrUserData);
      1 -> skip_64_req_coins_rank(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_req_coins_rank(Rest, 0, 0,
					       TrUserData);
      5 -> skip_32_req_coins_rank(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_req_coins_rank(<<>>, 0, 0, _) ->
    #req_coins_rank{}.

skip_varint_req_coins_rank(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, TrUserData) ->
    skip_varint_req_coins_rank(Rest, Z1, Z2, TrUserData);
skip_varint_req_coins_rank(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, TrUserData) ->
    dfp_read_field_def_req_coins_rank(Rest, Z1, Z2,
				      TrUserData).


skip_length_delimited_req_coins_rank(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_coins_rank(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
skip_length_delimited_req_coins_rank(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_coins_rank(Rest2, 0, 0,
				      TrUserData).


skip_32_req_coins_rank(<<_:32, Rest/binary>>, Z1, Z2,
		       TrUserData) ->
    dfp_read_field_def_req_coins_rank(Rest, Z1, Z2,
				      TrUserData).


skip_64_req_coins_rank(<<_:64, Rest/binary>>, Z1, Z2,
		       TrUserData) ->
    dfp_read_field_def_req_coins_rank(Rest, Z1, Z2,
				      TrUserData).


d_msg_rsp_task(Bin, TrUserData) ->
    dfp_read_field_def_rsp_task(Bin, 0, 0,
				id([], TrUserData), TrUserData).

dfp_read_field_def_rsp_task(<<10, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_rsp_task_tasks(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_rsp_task(<<>>, 0, 0, F1,
			    TrUserData) ->
    #rsp_task{tasks = lists_reverse(F1, TrUserData)};
dfp_read_field_def_rsp_task(Other, Z1, Z2, F1,
			    TrUserData) ->
    dg_read_field_def_rsp_task(Other, Z1, Z2, F1,
			       TrUserData).

dg_read_field_def_rsp_task(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_task(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
dg_read_field_def_rsp_task(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rsp_task_tasks(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rsp_task(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_rsp_task(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rsp_task(Rest, 0, 0, F1,
					       TrUserData);
	    5 -> skip_32_rsp_task(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rsp_task(<<>>, 0, 0, F1,
			   TrUserData) ->
    #rsp_task{tasks = lists_reverse(F1, TrUserData)}.

d_field_rsp_task_tasks(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rsp_task_tasks(Rest, N + 7, X bsl N + Acc, F1,
			   TrUserData);
d_field_rsp_task_tasks(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_pb_task(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rsp_task(Rest2, 0, 0,
				cons(NewFValue, F1, TrUserData), TrUserData).


skip_varint_rsp_task(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    skip_varint_rsp_task(Rest, Z1, Z2, F1, TrUserData);
skip_varint_rsp_task(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    dfp_read_field_def_rsp_task(Rest, Z1, Z2, F1,
				TrUserData).


skip_length_delimited_rsp_task(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_task(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rsp_task(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_task(Rest2, 0, 0, F1,
				TrUserData).


skip_32_rsp_task(<<_:32, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_rsp_task(Rest, Z1, Z2, F1,
				TrUserData).


skip_64_rsp_task(<<_:64, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_rsp_task(Rest, Z1, Z2, F1,
				TrUserData).


d_msg_notify_all_show(Bin, TrUserData) ->
    dfp_read_field_def_notify_all_show(Bin, 0, 0,
				       TrUserData).

dfp_read_field_def_notify_all_show(<<>>, 0, 0, _) ->
    #notify_all_show{};
dfp_read_field_def_notify_all_show(Other, Z1, Z2,
				   TrUserData) ->
    dg_read_field_def_notify_all_show(Other, Z1, Z2,
				      TrUserData).

dg_read_field_def_notify_all_show(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_notify_all_show(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
dg_read_field_def_notify_all_show(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_notify_all_show(Rest, 0, 0, TrUserData);
      1 -> skip_64_notify_all_show(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_notify_all_show(Rest, 0, 0,
						TrUserData);
      5 -> skip_32_notify_all_show(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_notify_all_show(<<>>, 0, 0, _) ->
    #notify_all_show{}.

skip_varint_notify_all_show(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, TrUserData) ->
    skip_varint_notify_all_show(Rest, Z1, Z2, TrUserData);
skip_varint_notify_all_show(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, TrUserData) ->
    dfp_read_field_def_notify_all_show(Rest, Z1, Z2,
				       TrUserData).


skip_length_delimited_notify_all_show(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_notify_all_show(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
skip_length_delimited_notify_all_show(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_notify_all_show(Rest2, 0, 0,
				       TrUserData).


skip_32_notify_all_show(<<_:32, Rest/binary>>, Z1, Z2,
			TrUserData) ->
    dfp_read_field_def_notify_all_show(Rest, Z1, Z2,
				       TrUserData).


skip_64_notify_all_show(<<_:64, Rest/binary>>, Z1, Z2,
			TrUserData) ->
    dfp_read_field_def_notify_all_show(Rest, Z1, Z2,
				       TrUserData).


d_msg_req_score(Bin, TrUserData) ->
    dfp_read_field_def_req_score(Bin, 0, 0,
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_req_score(<<8, Rest/binary>>, Z1, Z2,
			     F1, TrUserData) ->
    d_field_req_score_score(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_req_score(<<>>, 0, 0, F1, _) ->
    #req_score{score = F1};
dfp_read_field_def_req_score(Other, Z1, Z2, F1,
			     TrUserData) ->
    dg_read_field_def_req_score(Other, Z1, Z2, F1,
				TrUserData).

dg_read_field_def_req_score(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_score(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
dg_read_field_def_req_score(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_req_score_score(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_req_score(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_req_score(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_req_score(Rest, 0, 0, F1,
						TrUserData);
	    5 -> skip_32_req_score(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_req_score(<<>>, 0, 0, F1, _) ->
    #req_score{score = F1}.

d_field_req_score_score(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, TrUserData)
    when N < 57 ->
    d_field_req_score_score(Rest, N + 7, X bsl N + Acc, F1,
			    TrUserData);
d_field_req_score_score(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_req_score(Rest, 0, 0, NewFValue,
				 TrUserData).


skip_varint_req_score(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    skip_varint_req_score(Rest, Z1, Z2, F1, TrUserData);
skip_varint_req_score(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    dfp_read_field_def_req_score(Rest, Z1, Z2, F1,
				 TrUserData).


skip_length_delimited_req_score(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_score(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_req_score(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_score(Rest2, 0, 0, F1,
				 TrUserData).


skip_32_req_score(<<_:32, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_req_score(Rest, Z1, Z2, F1,
				 TrUserData).


skip_64_req_score(<<_:64, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_req_score(Rest, Z1, Z2, F1,
				 TrUserData).


d_msg_req_leave(Bin, TrUserData) ->
    dfp_read_field_def_req_leave(Bin, 0, 0,
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_req_leave(<<8, Rest/binary>>, Z1, Z2,
			     F1, TrUserData) ->
    d_field_req_leave_uid(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_req_leave(<<>>, 0, 0, F1, _) ->
    #req_leave{uid = F1};
dfp_read_field_def_req_leave(Other, Z1, Z2, F1,
			     TrUserData) ->
    dg_read_field_def_req_leave(Other, Z1, Z2, F1,
				TrUserData).

dg_read_field_def_req_leave(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_leave(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
dg_read_field_def_req_leave(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_req_leave_uid(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_req_leave(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_req_leave(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_req_leave(Rest, 0, 0, F1,
						TrUserData);
	    5 -> skip_32_req_leave(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_req_leave(<<>>, 0, 0, F1, _) ->
    #req_leave{uid = F1}.

d_field_req_leave_uid(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, TrUserData)
    when N < 57 ->
    d_field_req_leave_uid(Rest, N + 7, X bsl N + Acc, F1,
			  TrUserData);
d_field_req_leave_uid(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_req_leave(Rest, 0, 0, NewFValue,
				 TrUserData).


skip_varint_req_leave(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    skip_varint_req_leave(Rest, Z1, Z2, F1, TrUserData);
skip_varint_req_leave(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    dfp_read_field_def_req_leave(Rest, Z1, Z2, F1,
				 TrUserData).


skip_length_delimited_req_leave(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_leave(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_req_leave(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_leave(Rest2, 0, 0, F1,
				 TrUserData).


skip_32_req_leave(<<_:32, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_req_leave(Rest, Z1, Z2, F1,
				 TrUserData).


skip_64_req_leave(<<_:64, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_req_leave(Rest, Z1, Z2, F1,
				 TrUserData).


d_msg_rsp_content(Bin, TrUserData) ->
    dfp_read_field_def_rsp_content(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_content(<<8, Rest/binary>>, Z1,
			       Z2, F1, TrUserData) ->
    d_field_rsp_content_status(Rest, Z1, Z2, F1,
			       TrUserData);
dfp_read_field_def_rsp_content(<<>>, 0, 0, F1, _) ->
    #rsp_content{status = F1};
dfp_read_field_def_rsp_content(Other, Z1, Z2, F1,
			       TrUserData) ->
    dg_read_field_def_rsp_content(Other, Z1, Z2, F1,
				  TrUserData).

dg_read_field_def_rsp_content(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_content(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_rsp_content(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_content_status(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_content(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_rsp_content(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rsp_content(Rest, 0, 0, F1,
						  TrUserData);
	    5 -> skip_32_rsp_content(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rsp_content(<<>>, 0, 0, F1, _) ->
    #rsp_content{status = F1}.

d_field_rsp_content_status(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rsp_content_status(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
d_field_rsp_content_status(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_rsp_content(Rest, 0, 0, NewFValue,
				   TrUserData).


skip_varint_rsp_content(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    skip_varint_rsp_content(Rest, Z1, Z2, F1, TrUserData);
skip_varint_rsp_content(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    dfp_read_field_def_rsp_content(Rest, Z1, Z2, F1,
				   TrUserData).


skip_length_delimited_rsp_content(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_content(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rsp_content(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_content(Rest2, 0, 0, F1,
				   TrUserData).


skip_32_rsp_content(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_rsp_content(Rest, Z1, Z2, F1,
				   TrUserData).


skip_64_rsp_content(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_rsp_content(Rest, Z1, Z2, F1,
				   TrUserData).


d_msg_req_content(Bin, TrUserData) ->
    dfp_read_field_def_req_content(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_req_content(<<10, Rest/binary>>, Z1,
			       Z2, F1, F2, TrUserData) ->
    d_field_req_content_weixin(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_req_content(<<18, Rest/binary>>, Z1,
			       Z2, F1, F2, TrUserData) ->
    d_field_req_content_text(Rest, Z1, Z2, F1, F2,
			     TrUserData);
dfp_read_field_def_req_content(<<>>, 0, 0, F1, F2, _) ->
    #req_content{weixin = F1, text = F2};
dfp_read_field_def_req_content(Other, Z1, Z2, F1, F2,
			       TrUserData) ->
    dg_read_field_def_req_content(Other, Z1, Z2, F1, F2,
				  TrUserData).

dg_read_field_def_req_content(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_content(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_req_content(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_req_content_weixin(Rest, 0, 0, F1, F2,
				     TrUserData);
      18 ->
	  d_field_req_content_text(Rest, 0, 0, F1, F2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_req_content(Rest, 0, 0, F1, F2, TrUserData);
	    1 ->
		skip_64_req_content(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_req_content(Rest, 0, 0, F1, F2,
						  TrUserData);
	    5 -> skip_32_req_content(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_req_content(<<>>, 0, 0, F1, F2, _) ->
    #req_content{weixin = F1, text = F2}.

d_field_req_content_weixin(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_req_content_weixin(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_req_content_weixin(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_req_content(Rest2, 0, 0, NewFValue,
				   F2, TrUserData).


d_field_req_content_text(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_req_content_text(Rest, N + 7, X bsl N + Acc, F1,
			     F2, TrUserData);
d_field_req_content_text(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_req_content(Rest2, 0, 0, F1,
				   NewFValue, TrUserData).


skip_varint_req_content(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, TrUserData) ->
    skip_varint_req_content(Rest, Z1, Z2, F1, F2,
			    TrUserData);
skip_varint_req_content(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_req_content(Rest, Z1, Z2, F1, F2,
				   TrUserData).


skip_length_delimited_req_content(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_content(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_req_content(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_content(Rest2, 0, 0, F1, F2,
				   TrUserData).


skip_32_req_content(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, TrUserData) ->
    dfp_read_field_def_req_content(Rest, Z1, Z2, F1, F2,
				   TrUserData).


skip_64_req_content(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, TrUserData) ->
    dfp_read_field_def_req_content(Rest, Z1, Z2, F1, F2,
				   TrUserData).


d_msg_req_chat(Bin, TrUserData) ->
    dfp_read_field_def_req_chat(Bin, 0, 0,
				id(undefined, TrUserData), id([], TrUserData),
				TrUserData).

dfp_read_field_def_req_chat(<<10, Rest/binary>>, Z1, Z2,
			    F1, F2, TrUserData) ->
    d_field_req_chat_msg(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_req_chat(<<18, Rest/binary>>, Z1, Z2,
			    F1, F2, TrUserData) ->
    d_field_req_chat_voice(Rest, Z1, Z2, F1, F2,
			   TrUserData);
dfp_read_field_def_req_chat(<<>>, 0, 0, F1, F2,
			    TrUserData) ->
    #req_chat{msg = F1,
	      voice = lists_reverse(F2, TrUserData)};
dfp_read_field_def_req_chat(Other, Z1, Z2, F1, F2,
			    TrUserData) ->
    dg_read_field_def_req_chat(Other, Z1, Z2, F1, F2,
			       TrUserData).

dg_read_field_def_req_chat(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_chat(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
dg_read_field_def_req_chat(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_req_chat_msg(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_req_chat_voice(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_req_chat(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_req_chat(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_req_chat(Rest, 0, 0, F1, F2,
					       TrUserData);
	    5 -> skip_32_req_chat(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_req_chat(<<>>, 0, 0, F1, F2,
			   TrUserData) ->
    #req_chat{msg = F1,
	      voice = lists_reverse(F2, TrUserData)}.

d_field_req_chat_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, TrUserData)
    when N < 57 ->
    d_field_req_chat_msg(Rest, N + 7, X bsl N + Acc, F1, F2,
			 TrUserData);
d_field_req_chat_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_req_chat(Rest2, 0, 0, NewFValue, F2,
				TrUserData).


d_field_req_chat_voice(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_req_chat_voice(Rest, N + 7, X bsl N + Acc, F1,
			   F2, TrUserData);
d_field_req_chat_voice(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_req_chat(Rest2, 0, 0, F1,
				cons(NewFValue, F2, TrUserData), TrUserData).


skip_varint_req_chat(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, TrUserData) ->
    skip_varint_req_chat(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_req_chat(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, TrUserData) ->
    dfp_read_field_def_req_chat(Rest, Z1, Z2, F1, F2,
				TrUserData).


skip_length_delimited_req_chat(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_chat(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_req_chat(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_chat(Rest2, 0, 0, F1, F2,
				TrUserData).


skip_32_req_chat(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		 TrUserData) ->
    dfp_read_field_def_req_chat(Rest, Z1, Z2, F1, F2,
				TrUserData).


skip_64_req_chat(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		 TrUserData) ->
    dfp_read_field_def_req_chat(Rest, Z1, Z2, F1, F2,
				TrUserData).


d_msg_rsp_pub(Bin, TrUserData) ->
    dfp_read_field_def_rsp_pub(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_pub(<<8, Rest/binary>>, Z1, Z2,
			   F1, F2, TrUserData) ->
    d_field_rsp_pub_status(Rest, Z1, Z2, F1, F2,
			   TrUserData);
dfp_read_field_def_rsp_pub(<<18, Rest/binary>>, Z1, Z2,
			   F1, F2, TrUserData) ->
    d_field_rsp_pub_pub(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_rsp_pub(<<>>, 0, 0, F1, F2, _) ->
    #rsp_pub{status = F1, pub = F2};
dfp_read_field_def_rsp_pub(Other, Z1, Z2, F1, F2,
			   TrUserData) ->
    dg_read_field_def_rsp_pub(Other, Z1, Z2, F1, F2,
			      TrUserData).

dg_read_field_def_rsp_pub(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rsp_pub(Rest, N + 7, X bsl N + Acc,
			      F1, F2, TrUserData);
dg_read_field_def_rsp_pub(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rsp_pub_status(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_rsp_pub_pub(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rsp_pub(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_rsp_pub(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_rsp_pub(Rest, 0, 0, F1, F2,
					      TrUserData);
	    5 -> skip_32_rsp_pub(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rsp_pub(<<>>, 0, 0, F1, F2, _) ->
    #rsp_pub{status = F1, pub = F2}.

d_field_rsp_pub_status(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rsp_pub_status(Rest, N + 7, X bsl N + Acc, F1,
			   F2, TrUserData);
d_field_rsp_pub_status(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F2, TrUserData) ->
    ZValue = X bsl N + Acc,
    NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
		   true -> -(ZValue + 1 bsr 1)
		end,
    dfp_read_field_def_rsp_pub(Rest, 0, 0, NewFValue, F2,
			       TrUserData).


d_field_rsp_pub_pub(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, TrUserData)
    when N < 57 ->
    d_field_rsp_pub_pub(Rest, N + 7, X bsl N + Acc, F1, F2,
			TrUserData);
d_field_rsp_pub_pub(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_rsp_pub(Rest2, 0, 0, F1, NewFValue,
			       TrUserData).


skip_varint_rsp_pub(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, TrUserData) ->
    skip_varint_rsp_pub(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_rsp_pub(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, TrUserData) ->
    dfp_read_field_def_rsp_pub(Rest, Z1, Z2, F1, F2,
			       TrUserData).


skip_length_delimited_rsp_pub(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rsp_pub(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rsp_pub(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rsp_pub(Rest2, 0, 0, F1, F2,
			       TrUserData).


skip_32_rsp_pub(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		TrUserData) ->
    dfp_read_field_def_rsp_pub(Rest, Z1, Z2, F1, F2,
			       TrUserData).


skip_64_rsp_pub(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		TrUserData) ->
    dfp_read_field_def_rsp_pub(Rest, Z1, Z2, F1, F2,
			       TrUserData).


d_msg_req_pub(Bin, TrUserData) ->
    dfp_read_field_def_req_pub(Bin, 0, 0, TrUserData).

dfp_read_field_def_req_pub(<<>>, 0, 0, _) -> #req_pub{};
dfp_read_field_def_req_pub(Other, Z1, Z2, TrUserData) ->
    dg_read_field_def_req_pub(Other, Z1, Z2, TrUserData).

dg_read_field_def_req_pub(<<1:1, X:7, Rest/binary>>, N,
			  Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req_pub(Rest, N + 7, X bsl N + Acc,
			      TrUserData);
dg_read_field_def_req_pub(<<0:1, X:7, Rest/binary>>, N,
			  Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_req_pub(Rest, 0, 0, TrUserData);
      1 -> skip_64_req_pub(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_req_pub(Rest, 0, 0, TrUserData);
      5 -> skip_32_req_pub(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_req_pub(<<>>, 0, 0, _) -> #req_pub{}.

skip_varint_req_pub(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    skip_varint_req_pub(Rest, Z1, Z2, TrUserData);
skip_varint_req_pub(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_req_pub(Rest, Z1, Z2, TrUserData).


skip_length_delimited_req_pub(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_req_pub(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
skip_length_delimited_req_pub(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_pub(Rest2, 0, 0, TrUserData).


skip_32_req_pub(<<_:32, Rest/binary>>, Z1, Z2,
		TrUserData) ->
    dfp_read_field_def_req_pub(Rest, Z1, Z2, TrUserData).


skip_64_req_pub(<<_:64, Rest/binary>>, Z1, Z2,
		TrUserData) ->
    dfp_read_field_def_req_pub(Rest, Z1, Z2, TrUserData).






merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #req_join{} ->
	  merge_msg_req_join(Prev, New, TrUserData);
      #req_login{} ->
	  merge_msg_req_login(Prev, New, TrUserData);
      #rsp_create_room{} ->
	  merge_msg_rsp_create_room(Prev, New, TrUserData);
      #pb_rank_player{} ->
	  merge_msg_pb_rank_player(Prev, New, TrUserData);
      #rsp_coins_rank{} ->
	  merge_msg_rsp_coins_rank(Prev, New, TrUserData);
      #rsp_pay{} -> merge_msg_rsp_pay(Prev, New, TrUserData);
      #req_pay{} -> merge_msg_req_pay(Prev, New, TrUserData);
      #req_ready{} ->
	  merge_msg_req_ready(Prev, New, TrUserData);
      #rsp_show{} ->
	  merge_msg_rsp_show(Prev, New, TrUserData);
      #req_zhuang{} ->
	  merge_msg_req_zhuang(Prev, New, TrUserData);
      #pb_unit{} -> merge_msg_pb_unit(Prev, New, TrUserData);
      #rsp_game_start{} ->
	  merge_msg_rsp_game_start(Prev, New, TrUserData);
      #rsp_start{} ->
	  merge_msg_rsp_start(Prev, New, TrUserData);
      #rsp_heart{} ->
	  merge_msg_rsp_heart(Prev, New, TrUserData);
      #rsp_dismiss{} ->
	  merge_msg_rsp_dismiss(Prev, New, TrUserData);
      #req_dismiss{} ->
	  merge_msg_req_dismiss(Prev, New, TrUserData);
      #rsp_get_data{} ->
	  merge_msg_rsp_get_data(Prev, New, TrUserData);
      #req_get_data{} ->
	  merge_msg_req_get_data(Prev, New, TrUserData);
      #pb_room_info{} ->
	  merge_msg_pb_room_info(Prev, New, TrUserData);
      #pb_player{} ->
	  merge_msg_pb_player(Prev, New, TrUserData);
      #rsp_join{} ->
	  merge_msg_rsp_join(Prev, New, TrUserData);
      #rsp_buy_gem{} ->
	  merge_msg_rsp_buy_gem(Prev, New, TrUserData);
      #req_buy_gem{} ->
	  merge_msg_req_buy_gem(Prev, New, TrUserData);
      #rsp_task_claim{} ->
	  merge_msg_rsp_task_claim(Prev, New, TrUserData);
      #pb_task{} -> merge_msg_pb_task(Prev, New, TrUserData);
      #req_show{} ->
	  merge_msg_req_show(Prev, New, TrUserData);
      #rsp_player_zhuang{} ->
	  merge_msg_rsp_player_zhuang(Prev, New, TrUserData);
      #rsp_zhuang{} ->
	  merge_msg_rsp_zhuang(Prev, New, TrUserData);
      #rsp_player_leave{} ->
	  merge_msg_rsp_player_leave(Prev, New, TrUserData);
      #rsp_leave{} ->
	  merge_msg_rsp_leave(Prev, New, TrUserData);
      #rsp_player_score{} ->
	  merge_msg_rsp_player_score(Prev, New, TrUserData);
      #rsp_score{} ->
	  merge_msg_rsp_score(Prev, New, TrUserData);
      #rsp_zhuang_end{} ->
	  merge_msg_rsp_zhuang_end(Prev, New, TrUserData);
      #notify_dismiss{} ->
	  merge_msg_notify_dismiss(Prev, New, TrUserData);
      #rsp_new_player{} ->
	  merge_msg_rsp_new_player(Prev, New, TrUserData);
      #rsp_login{} ->
	  merge_msg_rsp_login(Prev, New, TrUserData);
      #req_task_claim{} ->
	  merge_msg_req_task_claim(Prev, New, TrUserData);
      #req_create_room{} ->
	  merge_msg_req_create_room(Prev, New, TrUserData);
      #rsp_gem_rank{} ->
	  merge_msg_rsp_gem_rank(Prev, New, TrUserData);
      #req_gem_rank{} ->
	  merge_msg_req_gem_rank(Prev, New, TrUserData);
      #req_task{} ->
	  merge_msg_req_task(Prev, New, TrUserData);
      #rsp_check_pay{} ->
	  merge_msg_rsp_check_pay(Prev, New, TrUserData);
      #res_check_pay{} ->
	  merge_msg_res_check_pay(Prev, New, TrUserData);
      #rsp_player_ready{} ->
	  merge_msg_rsp_player_ready(Prev, New, TrUserData);
      #rsp_ready{} ->
	  merge_msg_rsp_ready(Prev, New, TrUserData);
      #notify_show{} ->
	  merge_msg_notify_show(Prev, New, TrUserData);
      #rsp_player_chat{} ->
	  merge_msg_rsp_player_chat(Prev, New, TrUserData);
      #rsp_result{} ->
	  merge_msg_rsp_result(Prev, New, TrUserData);
      #req_start{} ->
	  merge_msg_req_start(Prev, New, TrUserData);
      #req_heart{} ->
	  merge_msg_req_heart(Prev, New, TrUserData);
      #rsp_chat{} ->
	  merge_msg_rsp_chat(Prev, New, TrUserData);
      #rsp_save_data{} ->
	  merge_msg_rsp_save_data(Prev, New, TrUserData);
      #req_save_data{} ->
	  merge_msg_req_save_data(Prev, New, TrUserData);
      #req_coins_rank{} ->
	  merge_msg_req_coins_rank(Prev, New, TrUserData);
      #rsp_task{} ->
	  merge_msg_rsp_task(Prev, New, TrUserData);
      #notify_all_show{} ->
	  merge_msg_notify_all_show(Prev, New, TrUserData);
      #req_score{} ->
	  merge_msg_req_score(Prev, New, TrUserData);
      #req_leave{} ->
	  merge_msg_req_leave(Prev, New, TrUserData);
      #rsp_content{} ->
	  merge_msg_rsp_content(Prev, New, TrUserData);
      #req_content{} ->
	  merge_msg_req_content(Prev, New, TrUserData);
      #req_chat{} ->
	  merge_msg_req_chat(Prev, New, TrUserData);
      #rsp_pub{} -> merge_msg_rsp_pub(Prev, New, TrUserData);
      #req_pub{} -> merge_msg_req_pub(Prev, New, TrUserData)
    end.

merge_msg_req_join(#req_join{}, #req_join{id = NFid},
		   _) ->
    #req_join{id = NFid}.

merge_msg_req_login(#req_login{code = PFcode,
			       channel = PFchannel, user_id = PFuser_id},
		    #req_login{code = NFcode, channel = NFchannel,
			       user_id = NFuser_id},
		    _) ->
    #req_login{code =
		   if NFcode =:= undefined -> PFcode;
		      true -> NFcode
		   end,
	       channel =
		   if NFchannel =:= undefined -> PFchannel;
		      true -> NFchannel
		   end,
	       user_id =
		   if NFuser_id =:= undefined -> PFuser_id;
		      true -> NFuser_id
		   end}.

merge_msg_rsp_create_room(#rsp_create_room{room_id =
					       PFroom_id,
					   coins = PFcoins},
			  #rsp_create_room{status = NFstatus,
					   room_id = NFroom_id,
					   coins = NFcoins},
			  _) ->
    #rsp_create_room{status = NFstatus,
		     room_id =
			 if NFroom_id =:= undefined -> PFroom_id;
			    true -> NFroom_id
			 end,
		     coins =
			 if NFcoins =:= undefined -> PFcoins;
			    true -> NFcoins
			 end}.

merge_msg_pb_rank_player(#pb_rank_player{},
			 #pb_rank_player{name = NFname, logo = NFlogo,
					 num = NFnum},
			 _) ->
    #pb_rank_player{name = NFname, logo = NFlogo,
		    num = NFnum}.

merge_msg_rsp_coins_rank(#rsp_coins_rank{players =
					     PFplayers},
			 #rsp_coins_rank{players = NFplayers}, TrUserData) ->
    #rsp_coins_rank{players =
			'erlang_++'(PFplayers, NFplayers, TrUserData)}.

merge_msg_rsp_pay(#rsp_pay{coins = PFcoins,
			   nonce_str = PFnonce_str, sign = PFsign,
			   err_code_des = PFerr_code_des,
			   trade_type = PFtrade_type, prepay_id = PFprepay_id,
			   order_id = PForder_id},
		  #rsp_pay{status = NFstatus, coins = NFcoins,
			   nonce_str = NFnonce_str, sign = NFsign,
			   err_code_des = NFerr_code_des,
			   trade_type = NFtrade_type, prepay_id = NFprepay_id,
			   order_id = NForder_id},
		  _) ->
    #rsp_pay{status = NFstatus,
	     coins =
		 if NFcoins =:= undefined -> PFcoins;
		    true -> NFcoins
		 end,
	     nonce_str =
		 if NFnonce_str =:= undefined -> PFnonce_str;
		    true -> NFnonce_str
		 end,
	     sign =
		 if NFsign =:= undefined -> PFsign;
		    true -> NFsign
		 end,
	     err_code_des =
		 if NFerr_code_des =:= undefined -> PFerr_code_des;
		    true -> NFerr_code_des
		 end,
	     trade_type =
		 if NFtrade_type =:= undefined -> PFtrade_type;
		    true -> NFtrade_type
		 end,
	     prepay_id =
		 if NFprepay_id =:= undefined -> PFprepay_id;
		    true -> NFprepay_id
		 end,
	     order_id =
		 if NForder_id =:= undefined -> PForder_id;
		    true -> NForder_id
		 end}.

merge_msg_req_pay(#req_pay{}, #req_pay{rmb = NFrmb},
		  _) ->
    #req_pay{rmb = NFrmb}.

merge_msg_req_ready(#req_ready{},
		    #req_ready{type = NFtype}, _) ->
    #req_ready{type = NFtype}.

merge_msg_rsp_show(#rsp_show{},
		   #rsp_show{status = NFstatus}, _) ->
    #rsp_show{status = NFstatus}.

merge_msg_req_zhuang(#req_zhuang{},
		     #req_zhuang{base = NFbase}, _) ->
    #req_zhuang{base = NFbase}.

merge_msg_pb_unit(#pb_unit{},
		  #pb_unit{type = NFtype, num = NFnum}, _) ->
    #pb_unit{type = NFtype, num = NFnum}.

merge_msg_rsp_game_start(#rsp_game_start{uid = PFuid},
			 #rsp_game_start{uid = NFuid, round = NFround}, _) ->
    #rsp_game_start{uid =
			if NFuid =:= undefined -> PFuid;
			   true -> NFuid
			end,
		    round = NFround}.

merge_msg_rsp_start(#rsp_start{},
		    #rsp_start{status = NFstatus}, _) ->
    #rsp_start{status = NFstatus}.

merge_msg_rsp_heart(#rsp_heart{},
		    #rsp_heart{time = NFtime}, _) ->
    #rsp_heart{time = NFtime}.

merge_msg_rsp_dismiss(#rsp_dismiss{},
		      #rsp_dismiss{status = NFstatus}, _) ->
    #rsp_dismiss{status = NFstatus}.

merge_msg_req_dismiss(_Prev, New, _TrUserData) -> New.

merge_msg_rsp_get_data(#rsp_get_data{},
		       #rsp_get_data{data = NFdata}, _) ->
    #rsp_get_data{data = NFdata}.

merge_msg_req_get_data(_Prev, New, _TrUserData) -> New.

merge_msg_pb_room_info(#pb_room_info{},
		       #pb_room_info{room_id = NFroom_id, owner = NFowner,
				     round = NFround, pay = NFpay,
				     banker = NFbanker, special = NFspecial,
				     type = NFtype},
		       _) ->
    #pb_room_info{room_id = NFroom_id, owner = NFowner,
		  round = NFround, pay = NFpay, banker = NFbanker,
		  special = NFspecial, type = NFtype}.

merge_msg_pb_player(#pb_player{name = PFname,
			       coins = PFcoins, logo = PFlogo, owner = PFowner,
			       index = PFindex, pai = PFpai, delta = PFdelta},
		    #pb_player{name = NFname, uid = NFuid, coins = NFcoins,
			       logo = NFlogo, owner = NFowner, index = NFindex,
			       pai = NFpai, delta = NFdelta},
		    TrUserData) ->
    #pb_player{name =
		   if NFname =:= undefined -> PFname;
		      true -> NFname
		   end,
	       uid = NFuid,
	       coins =
		   if NFcoins =:= undefined -> PFcoins;
		      true -> NFcoins
		   end,
	       logo =
		   if NFlogo =:= undefined -> PFlogo;
		      true -> NFlogo
		   end,
	       owner =
		   if NFowner =:= undefined -> PFowner;
		      true -> NFowner
		   end,
	       index =
		   if NFindex =:= undefined -> PFindex;
		      true -> NFindex
		   end,
	       pai = 'erlang_++'(PFpai, NFpai, TrUserData),
	       delta =
		   if NFdelta =:= undefined -> PFdelta;
		      true -> NFdelta
		   end}.

merge_msg_rsp_join(#rsp_join{players = PFplayers,
			     room_info = PFroom_info},
		   #rsp_join{status = NFstatus, players = NFplayers,
			     room_info = NFroom_info},
		   TrUserData) ->
    #rsp_join{status = NFstatus,
	      players = 'erlang_++'(PFplayers, NFplayers, TrUserData),
	      room_info =
		  if PFroom_info /= undefined, NFroom_info /= undefined ->
			 merge_msg_pb_room_info(PFroom_info, NFroom_info,
						TrUserData);
		     PFroom_info == undefined -> NFroom_info;
		     NFroom_info == undefined -> PFroom_info
		  end}.

merge_msg_rsp_buy_gem(#rsp_buy_gem{gems = PFgems},
		      #rsp_buy_gem{status = NFstatus, gems = NFgems}, _) ->
    #rsp_buy_gem{status = NFstatus,
		 gems =
		     if NFgems =:= undefined -> PFgems;
			true -> NFgems
		     end}.

merge_msg_req_buy_gem(#req_buy_gem{},
		      #req_buy_gem{coins = NFcoins}, _) ->
    #req_buy_gem{coins = NFcoins}.

merge_msg_rsp_task_claim(#rsp_task_claim{},
			 #rsp_task_claim{status = NFstatus}, _) ->
    #rsp_task_claim{status = NFstatus}.

merge_msg_pb_task(#pb_task{},
		  #pb_task{id = NFid, num = NFnum, recive = NFrecive},
		  _) ->
    #pb_task{id = NFid, num = NFnum, recive = NFrecive}.

merge_msg_req_show(_Prev, New, _TrUserData) -> New.

merge_msg_rsp_player_zhuang(#rsp_player_zhuang{},
			    #rsp_player_zhuang{uid = NFuid, base = NFbase},
			    _) ->
    #rsp_player_zhuang{uid = NFuid, base = NFbase}.

merge_msg_rsp_zhuang(#rsp_zhuang{},
		     #rsp_zhuang{status = NFstatus}, _) ->
    #rsp_zhuang{status = NFstatus}.

merge_msg_rsp_player_leave(#rsp_player_leave{},
			   #rsp_player_leave{uid = NFuid}, _) ->
    #rsp_player_leave{uid = NFuid}.

merge_msg_rsp_leave(#rsp_leave{},
		    #rsp_leave{status = NFstatus}, _) ->
    #rsp_leave{status = NFstatus}.

merge_msg_rsp_player_score(#rsp_player_score{},
			   #rsp_player_score{uid = NFuid, score = NFscore,
					     delta = NFdelta},
			   _) ->
    #rsp_player_score{uid = NFuid, score = NFscore,
		      delta = NFdelta}.

merge_msg_rsp_score(#rsp_score{},
		    #rsp_score{status = NFstatus}, _) ->
    #rsp_score{status = NFstatus}.

merge_msg_rsp_zhuang_end(#rsp_zhuang_end{},
			 #rsp_zhuang_end{uid = NFuid, base = NFbase}, _) ->
    #rsp_zhuang_end{uid = NFuid, base = NFbase}.

merge_msg_notify_dismiss(_Prev, New, _TrUserData) ->
    New.

merge_msg_rsp_new_player(#rsp_new_player{player =
					     PFplayer},
			 #rsp_new_player{player = NFplayer}, TrUserData) ->
    #rsp_new_player{player =
			if PFplayer /= undefined, NFplayer /= undefined ->
			       merge_msg_pb_player(PFplayer, NFplayer,
						   TrUserData);
			   PFplayer == undefined -> NFplayer;
			   NFplayer == undefined -> PFplayer
			end}.

merge_msg_rsp_login(#rsp_login{coins = PFcoins,
			       gems = PFgems, uid = PFuid, name = PFname,
			       logo = PFlogo},
		    #rsp_login{status = NFstatus, coins = NFcoins,
			       gems = NFgems, uid = NFuid, name = NFname,
			       logo = NFlogo},
		    _) ->
    #rsp_login{status = NFstatus,
	       coins =
		   if NFcoins =:= undefined -> PFcoins;
		      true -> NFcoins
		   end,
	       gems =
		   if NFgems =:= undefined -> PFgems;
		      true -> NFgems
		   end,
	       uid =
		   if NFuid =:= undefined -> PFuid;
		      true -> NFuid
		   end,
	       name =
		   if NFname =:= undefined -> PFname;
		      true -> NFname
		   end,
	       logo =
		   if NFlogo =:= undefined -> PFlogo;
		      true -> NFlogo
		   end}.

merge_msg_req_task_claim(#req_task_claim{},
			 #req_task_claim{id = NFid}, _) ->
    #req_task_claim{id = NFid}.

merge_msg_req_create_room(#req_create_room{},
			  #req_create_room{round = NFround, pay = NFpay,
					   banker = NFbanker,
					   special = NFspecial, type = NFtype},
			  _) ->
    #req_create_room{round = NFround, pay = NFpay,
		     banker = NFbanker, special = NFspecial, type = NFtype}.

merge_msg_rsp_gem_rank(#rsp_gem_rank{players =
					 PFplayers},
		       #rsp_gem_rank{players = NFplayers}, TrUserData) ->
    #rsp_gem_rank{players =
		      'erlang_++'(PFplayers, NFplayers, TrUserData)}.

merge_msg_req_gem_rank(_Prev, New, _TrUserData) -> New.

merge_msg_req_task(_Prev, New, _TrUserData) -> New.

merge_msg_rsp_check_pay(#rsp_check_pay{coins = PFcoins},
			#rsp_check_pay{status = NFstatus, order_id = NForder_id,
				       coins = NFcoins},
			_) ->
    #rsp_check_pay{status = NFstatus, order_id = NForder_id,
		   coins =
		       if NFcoins =:= undefined -> PFcoins;
			  true -> NFcoins
		       end}.

merge_msg_res_check_pay(#res_check_pay{},
			#res_check_pay{order_id = NForder_id}, _) ->
    #res_check_pay{order_id = NForder_id}.

merge_msg_rsp_player_ready(#rsp_player_ready{},
			   #rsp_player_ready{uid = NFuid, type = NFtype}, _) ->
    #rsp_player_ready{uid = NFuid, type = NFtype}.

merge_msg_rsp_ready(#rsp_ready{},
		    #rsp_ready{status = NFstatus}, _) ->
    #rsp_ready{status = NFstatus}.

merge_msg_notify_show(#notify_show{},
		      #notify_show{uid = NFuid}, _) ->
    #notify_show{uid = NFuid}.

merge_msg_rsp_player_chat(#rsp_player_chat{msg = PFmsg,
					   url = PFurl},
			  #rsp_player_chat{msg = NFmsg, url = NFurl,
					   uid = NFuid},
			  _) ->
    #rsp_player_chat{msg =
			 if NFmsg =:= undefined -> PFmsg;
			    true -> NFmsg
			 end,
		     url =
			 if NFurl =:= undefined -> PFurl;
			    true -> NFurl
			 end,
		     uid = NFuid}.

merge_msg_rsp_result(#rsp_result{players = PFplayers},
		     #rsp_result{players = NFplayers}, TrUserData) ->
    #rsp_result{players =
		    'erlang_++'(PFplayers, NFplayers, TrUserData)}.

merge_msg_req_start(_Prev, New, _TrUserData) -> New.

merge_msg_req_heart(_Prev, New, _TrUserData) -> New.

merge_msg_rsp_chat(#rsp_chat{},
		   #rsp_chat{status = NFstatus}, _) ->
    #rsp_chat{status = NFstatus}.

merge_msg_rsp_save_data(#rsp_save_data{},
			#rsp_save_data{status = NFstatus}, _) ->
    #rsp_save_data{status = NFstatus}.

merge_msg_req_save_data(#req_save_data{},
			#req_save_data{data = NFdata}, _) ->
    #req_save_data{data = NFdata}.

merge_msg_req_coins_rank(_Prev, New, _TrUserData) ->
    New.

merge_msg_rsp_task(#rsp_task{tasks = PFtasks},
		   #rsp_task{tasks = NFtasks}, TrUserData) ->
    #rsp_task{tasks =
		  'erlang_++'(PFtasks, NFtasks, TrUserData)}.

merge_msg_notify_all_show(_Prev, New, _TrUserData) ->
    New.

merge_msg_req_score(#req_score{},
		    #req_score{score = NFscore}, _) ->
    #req_score{score = NFscore}.

merge_msg_req_leave(#req_leave{},
		    #req_leave{uid = NFuid}, _) ->
    #req_leave{uid = NFuid}.

merge_msg_rsp_content(#rsp_content{},
		      #rsp_content{status = NFstatus}, _) ->
    #rsp_content{status = NFstatus}.

merge_msg_req_content(#req_content{},
		      #req_content{weixin = NFweixin, text = NFtext}, _) ->
    #req_content{weixin = NFweixin, text = NFtext}.

merge_msg_req_chat(#req_chat{msg = PFmsg,
			     voice = PFvoice},
		   #req_chat{msg = NFmsg, voice = NFvoice}, TrUserData) ->
    #req_chat{msg =
		  if NFmsg =:= undefined -> PFmsg;
		     true -> NFmsg
		  end,
	      voice = 'erlang_++'(PFvoice, NFvoice, TrUserData)}.

merge_msg_rsp_pub(#rsp_pub{pub = PFpub},
		  #rsp_pub{status = NFstatus, pub = NFpub}, _) ->
    #rsp_pub{status = NFstatus,
	     pub =
		 if NFpub =:= undefined -> PFpub;
		    true -> NFpub
		 end}.

merge_msg_req_pub(_Prev, New, _TrUserData) -> New.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #req_join{} ->
	  v_msg_req_join(Msg, [req_join], TrUserData);
      #req_login{} ->
	  v_msg_req_login(Msg, [req_login], TrUserData);
      #rsp_create_room{} ->
	  v_msg_rsp_create_room(Msg, [rsp_create_room],
				TrUserData);
      #pb_rank_player{} ->
	  v_msg_pb_rank_player(Msg, [pb_rank_player], TrUserData);
      #rsp_coins_rank{} ->
	  v_msg_rsp_coins_rank(Msg, [rsp_coins_rank], TrUserData);
      #rsp_pay{} -> v_msg_rsp_pay(Msg, [rsp_pay], TrUserData);
      #req_pay{} -> v_msg_req_pay(Msg, [req_pay], TrUserData);
      #req_ready{} ->
	  v_msg_req_ready(Msg, [req_ready], TrUserData);
      #rsp_show{} ->
	  v_msg_rsp_show(Msg, [rsp_show], TrUserData);
      #req_zhuang{} ->
	  v_msg_req_zhuang(Msg, [req_zhuang], TrUserData);
      #pb_unit{} -> v_msg_pb_unit(Msg, [pb_unit], TrUserData);
      #rsp_game_start{} ->
	  v_msg_rsp_game_start(Msg, [rsp_game_start], TrUserData);
      #rsp_start{} ->
	  v_msg_rsp_start(Msg, [rsp_start], TrUserData);
      #rsp_heart{} ->
	  v_msg_rsp_heart(Msg, [rsp_heart], TrUserData);
      #rsp_dismiss{} ->
	  v_msg_rsp_dismiss(Msg, [rsp_dismiss], TrUserData);
      #req_dismiss{} ->
	  v_msg_req_dismiss(Msg, [req_dismiss], TrUserData);
      #rsp_get_data{} ->
	  v_msg_rsp_get_data(Msg, [rsp_get_data], TrUserData);
      #req_get_data{} ->
	  v_msg_req_get_data(Msg, [req_get_data], TrUserData);
      #pb_room_info{} ->
	  v_msg_pb_room_info(Msg, [pb_room_info], TrUserData);
      #pb_player{} ->
	  v_msg_pb_player(Msg, [pb_player], TrUserData);
      #rsp_join{} ->
	  v_msg_rsp_join(Msg, [rsp_join], TrUserData);
      #rsp_buy_gem{} ->
	  v_msg_rsp_buy_gem(Msg, [rsp_buy_gem], TrUserData);
      #req_buy_gem{} ->
	  v_msg_req_buy_gem(Msg, [req_buy_gem], TrUserData);
      #rsp_task_claim{} ->
	  v_msg_rsp_task_claim(Msg, [rsp_task_claim], TrUserData);
      #pb_task{} -> v_msg_pb_task(Msg, [pb_task], TrUserData);
      #req_show{} ->
	  v_msg_req_show(Msg, [req_show], TrUserData);
      #rsp_player_zhuang{} ->
	  v_msg_rsp_player_zhuang(Msg, [rsp_player_zhuang],
				  TrUserData);
      #rsp_zhuang{} ->
	  v_msg_rsp_zhuang(Msg, [rsp_zhuang], TrUserData);
      #rsp_player_leave{} ->
	  v_msg_rsp_player_leave(Msg, [rsp_player_leave],
				 TrUserData);
      #rsp_leave{} ->
	  v_msg_rsp_leave(Msg, [rsp_leave], TrUserData);
      #rsp_player_score{} ->
	  v_msg_rsp_player_score(Msg, [rsp_player_score],
				 TrUserData);
      #rsp_score{} ->
	  v_msg_rsp_score(Msg, [rsp_score], TrUserData);
      #rsp_zhuang_end{} ->
	  v_msg_rsp_zhuang_end(Msg, [rsp_zhuang_end], TrUserData);
      #notify_dismiss{} ->
	  v_msg_notify_dismiss(Msg, [notify_dismiss], TrUserData);
      #rsp_new_player{} ->
	  v_msg_rsp_new_player(Msg, [rsp_new_player], TrUserData);
      #rsp_login{} ->
	  v_msg_rsp_login(Msg, [rsp_login], TrUserData);
      #req_task_claim{} ->
	  v_msg_req_task_claim(Msg, [req_task_claim], TrUserData);
      #req_create_room{} ->
	  v_msg_req_create_room(Msg, [req_create_room],
				TrUserData);
      #rsp_gem_rank{} ->
	  v_msg_rsp_gem_rank(Msg, [rsp_gem_rank], TrUserData);
      #req_gem_rank{} ->
	  v_msg_req_gem_rank(Msg, [req_gem_rank], TrUserData);
      #req_task{} ->
	  v_msg_req_task(Msg, [req_task], TrUserData);
      #rsp_check_pay{} ->
	  v_msg_rsp_check_pay(Msg, [rsp_check_pay], TrUserData);
      #res_check_pay{} ->
	  v_msg_res_check_pay(Msg, [res_check_pay], TrUserData);
      #rsp_player_ready{} ->
	  v_msg_rsp_player_ready(Msg, [rsp_player_ready],
				 TrUserData);
      #rsp_ready{} ->
	  v_msg_rsp_ready(Msg, [rsp_ready], TrUserData);
      #notify_show{} ->
	  v_msg_notify_show(Msg, [notify_show], TrUserData);
      #rsp_player_chat{} ->
	  v_msg_rsp_player_chat(Msg, [rsp_player_chat],
				TrUserData);
      #rsp_result{} ->
	  v_msg_rsp_result(Msg, [rsp_result], TrUserData);
      #req_start{} ->
	  v_msg_req_start(Msg, [req_start], TrUserData);
      #req_heart{} ->
	  v_msg_req_heart(Msg, [req_heart], TrUserData);
      #rsp_chat{} ->
	  v_msg_rsp_chat(Msg, [rsp_chat], TrUserData);
      #rsp_save_data{} ->
	  v_msg_rsp_save_data(Msg, [rsp_save_data], TrUserData);
      #req_save_data{} ->
	  v_msg_req_save_data(Msg, [req_save_data], TrUserData);
      #req_coins_rank{} ->
	  v_msg_req_coins_rank(Msg, [req_coins_rank], TrUserData);
      #rsp_task{} ->
	  v_msg_rsp_task(Msg, [rsp_task], TrUserData);
      #notify_all_show{} ->
	  v_msg_notify_all_show(Msg, [notify_all_show],
				TrUserData);
      #req_score{} ->
	  v_msg_req_score(Msg, [req_score], TrUserData);
      #req_leave{} ->
	  v_msg_req_leave(Msg, [req_leave], TrUserData);
      #rsp_content{} ->
	  v_msg_rsp_content(Msg, [rsp_content], TrUserData);
      #req_content{} ->
	  v_msg_req_content(Msg, [req_content], TrUserData);
      #req_chat{} ->
	  v_msg_req_chat(Msg, [req_chat], TrUserData);
      #rsp_pub{} -> v_msg_rsp_pub(Msg, [rsp_pub], TrUserData);
      #req_pub{} -> v_msg_req_pub(Msg, [req_pub], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_req_join/3}).
v_msg_req_join(#req_join{id = F1}, Path, _) ->
    v_type_int32(F1, [id | Path]), ok.

-dialyzer({nowarn_function,v_msg_req_login/3}).
v_msg_req_login(#req_login{code = F1, channel = F2,
			   user_id = F3},
		Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [code | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [channel | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [user_id | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rsp_create_room/3}).
v_msg_rsp_create_room(#rsp_create_room{status = F1,
				       room_id = F2, coins = F3},
		      Path, _) ->
    v_type_sint32(F1, [status | Path]),
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [room_id | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [coins | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_pb_rank_player/3}).
v_msg_pb_rank_player(#pb_rank_player{name = F1,
				     logo = F2, num = F3},
		     Path, _) ->
    v_type_string(F1, [name | Path]),
    v_type_string(F2, [logo | Path]),
    v_type_int32(F3, [num | Path]),
    ok;
v_msg_pb_rank_player(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, pb_rank_player}, X, Path).

-dialyzer({nowarn_function,v_msg_rsp_coins_rank/3}).
v_msg_rsp_coins_rank(#rsp_coins_rank{players = F1},
		     Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_pb_rank_player(Elem, [players | Path],
				     TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, pb_rank_player}},
			 F1, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rsp_pay/3}).
v_msg_rsp_pay(#rsp_pay{status = F1, coins = F2,
		       nonce_str = F3, sign = F4, err_code_des = F5,
		       trade_type = F6, prepay_id = F7, order_id = F8},
	      Path, _) ->
    v_type_int32(F1, [status | Path]),
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [coins | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [nonce_str | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [sign | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [err_code_des | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [trade_type | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [prepay_id | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_string(F8, [order_id | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_req_pay/3}).
v_msg_req_pay(#req_pay{rmb = F1}, Path, _) ->
    v_type_int32(F1, [rmb | Path]), ok.

-dialyzer({nowarn_function,v_msg_req_ready/3}).
v_msg_req_ready(#req_ready{type = F1}, Path, _) ->
    v_type_int32(F1, [type | Path]), ok.

-dialyzer({nowarn_function,v_msg_rsp_show/3}).
v_msg_rsp_show(#rsp_show{status = F1}, Path, _) ->
    v_type_int32(F1, [status | Path]), ok.

-dialyzer({nowarn_function,v_msg_req_zhuang/3}).
v_msg_req_zhuang(#req_zhuang{base = F1}, Path, _) ->
    v_type_sint32(F1, [base | Path]), ok.

-dialyzer({nowarn_function,v_msg_pb_unit/3}).
v_msg_pb_unit(#pb_unit{type = F1, num = F2}, Path, _) ->
    v_type_int32(F1, [type | Path]),
    v_type_int32(F2, [num | Path]),
    ok;
v_msg_pb_unit(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, pb_unit}, X, Path).

-dialyzer({nowarn_function,v_msg_rsp_game_start/3}).
v_msg_rsp_game_start(#rsp_game_start{uid = F1,
				     round = F2},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [uid | Path])
    end,
    v_type_int32(F2, [round | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_rsp_start/3}).
v_msg_rsp_start(#rsp_start{status = F1}, Path, _) ->
    v_type_sint32(F1, [status | Path]), ok.

-dialyzer({nowarn_function,v_msg_rsp_heart/3}).
v_msg_rsp_heart(#rsp_heart{time = F1}, Path, _) ->
    v_type_int32(F1, [time | Path]), ok.

-dialyzer({nowarn_function,v_msg_rsp_dismiss/3}).
v_msg_rsp_dismiss(#rsp_dismiss{status = F1}, Path, _) ->
    v_type_int32(F1, [status | Path]), ok.

-dialyzer({nowarn_function,v_msg_req_dismiss/3}).
v_msg_req_dismiss(#req_dismiss{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_rsp_get_data/3}).
v_msg_rsp_get_data(#rsp_get_data{data = F1}, Path, _) ->
    v_type_string(F1, [data | Path]), ok.

-dialyzer({nowarn_function,v_msg_req_get_data/3}).
v_msg_req_get_data(#req_get_data{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_pb_room_info/3}).
v_msg_pb_room_info(#pb_room_info{room_id = F1,
				 owner = F2, round = F3, pay = F4, banker = F5,
				 special = F6, type = F7},
		   Path, _) ->
    v_type_int32(F1, [room_id | Path]),
    v_type_int32(F2, [owner | Path]),
    v_type_int32(F3, [round | Path]),
    v_type_int32(F4, [pay | Path]),
    v_type_int32(F5, [banker | Path]),
    v_type_int32(F6, [special | Path]),
    v_type_int32(F7, [type | Path]),
    ok;
v_msg_pb_room_info(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, pb_room_info}, X, Path).

-dialyzer({nowarn_function,v_msg_pb_player/3}).
v_msg_pb_player(#pb_player{name = F1, uid = F2,
			   coins = F3, logo = F4, owner = F5, index = F6,
			   pai = F7, delta = F8},
		Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    v_type_int32(F2, [uid | Path]),
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [coins | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [logo | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_int32(F5, [owner | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_int32(F6, [index | Path])
    end,
    if is_list(F7) ->
	   _ = [v_msg_pb_unit(Elem, [pai | Path], TrUserData)
		|| Elem <- F7],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, pb_unit}}, F7,
			 Path)
    end,
    if F8 == undefined -> ok;
       true -> v_type_int32(F8, [delta | Path])
    end,
    ok;
v_msg_pb_player(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, pb_player}, X, Path).

-dialyzer({nowarn_function,v_msg_rsp_join/3}).
v_msg_rsp_join(#rsp_join{status = F1, players = F2,
			 room_info = F3},
	       Path, TrUserData) ->
    v_type_sint32(F1, [status | Path]),
    if is_list(F2) ->
	   _ = [v_msg_pb_player(Elem, [players | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, pb_player}}, F2,
			 Path)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_pb_room_info(F3, [room_info | Path], TrUserData)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rsp_buy_gem/3}).
v_msg_rsp_buy_gem(#rsp_buy_gem{status = F1, gems = F2},
		  Path, _) ->
    v_type_int32(F1, [status | Path]),
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [gems | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_req_buy_gem/3}).
v_msg_req_buy_gem(#req_buy_gem{coins = F1}, Path, _) ->
    v_type_int32(F1, [coins | Path]), ok.

-dialyzer({nowarn_function,v_msg_rsp_task_claim/3}).
v_msg_rsp_task_claim(#rsp_task_claim{status = F1}, Path,
		     _) ->
    v_type_int32(F1, [status | Path]), ok.

-dialyzer({nowarn_function,v_msg_pb_task/3}).
v_msg_pb_task(#pb_task{id = F1, num = F2, recive = F3},
	      Path, _) ->
    v_type_int32(F1, [id | Path]),
    v_type_int32(F2, [num | Path]),
    v_type_int32(F3, [recive | Path]),
    ok;
v_msg_pb_task(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, pb_task}, X, Path).

-dialyzer({nowarn_function,v_msg_req_show/3}).
v_msg_req_show(#req_show{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_rsp_player_zhuang/3}).
v_msg_rsp_player_zhuang(#rsp_player_zhuang{uid = F1,
					   base = F2},
			Path, _) ->
    v_type_int32(F1, [uid | Path]),
    v_type_sint32(F2, [base | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_rsp_zhuang/3}).
v_msg_rsp_zhuang(#rsp_zhuang{status = F1}, Path, _) ->
    v_type_sint32(F1, [status | Path]), ok.

-dialyzer({nowarn_function,v_msg_rsp_player_leave/3}).
v_msg_rsp_player_leave(#rsp_player_leave{uid = F1},
		       Path, _) ->
    v_type_int32(F1, [uid | Path]), ok.

-dialyzer({nowarn_function,v_msg_rsp_leave/3}).
v_msg_rsp_leave(#rsp_leave{status = F1}, Path, _) ->
    v_type_sint32(F1, [status | Path]), ok.

-dialyzer({nowarn_function,v_msg_rsp_player_score/3}).
v_msg_rsp_player_score(#rsp_player_score{uid = F1,
					 score = F2, delta = F3},
		       Path, _) ->
    v_type_int32(F1, [uid | Path]),
    v_type_int32(F2, [score | Path]),
    v_type_int32(F3, [delta | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_rsp_score/3}).
v_msg_rsp_score(#rsp_score{status = F1}, Path, _) ->
    v_type_int32(F1, [status | Path]), ok.

-dialyzer({nowarn_function,v_msg_rsp_zhuang_end/3}).
v_msg_rsp_zhuang_end(#rsp_zhuang_end{uid = F1,
				     base = F2},
		     Path, _) ->
    v_type_int32(F1, [uid | Path]),
    v_type_sint32(F2, [base | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_notify_dismiss/3}).
v_msg_notify_dismiss(#notify_dismiss{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_rsp_new_player/3}).
v_msg_rsp_new_player(#rsp_new_player{player = F1}, Path,
		     TrUserData) ->
    v_msg_pb_player(F1, [player | Path], TrUserData), ok.

-dialyzer({nowarn_function,v_msg_rsp_login/3}).
v_msg_rsp_login(#rsp_login{status = F1, coins = F2,
			   gems = F3, uid = F4, name = F5, logo = F6},
		Path, _) ->
    v_type_sint32(F1, [status | Path]),
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [coins | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [gems | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [uid | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [name | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [logo | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_req_task_claim/3}).
v_msg_req_task_claim(#req_task_claim{id = F1}, Path,
		     _) ->
    v_type_int32(F1, [id | Path]), ok.

-dialyzer({nowarn_function,v_msg_req_create_room/3}).
v_msg_req_create_room(#req_create_room{round = F1,
				       pay = F2, banker = F3, special = F4,
				       type = F5},
		      Path, _) ->
    v_type_int32(F1, [round | Path]),
    v_type_int32(F2, [pay | Path]),
    v_type_int32(F3, [banker | Path]),
    v_type_int32(F4, [special | Path]),
    v_type_int32(F5, [type | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_rsp_gem_rank/3}).
v_msg_rsp_gem_rank(#rsp_gem_rank{players = F1}, Path,
		   TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_pb_rank_player(Elem, [players | Path],
				     TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, pb_rank_player}},
			 F1, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_req_gem_rank/3}).
v_msg_req_gem_rank(#req_gem_rank{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_req_task/3}).
v_msg_req_task(#req_task{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_rsp_check_pay/3}).
v_msg_rsp_check_pay(#rsp_check_pay{status = F1,
				   order_id = F2, coins = F3},
		    Path, _) ->
    v_type_int32(F1, [status | Path]),
    v_type_string(F2, [order_id | Path]),
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [coins | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_res_check_pay/3}).
v_msg_res_check_pay(#res_check_pay{order_id = F1}, Path,
		    _) ->
    v_type_string(F1, [order_id | Path]), ok.

-dialyzer({nowarn_function,v_msg_rsp_player_ready/3}).
v_msg_rsp_player_ready(#rsp_player_ready{uid = F1,
					 type = F2},
		       Path, _) ->
    v_type_int32(F1, [uid | Path]),
    v_type_int32(F2, [type | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_rsp_ready/3}).
v_msg_rsp_ready(#rsp_ready{status = F1}, Path, _) ->
    v_type_sint32(F1, [status | Path]), ok.

-dialyzer({nowarn_function,v_msg_notify_show/3}).
v_msg_notify_show(#notify_show{uid = F1}, Path, _) ->
    v_type_int32(F1, [uid | Path]), ok.

-dialyzer({nowarn_function,v_msg_rsp_player_chat/3}).
v_msg_rsp_player_chat(#rsp_player_chat{msg = F1,
				       url = F2, uid = F3},
		      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [msg | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [url | Path])
    end,
    v_type_int32(F3, [uid | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_rsp_result/3}).
v_msg_rsp_result(#rsp_result{players = F1}, Path,
		 TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_pb_player(Elem, [players | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, pb_player}}, F1,
			 Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_req_start/3}).
v_msg_req_start(#req_start{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_req_heart/3}).
v_msg_req_heart(#req_heart{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_rsp_chat/3}).
v_msg_rsp_chat(#rsp_chat{status = F1}, Path, _) ->
    v_type_int32(F1, [status | Path]), ok.

-dialyzer({nowarn_function,v_msg_rsp_save_data/3}).
v_msg_rsp_save_data(#rsp_save_data{status = F1}, Path,
		    _) ->
    v_type_int32(F1, [status | Path]), ok.

-dialyzer({nowarn_function,v_msg_req_save_data/3}).
v_msg_req_save_data(#req_save_data{data = F1}, Path,
		    _) ->
    v_type_string(F1, [data | Path]), ok.

-dialyzer({nowarn_function,v_msg_req_coins_rank/3}).
v_msg_req_coins_rank(#req_coins_rank{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_rsp_task/3}).
v_msg_rsp_task(#rsp_task{tasks = F1}, Path,
	       TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_pb_task(Elem, [tasks | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, pb_task}}, F1,
			 Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_notify_all_show/3}).
v_msg_notify_all_show(#notify_all_show{}, _Path, _) ->
    ok.

-dialyzer({nowarn_function,v_msg_req_score/3}).
v_msg_req_score(#req_score{score = F1}, Path, _) ->
    v_type_int32(F1, [score | Path]), ok.

-dialyzer({nowarn_function,v_msg_req_leave/3}).
v_msg_req_leave(#req_leave{uid = F1}, Path, _) ->
    v_type_int32(F1, [uid | Path]), ok.

-dialyzer({nowarn_function,v_msg_rsp_content/3}).
v_msg_rsp_content(#rsp_content{status = F1}, Path, _) ->
    v_type_int32(F1, [status | Path]), ok.

-dialyzer({nowarn_function,v_msg_req_content/3}).
v_msg_req_content(#req_content{weixin = F1, text = F2},
		  Path, _) ->
    v_type_string(F1, [weixin | Path]),
    v_type_string(F2, [text | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_req_chat/3}).
v_msg_req_chat(#req_chat{msg = F1, voice = F2}, Path,
	       _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [msg | Path])
    end,
    if is_list(F2) ->
	   _ = [v_type_bytes(Elem, [voice | Path]) || Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F2, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rsp_pub/3}).
v_msg_rsp_pub(#rsp_pub{status = F1, pub = F2}, Path,
	      _) ->
    v_type_sint32(F1, [status | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [pub | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_req_pub/3}).
v_msg_req_pub(#req_pub{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{msg, req_join},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, req_login},
      [#field{name = code, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = channel, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = user_id, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, rsp_create_room},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = sint32, occurrence = required, opts = []},
       #field{name = room_id, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = coins, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, pb_rank_player},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = logo, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = num, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, rsp_coins_rank},
      [#field{name = players, fnum = 1, rnum = 2,
	      type = {msg, pb_rank_player}, occurrence = repeated,
	      opts = []}]},
     {{msg, rsp_pay},
      [#field{name = status, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = coins, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = nonce_str, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = sign, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = err_code_des, fnum = 5, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = trade_type, fnum = 6, rnum = 7,
	      type = string, occurrence = optional, opts = []},
       #field{name = prepay_id, fnum = 7, rnum = 8,
	      type = string, occurrence = optional, opts = []},
       #field{name = order_id, fnum = 8, rnum = 9,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, req_pay},
      [#field{name = rmb, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, req_ready},
      [#field{name = type, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, rsp_show},
      [#field{name = status, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, req_zhuang},
      [#field{name = base, fnum = 1, rnum = 2, type = sint32,
	      occurrence = required, opts = []}]},
     {{msg, pb_unit},
      [#field{name = type, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = num, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, rsp_game_start},
      [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = round, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, rsp_start},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = sint32, occurrence = required, opts = []}]},
     {{msg, rsp_heart},
      [#field{name = time, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, rsp_dismiss},
      [#field{name = status, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, req_dismiss}, []},
     {{msg, rsp_get_data},
      [#field{name = data, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, req_get_data}, []},
     {{msg, pb_room_info},
      [#field{name = room_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = owner, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = round, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = pay, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = banker, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []},
       #field{name = special, fnum = 6, rnum = 7, type = int32,
	      occurrence = required, opts = []},
       #field{name = type, fnum = 7, rnum = 8, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, pb_player},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = uid, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = coins, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []},
       #field{name = logo, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = owner, fnum = 5, rnum = 6, type = int32,
	      occurrence = optional, opts = []},
       #field{name = index, fnum = 6, rnum = 7, type = int32,
	      occurrence = optional, opts = []},
       #field{name = pai, fnum = 7, rnum = 8,
	      type = {msg, pb_unit}, occurrence = repeated,
	      opts = []},
       #field{name = delta, fnum = 8, rnum = 9, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, rsp_join},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = sint32, occurrence = required, opts = []},
       #field{name = players, fnum = 2, rnum = 3,
	      type = {msg, pb_player}, occurrence = repeated,
	      opts = []},
       #field{name = room_info, fnum = 3, rnum = 4,
	      type = {msg, pb_room_info}, occurrence = optional,
	      opts = []}]},
     {{msg, rsp_buy_gem},
      [#field{name = status, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = gems, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, req_buy_gem},
      [#field{name = coins, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, rsp_task_claim},
      [#field{name = status, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, pb_task},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = num, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = recive, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, req_show}, []},
     {{msg, rsp_player_zhuang},
      [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = base, fnum = 2, rnum = 3, type = sint32,
	      occurrence = required, opts = []}]},
     {{msg, rsp_zhuang},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = sint32, occurrence = required, opts = []}]},
     {{msg, rsp_player_leave},
      [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, rsp_leave},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = sint32, occurrence = required, opts = []}]},
     {{msg, rsp_player_score},
      [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = score, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = delta, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, rsp_score},
      [#field{name = status, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, rsp_zhuang_end},
      [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = base, fnum = 2, rnum = 3, type = sint32,
	      occurrence = required, opts = []}]},
     {{msg, notify_dismiss}, []},
     {{msg, rsp_new_player},
      [#field{name = player, fnum = 1, rnum = 2,
	      type = {msg, pb_player}, occurrence = required,
	      opts = []}]},
     {{msg, rsp_login},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = sint32, occurrence = required, opts = []},
       #field{name = coins, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = gems, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []},
       #field{name = uid, fnum = 4, rnum = 5, type = int32,
	      occurrence = optional, opts = []},
       #field{name = name, fnum = 5, rnum = 6, type = string,
	      occurrence = optional, opts = []},
       #field{name = logo, fnum = 6, rnum = 7, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, req_task_claim},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, req_create_room},
      [#field{name = round, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = pay, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = banker, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = special, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = type, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, rsp_gem_rank},
      [#field{name = players, fnum = 1, rnum = 2,
	      type = {msg, pb_rank_player}, occurrence = repeated,
	      opts = []}]},
     {{msg, req_gem_rank}, []}, {{msg, req_task}, []},
     {{msg, rsp_check_pay},
      [#field{name = status, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = order_id, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = coins, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, res_check_pay},
      [#field{name = order_id, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, rsp_player_ready},
      [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = type, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, rsp_ready},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = sint32, occurrence = required, opts = []}]},
     {{msg, notify_show},
      [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, rsp_player_chat},
      [#field{name = msg, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = url, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = uid, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, rsp_result},
      [#field{name = players, fnum = 1, rnum = 2,
	      type = {msg, pb_player}, occurrence = repeated,
	      opts = []}]},
     {{msg, req_start}, []}, {{msg, req_heart}, []},
     {{msg, rsp_chat},
      [#field{name = status, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, rsp_save_data},
      [#field{name = status, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, req_save_data},
      [#field{name = data, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, req_coins_rank}, []},
     {{msg, rsp_task},
      [#field{name = tasks, fnum = 1, rnum = 2,
	      type = {msg, pb_task}, occurrence = repeated,
	      opts = []}]},
     {{msg, notify_all_show}, []},
     {{msg, req_score},
      [#field{name = score, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, req_leave},
      [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, rsp_content},
      [#field{name = status, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, req_content},
      [#field{name = weixin, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = text, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []}]},
     {{msg, req_chat},
      [#field{name = msg, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = voice, fnum = 2, rnum = 3, type = bytes,
	      occurrence = repeated, opts = []}]},
     {{msg, rsp_pub},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = sint32, occurrence = required, opts = []},
       #field{name = pub, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, req_pub}, []}].


get_msg_names() ->
    [req_join, req_login, rsp_create_room, pb_rank_player,
     rsp_coins_rank, rsp_pay, req_pay, req_ready, rsp_show,
     req_zhuang, pb_unit, rsp_game_start, rsp_start,
     rsp_heart, rsp_dismiss, req_dismiss, rsp_get_data,
     req_get_data, pb_room_info, pb_player, rsp_join,
     rsp_buy_gem, req_buy_gem, rsp_task_claim, pb_task,
     req_show, rsp_player_zhuang, rsp_zhuang,
     rsp_player_leave, rsp_leave, rsp_player_score,
     rsp_score, rsp_zhuang_end, notify_dismiss,
     rsp_new_player, rsp_login, req_task_claim,
     req_create_room, rsp_gem_rank, req_gem_rank, req_task,
     rsp_check_pay, res_check_pay, rsp_player_ready,
     rsp_ready, notify_show, rsp_player_chat, rsp_result,
     req_start, req_heart, rsp_chat, rsp_save_data,
     req_save_data, req_coins_rank, rsp_task,
     notify_all_show, req_score, req_leave, rsp_content,
     req_content, req_chat, rsp_pub, req_pub].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(req_join) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(req_login) ->
    [#field{name = code, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = channel, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = user_id, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(rsp_create_room) ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = sint32, occurrence = required, opts = []},
     #field{name = room_id, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = coins, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(pb_rank_player) ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = logo, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = num, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(rsp_coins_rank) ->
    [#field{name = players, fnum = 1, rnum = 2,
	    type = {msg, pb_rank_player}, occurrence = repeated,
	    opts = []}];
find_msg_def(rsp_pay) ->
    [#field{name = status, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = coins, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = nonce_str, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = sign, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = err_code_des, fnum = 5, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = trade_type, fnum = 6, rnum = 7,
	    type = string, occurrence = optional, opts = []},
     #field{name = prepay_id, fnum = 7, rnum = 8,
	    type = string, occurrence = optional, opts = []},
     #field{name = order_id, fnum = 8, rnum = 9,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(req_pay) ->
    [#field{name = rmb, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(req_ready) ->
    [#field{name = type, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(rsp_show) ->
    [#field{name = status, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(req_zhuang) ->
    [#field{name = base, fnum = 1, rnum = 2, type = sint32,
	    occurrence = required, opts = []}];
find_msg_def(pb_unit) ->
    [#field{name = type, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = num, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(rsp_game_start) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = round, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(rsp_start) ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = sint32, occurrence = required, opts = []}];
find_msg_def(rsp_heart) ->
    [#field{name = time, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(rsp_dismiss) ->
    [#field{name = status, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(req_dismiss) -> [];
find_msg_def(rsp_get_data) ->
    [#field{name = data, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def(req_get_data) -> [];
find_msg_def(pb_room_info) ->
    [#field{name = room_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = owner, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = round, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = pay, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = banker, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []},
     #field{name = special, fnum = 6, rnum = 7, type = int32,
	    occurrence = required, opts = []},
     #field{name = type, fnum = 7, rnum = 8, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(pb_player) ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = uid, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = coins, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []},
     #field{name = logo, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = owner, fnum = 5, rnum = 6, type = int32,
	    occurrence = optional, opts = []},
     #field{name = index, fnum = 6, rnum = 7, type = int32,
	    occurrence = optional, opts = []},
     #field{name = pai, fnum = 7, rnum = 8,
	    type = {msg, pb_unit}, occurrence = repeated,
	    opts = []},
     #field{name = delta, fnum = 8, rnum = 9, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(rsp_join) ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = sint32, occurrence = required, opts = []},
     #field{name = players, fnum = 2, rnum = 3,
	    type = {msg, pb_player}, occurrence = repeated,
	    opts = []},
     #field{name = room_info, fnum = 3, rnum = 4,
	    type = {msg, pb_room_info}, occurrence = optional,
	    opts = []}];
find_msg_def(rsp_buy_gem) ->
    [#field{name = status, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = gems, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(req_buy_gem) ->
    [#field{name = coins, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(rsp_task_claim) ->
    [#field{name = status, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(pb_task) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = num, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = recive, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(req_show) -> [];
find_msg_def(rsp_player_zhuang) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = base, fnum = 2, rnum = 3, type = sint32,
	    occurrence = required, opts = []}];
find_msg_def(rsp_zhuang) ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = sint32, occurrence = required, opts = []}];
find_msg_def(rsp_player_leave) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(rsp_leave) ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = sint32, occurrence = required, opts = []}];
find_msg_def(rsp_player_score) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = score, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = delta, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(rsp_score) ->
    [#field{name = status, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(rsp_zhuang_end) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = base, fnum = 2, rnum = 3, type = sint32,
	    occurrence = required, opts = []}];
find_msg_def(notify_dismiss) -> [];
find_msg_def(rsp_new_player) ->
    [#field{name = player, fnum = 1, rnum = 2,
	    type = {msg, pb_player}, occurrence = required,
	    opts = []}];
find_msg_def(rsp_login) ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = sint32, occurrence = required, opts = []},
     #field{name = coins, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = gems, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []},
     #field{name = uid, fnum = 4, rnum = 5, type = int32,
	    occurrence = optional, opts = []},
     #field{name = name, fnum = 5, rnum = 6, type = string,
	    occurrence = optional, opts = []},
     #field{name = logo, fnum = 6, rnum = 7, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(req_task_claim) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(req_create_room) ->
    [#field{name = round, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = pay, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = banker, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = special, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = type, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(rsp_gem_rank) ->
    [#field{name = players, fnum = 1, rnum = 2,
	    type = {msg, pb_rank_player}, occurrence = repeated,
	    opts = []}];
find_msg_def(req_gem_rank) -> [];
find_msg_def(req_task) -> [];
find_msg_def(rsp_check_pay) ->
    [#field{name = status, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = order_id, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = coins, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(res_check_pay) ->
    [#field{name = order_id, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def(rsp_player_ready) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = type, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(rsp_ready) ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = sint32, occurrence = required, opts = []}];
find_msg_def(notify_show) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(rsp_player_chat) ->
    [#field{name = msg, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = url, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = uid, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(rsp_result) ->
    [#field{name = players, fnum = 1, rnum = 2,
	    type = {msg, pb_player}, occurrence = repeated,
	    opts = []}];
find_msg_def(req_start) -> [];
find_msg_def(req_heart) -> [];
find_msg_def(rsp_chat) ->
    [#field{name = status, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(rsp_save_data) ->
    [#field{name = status, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(req_save_data) ->
    [#field{name = data, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def(req_coins_rank) -> [];
find_msg_def(rsp_task) ->
    [#field{name = tasks, fnum = 1, rnum = 2,
	    type = {msg, pb_task}, occurrence = repeated,
	    opts = []}];
find_msg_def(notify_all_show) -> [];
find_msg_def(req_score) ->
    [#field{name = score, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(req_leave) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(rsp_content) ->
    [#field{name = status, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(req_content) ->
    [#field{name = weixin, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = text, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []}];
find_msg_def(req_chat) ->
    [#field{name = msg, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = voice, fnum = 2, rnum = 3, type = bytes,
	    occurrence = repeated, opts = []}];
find_msg_def(rsp_pub) ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = sint32, occurrence = required, opts = []},
     #field{name = pub, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(req_pub) -> [];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.26.8".

gpb_version_as_list() ->
    [3,26,8].
