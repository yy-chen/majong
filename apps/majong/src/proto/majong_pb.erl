%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.8
-module(majong_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("majong_pb.hrl").
-include("gpb.hrl").



-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
  case proplists:get_bool(verify, Opts) of
    true -> verify_msg(Msg, Opts);
    false -> ok
  end,
  TrUserData = proplists:get_value(user_data, Opts),
  case Msg of
    #req_login{} -> e_msg_req_login(Msg, TrUserData);
    #rsp_login{} -> e_msg_rsp_login(Msg, TrUserData);
    #rsp_pub{} -> e_msg_rsp_pub(Msg, TrUserData);
    #req_pub{} -> e_msg_req_pub(Msg, TrUserData)
  end.



e_msg_req_login(Msg, TrUserData) ->
  e_msg_req_login(Msg, <<>>, TrUserData).


e_msg_req_login(#req_login{open_id = F1, token = F2},
    Bin, TrUserData) ->
  B1 = begin
         TrF1 = id(F1, TrUserData),
         e_type_string(TrF1, <<Bin/binary, 10>>)
       end,
  begin
    TrF2 = id(F2, TrUserData),
    e_type_string(TrF2, <<B1/binary, 18>>)
  end.

e_msg_rsp_login(Msg, TrUserData) ->
  e_msg_rsp_login(Msg, <<>>, TrUserData).


e_msg_rsp_login(#rsp_login{status = F1, coins = F2,
  gems = F3},
    Bin, TrUserData) ->
  B1 = begin
         TrF1 = id(F1, TrUserData),
         e_type_sint(TrF1, <<Bin/binary, 8>>)
       end,
  B2 = if F2 == undefined -> B1;
         true ->
           begin
             TrF2 = id(F2, TrUserData),
             e_type_int32(TrF2, <<B1/binary, 16>>)
           end
       end,
  if F3 == undefined -> B2;
    true ->
      begin
        TrF3 = id(F3, TrUserData),
        e_type_int32(TrF3, <<B2/binary, 24>>)
      end
  end.

e_msg_rsp_pub(Msg, TrUserData) ->
  e_msg_rsp_pub(Msg, <<>>, TrUserData).


e_msg_rsp_pub(#rsp_pub{status = F1, pub = F2}, Bin,
    TrUserData) ->
  B1 = begin
         TrF1 = id(F1, TrUserData),
         e_type_sint(TrF1, <<Bin/binary, 8>>)
       end,
  if F2 == undefined -> B1;
    true ->
      begin
        TrF2 = id(F2, TrUserData),
        e_type_string(TrF2, <<B1/binary, 18>>)
      end
  end.

e_msg_req_pub(_Msg, _TrUserData) -> <<>>.



e_type_sint(Value, Bin) when Value >= 0 ->
  e_varint(Value * 2, Bin);
e_type_sint(Value, Bin) ->
  e_varint(Value * -2 - 1, Bin).

e_type_int32(Value, Bin)
  when 0 =< Value, Value =< 127 ->
  <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
  <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
  e_varint(N, Bin).

e_type_string(S, Bin) ->
  Utf8 = unicode:characters_to_binary(S),
  Bin2 = e_varint(byte_size(Utf8), Bin),
  <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
  Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
  e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
  decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
  TrUserData = proplists:get_value(user_data, Opts),
  case MsgName of
    req_login -> d_msg_req_login(Bin, TrUserData);
    rsp_login -> d_msg_rsp_login(Bin, TrUserData);
    rsp_pub -> d_msg_rsp_pub(Bin, TrUserData);
    req_pub -> d_msg_req_pub(Bin, TrUserData)
  end.



d_msg_req_login(Bin, TrUserData) ->
  dfp_read_field_def_req_login(Bin, 0, 0,
    id(undefined, TrUserData),
    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_req_login(<<10, Rest/binary>>, Z1,
    Z2, F1, F2, TrUserData) ->
  d_field_req_login_open_id(Rest, Z1, Z2, F1, F2,
    TrUserData);
dfp_read_field_def_req_login(<<18, Rest/binary>>, Z1,
    Z2, F1, F2, TrUserData) ->
  d_field_req_login_token(Rest, Z1, Z2, F1, F2,
    TrUserData);
dfp_read_field_def_req_login(<<>>, 0, 0, F1, F2, _) ->
  #req_login{open_id = F1, token = F2};
dfp_read_field_def_req_login(Other, Z1, Z2, F1, F2,
    TrUserData) ->
  dg_read_field_def_req_login(Other, Z1, Z2, F1, F2,
    TrUserData).

dg_read_field_def_req_login(<<1:1, X:7, Rest/binary>>,
    N, Acc, F1, F2, TrUserData)
  when N < 32 - 7 ->
  dg_read_field_def_req_login(Rest, N + 7, X bsl N + Acc,
    F1, F2, TrUserData);
dg_read_field_def_req_login(<<0:1, X:7, Rest/binary>>,
    N, Acc, F1, F2, TrUserData) ->
  Key = X bsl N + Acc,
  case Key of
    10 ->
      d_field_req_login_open_id(Rest, 0, 0, F1, F2,
        TrUserData);
    18 ->
      d_field_req_login_token(Rest, 0, 0, F1, F2, TrUserData);
    _ ->
      case Key band 7 of
        0 ->
          skip_varint_req_login(Rest, 0, 0, F1, F2, TrUserData);
        1 -> skip_64_req_login(Rest, 0, 0, F1, F2, TrUserData);
        2 ->
          skip_length_delimited_req_login(Rest, 0, 0, F1, F2,
            TrUserData);
        5 -> skip_32_req_login(Rest, 0, 0, F1, F2, TrUserData)
      end
  end;
dg_read_field_def_req_login(<<>>, 0, 0, F1, F2, _) ->
  #req_login{open_id = F1, token = F2}.

d_field_req_login_open_id(<<1:1, X:7, Rest/binary>>, N,
    Acc, F1, F2, TrUserData)
  when N < 57 ->
  d_field_req_login_open_id(Rest, N + 7, X bsl N + Acc,
    F1, F2, TrUserData);
d_field_req_login_open_id(<<0:1, X:7, Rest/binary>>, N,
    Acc, _, F2, TrUserData) ->
  Len = X bsl N + Acc,
  <<Utf8:Len/binary, Rest2/binary>> = Rest,
  NewFValue = unicode:characters_to_list(Utf8, unicode),
  dfp_read_field_def_req_login(Rest2, 0, 0, NewFValue, F2,
    TrUserData).


d_field_req_login_token(<<1:1, X:7, Rest/binary>>, N,
    Acc, F1, F2, TrUserData)
  when N < 57 ->
  d_field_req_login_token(Rest, N + 7, X bsl N + Acc, F1,
    F2, TrUserData);
d_field_req_login_token(<<0:1, X:7, Rest/binary>>, N,
    Acc, F1, _, TrUserData) ->
  Len = X bsl N + Acc,
  <<Utf8:Len/binary, Rest2/binary>> = Rest,
  NewFValue = unicode:characters_to_list(Utf8, unicode),
  dfp_read_field_def_req_login(Rest2, 0, 0, F1, NewFValue,
    TrUserData).


skip_varint_req_login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
    F1, F2, TrUserData) ->
  skip_varint_req_login(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_req_login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
    F1, F2, TrUserData) ->
  dfp_read_field_def_req_login(Rest, Z1, Z2, F1, F2,
    TrUserData).


skip_length_delimited_req_login(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, TrUserData)
  when N < 57 ->
  skip_length_delimited_req_login(Rest, N + 7,
    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_req_login(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, TrUserData) ->
  Length = X bsl N + Acc,
  <<_:Length/binary, Rest2/binary>> = Rest,
  dfp_read_field_def_req_login(Rest2, 0, 0, F1, F2,
    TrUserData).


skip_32_req_login(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
    TrUserData) ->
  dfp_read_field_def_req_login(Rest, Z1, Z2, F1, F2,
    TrUserData).


skip_64_req_login(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
    TrUserData) ->
  dfp_read_field_def_req_login(Rest, Z1, Z2, F1, F2,
    TrUserData).


d_msg_rsp_login(Bin, TrUserData) ->
  dfp_read_field_def_rsp_login(Bin, 0, 0,
    id(undefined, TrUserData),
    id(undefined, TrUserData),
    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_login(<<8, Rest/binary>>, Z1, Z2,
    F1, F2, F3, TrUserData) ->
  d_field_rsp_login_status(Rest, Z1, Z2, F1, F2, F3,
    TrUserData);
dfp_read_field_def_rsp_login(<<16, Rest/binary>>, Z1,
    Z2, F1, F2, F3, TrUserData) ->
  d_field_rsp_login_coins(Rest, Z1, Z2, F1, F2, F3,
    TrUserData);
dfp_read_field_def_rsp_login(<<24, Rest/binary>>, Z1,
    Z2, F1, F2, F3, TrUserData) ->
  d_field_rsp_login_gems(Rest, Z1, Z2, F1, F2, F3,
    TrUserData);
dfp_read_field_def_rsp_login(<<>>, 0, 0, F1, F2, F3,
    _) ->
  #rsp_login{status = F1, coins = F2, gems = F3};
dfp_read_field_def_rsp_login(Other, Z1, Z2, F1, F2, F3,
    TrUserData) ->
  dg_read_field_def_rsp_login(Other, Z1, Z2, F1, F2, F3,
    TrUserData).

dg_read_field_def_rsp_login(<<1:1, X:7, Rest/binary>>,
    N, Acc, F1, F2, F3, TrUserData)
  when N < 32 - 7 ->
  dg_read_field_def_rsp_login(Rest, N + 7, X bsl N + Acc,
    F1, F2, F3, TrUserData);
dg_read_field_def_rsp_login(<<0:1, X:7, Rest/binary>>,
    N, Acc, F1, F2, F3, TrUserData) ->
  Key = X bsl N + Acc,
  case Key of
    8 ->
      d_field_rsp_login_status(Rest, 0, 0, F1, F2, F3,
        TrUserData);
    16 ->
      d_field_rsp_login_coins(Rest, 0, 0, F1, F2, F3,
        TrUserData);
    24 ->
      d_field_rsp_login_gems(Rest, 0, 0, F1, F2, F3,
        TrUserData);
    _ ->
      case Key band 7 of
        0 ->
          skip_varint_rsp_login(Rest, 0, 0, F1, F2, F3,
            TrUserData);
        1 ->
          skip_64_rsp_login(Rest, 0, 0, F1, F2, F3, TrUserData);
        2 ->
          skip_length_delimited_rsp_login(Rest, 0, 0, F1, F2, F3,
            TrUserData);
        5 ->
          skip_32_rsp_login(Rest, 0, 0, F1, F2, F3, TrUserData)
      end
  end;
dg_read_field_def_rsp_login(<<>>, 0, 0, F1, F2, F3,
    _) ->
  #rsp_login{status = F1, coins = F2, gems = F3}.

d_field_rsp_login_status(<<1:1, X:7, Rest/binary>>, N,
    Acc, F1, F2, F3, TrUserData)
  when N < 57 ->
  d_field_rsp_login_status(Rest, N + 7, X bsl N + Acc, F1,
    F2, F3, TrUserData);
d_field_rsp_login_status(<<0:1, X:7, Rest/binary>>, N,
    Acc, _, F2, F3, TrUserData) ->
  ZValue = X bsl N + Acc,
  NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
                true -> -(ZValue + 1 bsr 1)
              end,
  dfp_read_field_def_rsp_login(Rest, 0, 0, NewFValue, F2,
    F3, TrUserData).


d_field_rsp_login_coins(<<1:1, X:7, Rest/binary>>, N,
    Acc, F1, F2, F3, TrUserData)
  when N < 57 ->
  d_field_rsp_login_coins(Rest, N + 7, X bsl N + Acc, F1,
    F2, F3, TrUserData);
d_field_rsp_login_coins(<<0:1, X:7, Rest/binary>>, N,
    Acc, F1, _, F3, TrUserData) ->
  <<NewFValue:32/signed-native>> = <<(X bsl N +
    Acc):32/unsigned-native>>,
  dfp_read_field_def_rsp_login(Rest, 0, 0, F1, NewFValue,
    F3, TrUserData).


d_field_rsp_login_gems(<<1:1, X:7, Rest/binary>>, N,
    Acc, F1, F2, F3, TrUserData)
  when N < 57 ->
  d_field_rsp_login_gems(Rest, N + 7, X bsl N + Acc, F1,
    F2, F3, TrUserData);
d_field_rsp_login_gems(<<0:1, X:7, Rest/binary>>, N,
    Acc, F1, F2, _, TrUserData) ->
  <<NewFValue:32/signed-native>> = <<(X bsl N +
    Acc):32/unsigned-native>>,
  dfp_read_field_def_rsp_login(Rest, 0, 0, F1, F2,
    NewFValue, TrUserData).


skip_varint_rsp_login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
    F1, F2, F3, TrUserData) ->
  skip_varint_rsp_login(Rest, Z1, Z2, F1, F2, F3,
    TrUserData);
skip_varint_rsp_login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
    F1, F2, F3, TrUserData) ->
  dfp_read_field_def_rsp_login(Rest, Z1, Z2, F1, F2, F3,
    TrUserData).


skip_length_delimited_rsp_login(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, TrUserData)
  when N < 57 ->
  skip_length_delimited_rsp_login(Rest, N + 7,
    X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_rsp_login(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, TrUserData) ->
  Length = X bsl N + Acc,
  <<_:Length/binary, Rest2/binary>> = Rest,
  dfp_read_field_def_rsp_login(Rest2, 0, 0, F1, F2, F3,
    TrUserData).


skip_32_rsp_login(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
    F3, TrUserData) ->
  dfp_read_field_def_rsp_login(Rest, Z1, Z2, F1, F2, F3,
    TrUserData).


skip_64_rsp_login(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
    F3, TrUserData) ->
  dfp_read_field_def_rsp_login(Rest, Z1, Z2, F1, F2, F3,
    TrUserData).


d_msg_rsp_pub(Bin, TrUserData) ->
  dfp_read_field_def_rsp_pub(Bin, 0, 0,
    id(undefined, TrUserData),
    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rsp_pub(<<8, Rest/binary>>, Z1, Z2,
    F1, F2, TrUserData) ->
  d_field_rsp_pub_status(Rest, Z1, Z2, F1, F2,
    TrUserData);
dfp_read_field_def_rsp_pub(<<18, Rest/binary>>, Z1, Z2,
    F1, F2, TrUserData) ->
  d_field_rsp_pub_pub(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_rsp_pub(<<>>, 0, 0, F1, F2, _) ->
  #rsp_pub{status = F1, pub = F2};
dfp_read_field_def_rsp_pub(Other, Z1, Z2, F1, F2,
    TrUserData) ->
  dg_read_field_def_rsp_pub(Other, Z1, Z2, F1, F2,
    TrUserData).

dg_read_field_def_rsp_pub(<<1:1, X:7, Rest/binary>>, N,
    Acc, F1, F2, TrUserData)
  when N < 32 - 7 ->
  dg_read_field_def_rsp_pub(Rest, N + 7, X bsl N + Acc,
    F1, F2, TrUserData);
dg_read_field_def_rsp_pub(<<0:1, X:7, Rest/binary>>, N,
    Acc, F1, F2, TrUserData) ->
  Key = X bsl N + Acc,
  case Key of
    8 ->
      d_field_rsp_pub_status(Rest, 0, 0, F1, F2, TrUserData);
    18 ->
      d_field_rsp_pub_pub(Rest, 0, 0, F1, F2, TrUserData);
    _ ->
      case Key band 7 of
        0 ->
          skip_varint_rsp_pub(Rest, 0, 0, F1, F2, TrUserData);
        1 -> skip_64_rsp_pub(Rest, 0, 0, F1, F2, TrUserData);
        2 ->
          skip_length_delimited_rsp_pub(Rest, 0, 0, F1, F2,
            TrUserData);
        5 -> skip_32_rsp_pub(Rest, 0, 0, F1, F2, TrUserData)
      end
  end;
dg_read_field_def_rsp_pub(<<>>, 0, 0, F1, F2, _) ->
  #rsp_pub{status = F1, pub = F2}.

d_field_rsp_pub_status(<<1:1, X:7, Rest/binary>>, N,
    Acc, F1, F2, TrUserData)
  when N < 57 ->
  d_field_rsp_pub_status(Rest, N + 7, X bsl N + Acc, F1,
    F2, TrUserData);
d_field_rsp_pub_status(<<0:1, X:7, Rest/binary>>, N,
    Acc, _, F2, TrUserData) ->
  ZValue = X bsl N + Acc,
  NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
                true -> -(ZValue + 1 bsr 1)
              end,
  dfp_read_field_def_rsp_pub(Rest, 0, 0, NewFValue, F2,
    TrUserData).


d_field_rsp_pub_pub(<<1:1, X:7, Rest/binary>>, N, Acc,
    F1, F2, TrUserData)
  when N < 57 ->
  d_field_rsp_pub_pub(Rest, N + 7, X bsl N + Acc, F1, F2,
    TrUserData);
d_field_rsp_pub_pub(<<0:1, X:7, Rest/binary>>, N, Acc,
    F1, _, TrUserData) ->
  Len = X bsl N + Acc,
  <<Utf8:Len/binary, Rest2/binary>> = Rest,
  NewFValue = unicode:characters_to_list(Utf8, unicode),
  dfp_read_field_def_rsp_pub(Rest2, 0, 0, F1, NewFValue,
    TrUserData).


skip_varint_rsp_pub(<<1:1, _:7, Rest/binary>>, Z1, Z2,
    F1, F2, TrUserData) ->
  skip_varint_rsp_pub(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_rsp_pub(<<0:1, _:7, Rest/binary>>, Z1, Z2,
    F1, F2, TrUserData) ->
  dfp_read_field_def_rsp_pub(Rest, Z1, Z2, F1, F2,
    TrUserData).


skip_length_delimited_rsp_pub(<<1:1, X:7, Rest/binary>>,
    N, Acc, F1, F2, TrUserData)
  when N < 57 ->
  skip_length_delimited_rsp_pub(Rest, N + 7,
    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rsp_pub(<<0:1, X:7, Rest/binary>>,
    N, Acc, F1, F2, TrUserData) ->
  Length = X bsl N + Acc,
  <<_:Length/binary, Rest2/binary>> = Rest,
  dfp_read_field_def_rsp_pub(Rest2, 0, 0, F1, F2,
    TrUserData).


skip_32_rsp_pub(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
    TrUserData) ->
  dfp_read_field_def_rsp_pub(Rest, Z1, Z2, F1, F2,
    TrUserData).


skip_64_rsp_pub(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
    TrUserData) ->
  dfp_read_field_def_rsp_pub(Rest, Z1, Z2, F1, F2,
    TrUserData).


d_msg_req_pub(Bin, TrUserData) ->
  dfp_read_field_def_req_pub(Bin, 0, 0, TrUserData).

dfp_read_field_def_req_pub(<<>>, 0, 0, _) -> #req_pub{};
dfp_read_field_def_req_pub(Other, Z1, Z2, TrUserData) ->
  dg_read_field_def_req_pub(Other, Z1, Z2, TrUserData).

dg_read_field_def_req_pub(<<1:1, X:7, Rest/binary>>, N,
    Acc, TrUserData)
  when N < 32 - 7 ->
  dg_read_field_def_req_pub(Rest, N + 7, X bsl N + Acc,
    TrUserData);
dg_read_field_def_req_pub(<<0:1, X:7, Rest/binary>>, N,
    Acc, TrUserData) ->
  Key = X bsl N + Acc,
  case Key band 7 of
    0 -> skip_varint_req_pub(Rest, 0, 0, TrUserData);
    1 -> skip_64_req_pub(Rest, 0, 0, TrUserData);
    2 ->
      skip_length_delimited_req_pub(Rest, 0, 0, TrUserData);
    5 -> skip_32_req_pub(Rest, 0, 0, TrUserData)
  end;
dg_read_field_def_req_pub(<<>>, 0, 0, _) -> #req_pub{}.

skip_varint_req_pub(<<1:1, _:7, Rest/binary>>, Z1, Z2,
    TrUserData) ->
  skip_varint_req_pub(Rest, Z1, Z2, TrUserData);
skip_varint_req_pub(<<0:1, _:7, Rest/binary>>, Z1, Z2,
    TrUserData) ->
  dfp_read_field_def_req_pub(Rest, Z1, Z2, TrUserData).


skip_length_delimited_req_pub(<<1:1, X:7, Rest/binary>>,
    N, Acc, TrUserData)
  when N < 57 ->
  skip_length_delimited_req_pub(Rest, N + 7,
    X bsl N + Acc, TrUserData);
skip_length_delimited_req_pub(<<0:1, X:7, Rest/binary>>,
    N, Acc, TrUserData) ->
  Length = X bsl N + Acc,
  <<_:Length/binary, Rest2/binary>> = Rest,
  dfp_read_field_def_req_pub(Rest2, 0, 0, TrUserData).


skip_32_req_pub(<<_:32, Rest/binary>>, Z1, Z2,
    TrUserData) ->
  dfp_read_field_def_req_pub(Rest, Z1, Z2, TrUserData).


skip_64_req_pub(<<_:64, Rest/binary>>, Z1, Z2,
    TrUserData) ->
  dfp_read_field_def_req_pub(Rest, Z1, Z2, TrUserData).






merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
  when element(1, Prev) =:= element(1, New) ->
  TrUserData = proplists:get_value(user_data, Opts),
  case Prev of
    #req_login{} ->
      merge_msg_req_login(Prev, New, TrUserData);
    #rsp_login{} ->
      merge_msg_rsp_login(Prev, New, TrUserData);
    #rsp_pub{} -> merge_msg_rsp_pub(Prev, New, TrUserData);
    #req_pub{} -> merge_msg_req_pub(Prev, New, TrUserData)
  end.

merge_msg_req_login(#req_login{},
    #req_login{open_id = NFopen_id, token = NFtoken}, _) ->
  #req_login{open_id = NFopen_id, token = NFtoken}.

merge_msg_rsp_login(#rsp_login{coins = PFcoins,
  gems = PFgems},
    #rsp_login{status = NFstatus, coins = NFcoins,
      gems = NFgems},
    _) ->
  #rsp_login{status = NFstatus,
    coins =
    if NFcoins =:= undefined -> PFcoins;
      true -> NFcoins
    end,
    gems =
    if NFgems =:= undefined -> PFgems;
      true -> NFgems
    end}.

merge_msg_rsp_pub(#rsp_pub{pub = PFpub},
    #rsp_pub{status = NFstatus, pub = NFpub}, _) ->
  #rsp_pub{status = NFstatus,
    pub =
    if NFpub =:= undefined -> PFpub;
      true -> NFpub
    end}.

merge_msg_req_pub(_Prev, New, _TrUserData) -> New.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
  TrUserData = proplists:get_value(user_data, Opts),
  case Msg of
    #req_login{} ->
      v_msg_req_login(Msg, [req_login], TrUserData);
    #rsp_login{} ->
      v_msg_rsp_login(Msg, [rsp_login], TrUserData);
    #rsp_pub{} -> v_msg_rsp_pub(Msg, [rsp_pub], TrUserData);
    #req_pub{} -> v_msg_req_pub(Msg, [req_pub], TrUserData);
    _ -> mk_type_error(not_a_known_message, Msg, [])
  end.


-dialyzer({nowarn_function, v_msg_req_login/3}).
v_msg_req_login(#req_login{open_id = F1, token = F2},
    Path, _) ->
  v_type_string(F1, [open_id | Path]),
  v_type_string(F2, [token | Path]),
  ok.

-dialyzer({nowarn_function, v_msg_rsp_login/3}).
v_msg_rsp_login(#rsp_login{status = F1, coins = F2,
  gems = F3},
    Path, _) ->
  v_type_sint32(F1, [status | Path]),
  if F2 == undefined -> ok;
    true -> v_type_int32(F2, [coins | Path])
  end,
  if F3 == undefined -> ok;
    true -> v_type_int32(F3, [gems | Path])
  end,
  ok.

-dialyzer({nowarn_function, v_msg_rsp_pub/3}).
v_msg_rsp_pub(#rsp_pub{status = F1, pub = F2}, Path,
    _) ->
  v_type_sint32(F1, [status | Path]),
  if F2 == undefined -> ok;
    true -> v_type_string(F2, [pub | Path])
  end,
  ok.

-dialyzer({nowarn_function, v_msg_req_pub/3}).
v_msg_req_pub(#req_pub{}, _Path, _) -> ok.

-dialyzer({nowarn_function, v_type_sint32/2}).
v_type_sint32(N, _Path)
  when -2147483648 =< N, N =< 2147483647 ->
  ok;
v_type_sint32(N, Path) when is_integer(N) ->
  mk_type_error({value_out_of_range, sint32, signed, 32},
    N, Path);
v_type_sint32(X, Path) ->
  mk_type_error({bad_integer, sint32, signed, 32}, X,
    Path).

-dialyzer({nowarn_function, v_type_int32/2}).
v_type_int32(N, _Path)
  when -2147483648 =< N, N =< 2147483647 ->
  ok;
v_type_int32(N, Path) when is_integer(N) ->
  mk_type_error({value_out_of_range, int32, signed, 32},
    N, Path);
v_type_int32(X, Path) ->
  mk_type_error({bad_integer, int32, signed, 32}, X,
    Path).

-dialyzer({nowarn_function, v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
  try unicode:characters_to_binary(S) of
    B when is_binary(B) -> ok;
    {error, _, _} ->
      mk_type_error(bad_unicode_string, S, Path)
  catch
    error:badarg ->
      mk_type_error(bad_unicode_string, S, Path)
  end;
v_type_string(X, Path) ->
  mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
  Path2 = prettify_path(Path),
  erlang:error({gpb_type_error,
    {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
  list_to_atom(string:join(lists:map(fun atom_to_list/1,
    lists:reverse(PathR)),
    ".")).



-compile({inline, id/2}).
id(X, _TrUserData) -> X.




get_msg_defs() ->
  [{{msg, req_login},
    [#field{name = open_id, fnum = 1, rnum = 2,
      type = string, occurrence = required, opts = []},
      #field{name = token, fnum = 2, rnum = 3, type = string,
        occurrence = required, opts = []}]},
    {{msg, rsp_login},
      [#field{name = status, fnum = 1, rnum = 2,
        type = sint32, occurrence = required, opts = []},
        #field{name = coins, fnum = 2, rnum = 3, type = int32,
          occurrence = optional, opts = []},
        #field{name = gems, fnum = 3, rnum = 4, type = int32,
          occurrence = optional, opts = []}]},
    {{msg, rsp_pub},
      [#field{name = status, fnum = 1, rnum = 2,
        type = sint32, occurrence = required, opts = []},
        #field{name = pub, fnum = 2, rnum = 3, type = string,
          occurrence = optional, opts = []}]},
    {{msg, req_pub}, []}].


get_msg_names() ->
  [req_login, rsp_login, rsp_pub, req_pub].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
  case find_msg_def(MsgName) of
    Fs when is_list(Fs) -> Fs;
    error -> erlang:error({no_such_msg, MsgName})
  end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
  erlang:error({no_such_enum, EnumName}).


find_msg_def(req_login) ->
  [#field{name = open_id, fnum = 1, rnum = 2,
    type = string, occurrence = required, opts = []},
    #field{name = token, fnum = 2, rnum = 3, type = string,
      occurrence = required, opts = []}];
find_msg_def(rsp_login) ->
  [#field{name = status, fnum = 1, rnum = 2,
    type = sint32, occurrence = required, opts = []},
    #field{name = coins, fnum = 2, rnum = 3, type = int32,
      occurrence = optional, opts = []},
    #field{name = gems, fnum = 3, rnum = 4, type = int32,
      occurrence = optional, opts = []}];
find_msg_def(rsp_pub) ->
  [#field{name = status, fnum = 1, rnum = 2,
    type = sint32, occurrence = required, opts = []},
    #field{name = pub, fnum = 2, rnum = 3, type = string,
      occurrence = optional, opts = []}];
find_msg_def(req_pub) -> [];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
  erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
  erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
  erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
  "3.26.8".

gpb_version_as_list() ->
  [3, 26, 8].
